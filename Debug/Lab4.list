
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3d8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb4  0800e598  0800e598  0000f598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f44c  0800f44c  000112cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f44c  0800f44c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f454  0800f454  000112cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f454  0800f454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f458  0800f458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800f45c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e40  200002cc  0800f728  000112cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000210c  0800f728  0001210c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002570e  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005469  00000000  00000000  00036a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  0003be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001755  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003175c  00000000  00000000  0003f455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026880  00000000  00000000  00070bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121c64  00000000  00000000  00097431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001b9095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000919c  00000000  00000000  001b9150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001c22ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001c233e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001c2438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e580 	.word	0x0800e580

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d0 	.word	0x200002d0
 80001fc:	0800e580 	.word	0x0800e580

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <vApplicationGetIdleTaskMemory+0x2c>)
 8001024:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <vApplicationGetIdleTaskMemory+0x30>)
 800102a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200002e8 	.word	0x200002e8
 8001044:	2000033c 	.word	0x2000033c

08001048 <C6gen>:
float humidityQueue[MAX_DATA_POINTS];
float gyroscopeQueueX[MAX_DATA_POINTS];
float gyroscopeQueueY[MAX_DATA_POINTS];
float gyroscopeQueueZ[MAX_DATA_POINTS];

void C6gen(){
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
	float n = 38;
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <C6gen+0xa8>)
 8001050:	613b      	str	r3, [r7, #16]

	for (int i=0; i<n; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e039      	b.n	80010cc <C6gen+0x84>
		float mod = (float) (i)/n;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001062:	ed97 7a04 	vldr	s14, [r7, #16]
 8001066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106a:	edc7 7a03 	vstr	s15, [r7, #12]
		float pi = 3.1415926535897932;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <C6gen+0xac>)
 8001070:	60bb      	str	r3, [r7, #8]

		float input = arm_sin_f32(2*pi*mod);
 8001072:	edd7 7a02 	vldr	s15, [r7, #8]
 8001076:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800107a:	edd7 7a03 	vldr	s15, [r7, #12]
 800107e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f008 fe6d 	bl	8009d64 <arm_sin_f32>
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]

		input = input +1;
 800108e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109a:	edc7 7a01 	vstr	s15, [r7, #4]
		input = input * 127.5; // 2/3 of 255/2 range
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80010f8 <C6gen+0xb0>
 80010a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010aa:	edc7 7a01 	vstr	s15, [r7, #4]

		uint32_t out;
		out = (uint32_t)input;
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b6:	ee17 3a90 	vmov	r3, s15
 80010ba:	603b      	str	r3, [r7, #0]

		C6[i]=out;
 80010bc:	490f      	ldr	r1, [pc, #60]	@ (80010fc <C6gen+0xb4>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<n; i++){
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80010da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dcb9      	bgt.n	8001058 <C6gen+0x10>

	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	42180000 	.word	0x42180000
 80010f4:	40490fdb 	.word	0x40490fdb
 80010f8:	42ff0000 	.word	0x42ff0000
 80010fc:	200006f4 	.word	0x200006f4

08001100 <enqueueValue>:

void enqueueValue(float value, float *queue, int *front, int *rear) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	ed87 0a03 	vstr	s0, [r7, #12]
 800110a:	60b8      	str	r0, [r7, #8]
 800110c:	6079      	str	r1, [r7, #4]
 800110e:	603a      	str	r2, [r7, #0]
    if (isQueueFull(*front, *rear)) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f000 f86e 	bl	80011fc <isQueueFull>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <enqueueValue+0x30>
        dequeueValue(queue, front, rear); // Remove oldest value to make room
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f000 f82e 	bl	800118c <dequeueValue>
    }
    if (isQueueEmpty(*front)) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f881 	bl	800123c <isQueueEmpty>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <enqueueValue+0x50>
        *front = *rear = 0;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e00f      	b.n	8001170 <enqueueValue+0x70>
    } else {
        *rear = (*rear + 1) % MAX_DATA_POINTS;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <enqueueValue+0x88>)
 8001158:	fb83 2301 	smull	r2, r3, r3, r1
 800115c:	10da      	asrs	r2, r3, #3
 800115e:	17cb      	asrs	r3, r1, #31
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	1aca      	subs	r2, r1, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	601a      	str	r2, [r3, #0]
    }
    queue[*rear] = value;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	4413      	add	r3, r2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	66666667 	.word	0x66666667

0800118c <dequeueValue>:
void dequeueValue(float *queue, int *front, int *rear) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    if (isQueueEmpty(*front)) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f84d 	bl	800123c <isQueueEmpty>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <dequeueValue+0x24>
        printf("Queue underflow! No data to remove.\n");
 80011a8:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <dequeueValue+0x68>)
 80011aa:	f00a fc4b 	bl	800ba44 <puts>
        return;
 80011ae:	e01e      	b.n	80011ee <dequeueValue+0x62>
    }
    if (*front == *rear) {
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d108      	bne.n	80011ce <dequeueValue+0x42>
        // Single element in the queue
        *front = *rear = -1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e00f      	b.n	80011ee <dequeueValue+0x62>
    } else {
        *front = (*front + 1) % MAX_DATA_POINTS;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1c59      	adds	r1, r3, #1
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <dequeueValue+0x6c>)
 80011d6:	fb83 2301 	smull	r2, r3, r3, r1
 80011da:	10da      	asrs	r2, r3, #3
 80011dc:	17cb      	asrs	r3, r1, #31
 80011de:	1ad2      	subs	r2, r2, r3
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	1aca      	subs	r2, r1, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    }
}
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800e598 	.word	0x0800e598
 80011f8:	66666667 	.word	0x66666667

080011fc <isQueueFull>:
bool isQueueFull(int front, int rear) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    return (rear + 1) % MAX_DATA_POINTS == front;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <isQueueFull+0x3c>)
 800120c:	fb83 2301 	smull	r2, r3, r3, r1
 8001210:	10da      	asrs	r2, r3, #3
 8001212:	17cb      	asrs	r3, r1, #31
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	1aca      	subs	r2, r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4293      	cmp	r3, r2
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	66666667 	.word	0x66666667

0800123c <isQueueEmpty>:
bool isQueueEmpty(int front) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    return front == -1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <isRisingTrend>:
bool isRisingTrend(float *queue, int front, int rear) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b09a      	sub	sp, #104	@ 0x68
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
    float fieldData[MAX_DATA_POINTS];
    int count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	667b      	str	r3, [r7, #100]	@ 0x64

    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	663b      	str	r3, [r7, #96]	@ 0x60
        fieldData[count++] = queue[i];
 8001274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	441a      	add	r2, r3
 800127c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	6679      	str	r1, [r7, #100]	@ 0x64
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3368      	adds	r3, #104	@ 0x68
 8001288:	443b      	add	r3, r7
 800128a:	3b58      	subs	r3, #88	@ 0x58
 800128c:	601a      	str	r2, [r3, #0]
        if (i == rear) break;
 800128e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d00e      	beq.n	80012b4 <isRisingTrend+0x54>
    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 8001296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <isRisingTrend+0x84>)
 800129c:	fb83 1302 	smull	r1, r3, r3, r2
 80012a0:	10d9      	asrs	r1, r3, #3
 80012a2:	17d3      	asrs	r3, r2, #31
 80012a4:	1ac9      	subs	r1, r1, r3
 80012a6:	460b      	mov	r3, r1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	663b      	str	r3, [r7, #96]	@ 0x60
        fieldData[count++] = queue[i];
 80012b2:	e7df      	b.n	8001274 <isRisingTrend+0x14>
        if (i == rear) break;
 80012b4:	bf00      	nop
    }
    return calculateCovariance(fieldData, count) > 0.5;
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f8c5 	bl	800144c <calculateCovariance>
 80012c2:	eef0 7a40 	vmov.f32	s15, s0
 80012c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	bfcc      	ite	gt
 80012d4:	2301      	movgt	r3, #1
 80012d6:	2300      	movle	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3768      	adds	r7, #104	@ 0x68
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	66666667 	.word	0x66666667

080012e8 <isFallingTrend>:
bool isFallingTrend(float *queue, int front, int rear) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b09a      	sub	sp, #104	@ 0x68
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
    float fieldData[MAX_DATA_POINTS];
    int count = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	@ 0x64

    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	663b      	str	r3, [r7, #96]	@ 0x60
        fieldData[count++] = queue[i];
 80012fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	441a      	add	r2, r3
 8001304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	6679      	str	r1, [r7, #100]	@ 0x64
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	3368      	adds	r3, #104	@ 0x68
 8001310:	443b      	add	r3, r7
 8001312:	3b58      	subs	r3, #88	@ 0x58
 8001314:	601a      	str	r2, [r3, #0]
        if (i == rear) break;
 8001316:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	d00e      	beq.n	800133c <isFallingTrend+0x54>
    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 800131e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <isFallingTrend+0x84>)
 8001324:	fb83 1302 	smull	r1, r3, r3, r2
 8001328:	10d9      	asrs	r1, r3, #3
 800132a:	17d3      	asrs	r3, r2, #31
 800132c:	1ac9      	subs	r1, r1, r3
 800132e:	460b      	mov	r3, r1
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	663b      	str	r3, [r7, #96]	@ 0x60
        fieldData[count++] = queue[i];
 800133a:	e7df      	b.n	80012fc <isFallingTrend+0x14>
        if (i == rear) break;
 800133c:	bf00      	nop
    }
    return calculateCovariance(fieldData, count) < -0.5;
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f881 	bl	800144c <calculateCovariance>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	bf4c      	ite	mi
 800135c:	2301      	movmi	r3, #1
 800135e:	2300      	movpl	r3, #0
 8001360:	b2db      	uxtb	r3, r3

}
 8001362:	4618      	mov	r0, r3
 8001364:	3768      	adds	r7, #104	@ 0x68
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	66666667 	.word	0x66666667

08001370 <isFluctuatingTrend>:
bool isFluctuatingTrend(float *queue, int front, int rear) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b09c      	sub	sp, #112	@ 0x70
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    float fieldData[MAX_DATA_POINTS];
    int count = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	66bb      	str	r3, [r7, #104]	@ 0x68
        fieldData[count++] = queue[i];
 8001384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	441a      	add	r2, r3
 800138c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	3370      	adds	r3, #112	@ 0x70
 8001398:	443b      	add	r3, r7
 800139a:	3b5c      	subs	r3, #92	@ 0x5c
 800139c:	601a      	str	r2, [r3, #0]
        if (i == rear) break;
 800139e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d00e      	beq.n	80013c4 <isFluctuatingTrend+0x54>
    for (int i = front; ; i = (i + 1) % MAX_DATA_POINTS) {
 80013a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <isFluctuatingTrend+0x8c>)
 80013ac:	fb83 1302 	smull	r1, r3, r3, r2
 80013b0:	10d9      	asrs	r1, r3, #3
 80013b2:	17d3      	asrs	r3, r2, #31
 80013b4:	1ac9      	subs	r1, r1, r3
 80013b6:	460b      	mov	r3, r1
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	66bb      	str	r3, [r7, #104]	@ 0x68
        fieldData[count++] = queue[i];
 80013c2:	e7df      	b.n	8001384 <isFluctuatingTrend+0x14>
        if (i == rear) break;
 80013c4:	bf00      	nop
    }
    float covariance = calculateCovariance(fieldData, count);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f83d 	bl	800144c <calculateCovariance>
 80013d2:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    return fabs(covariance) > 0.5;
 80013d6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013da:	eef0 7ae7 	vabs.f32	s15, s15
 80013de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	bfcc      	ite	gt
 80013ec:	2301      	movgt	r3, #1
 80013ee:	2300      	movle	r3, #0
 80013f0:	b2db      	uxtb	r3, r3

}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3770      	adds	r7, #112	@ 0x70
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	66666667 	.word	0x66666667

08001400 <raiseAlarm>:
void raiseAlarm(const char *message) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	memset(buf, '\0', 100);
 8001408:	2264      	movs	r2, #100	@ 0x64
 800140a:	2100      	movs	r1, #0
 800140c:	480b      	ldr	r0, [pc, #44]	@ (800143c <raiseAlarm+0x3c>)
 800140e:	f00a fb33 	bl	800ba78 <memset>
    	sprintf(buf, "ALARM: %s\n", message);
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	490a      	ldr	r1, [pc, #40]	@ (8001440 <raiseAlarm+0x40>)
 8001416:	4809      	ldr	r0, [pc, #36]	@ (800143c <raiseAlarm+0x3c>)
 8001418:	f009 fb56 	bl	800aac8 <siprintf>
    	HAL_UART_Transmit(&huart1, (unsigned char *) buf, 100, 100);
 800141c:	2364      	movs	r3, #100	@ 0x64
 800141e:	2264      	movs	r2, #100	@ 0x64
 8001420:	4906      	ldr	r1, [pc, #24]	@ (800143c <raiseAlarm+0x3c>)
 8001422:	4808      	ldr	r0, [pc, #32]	@ (8001444 <raiseAlarm+0x44>)
 8001424:	f006 fb90 	bl	8007b48 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1, (unsigned char *) "\33[2K\r", 8, 100);
 8001428:	2364      	movs	r3, #100	@ 0x64
 800142a:	2208      	movs	r2, #8
 800142c:	4906      	ldr	r1, [pc, #24]	@ (8001448 <raiseAlarm+0x48>)
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <raiseAlarm+0x44>)
 8001430:	f006 fb8a 	bl	8007b48 <HAL_UART_Transmit>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200007a8 	.word	0x200007a8
 8001440:	0800e5bc 	.word	0x0800e5bc
 8001444:	20000650 	.word	0x20000650
 8001448:	0800e5c8 	.word	0x0800e5c8

0800144c <calculateCovariance>:
float calculateCovariance(const float *data, int size) {
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    if (size <= 1) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	dc02      	bgt.n	8001462 <calculateCovariance+0x16>
        return 0.0f;
 800145c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8001504 <calculateCovariance+0xb8>
 8001460:	e049      	b.n	80014f6 <calculateCovariance+0xaa>
    }

    float mean = 0.0f;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    float meanOfSquares = 0.0f;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < size; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e022      	b.n	80014ba <calculateCovariance+0x6e>
        mean += data[i];
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ed97 7a05 	vldr	s14, [r7, #20]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a05 	vstr	s15, [r7, #20]
        meanOfSquares += data[i] * data[i];
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < size; i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbd8      	blt.n	8001474 <calculateCovariance+0x28>
    }

    mean /= size;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80014d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d4:	edc7 7a05 	vstr	s15, [r7, #20]

    return (meanOfSquares / size) - (mean * mean);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80014e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	00000000 	.word	0x00000000

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b09c      	sub	sp, #112	@ 0x70
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f002 f867 	bl	80035e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001512:	f000 f875 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 f9fd 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 800151a:	f000 f9d1 	bl	80018c0 <MX_DMA_Init>
  MX_DAC1_Init();
 800151e:	f000 f8c1 	bl	80016a4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001522:	f000 f933 	bl	800178c <MX_TIM2_Init>
  MX_I2C2_Init();
 8001526:	f000 f8f1 	bl	800170c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800152a:	f000 f97d 	bl	8001828 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 800152e:	482a      	ldr	r0, [pc, #168]	@ (80015d8 <main+0xd0>)
 8001530:	f006 faba 	bl	8007aa8 <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001534:	4829      	ldr	r0, [pc, #164]	@ (80015dc <main+0xd4>)
 8001536:	f005 fe5f 	bl	80071f8 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorRead */
  osThreadDef(SensorRead, SensorReadTask, osPriorityLow, 0, 256);
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <main+0xd8>)
 800153c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800154a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorReadHandle = osThreadCreate(osThread(SensorRead), NULL);
 800154e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f007 f9c2 	bl	80088de <osThreadCreate>
 800155a:	4603      	mov	r3, r0
 800155c:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <main+0xdc>)
 800155e:	6013      	str	r3, [r2, #0]

  /* definition and creation of EnqueueData */
  osThreadDef(EnqueueData, EnqueueDataTask, osPriorityNormal, 0, 256);
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <main+0xe0>)
 8001562:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001566:	461d      	mov	r5, r3
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EnqueueDataHandle = osThreadCreate(osThread(EnqueueData), NULL);
 8001574:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f007 f9af 	bl	80088de <osThreadCreate>
 8001580:	4603      	mov	r3, r0
 8001582:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <main+0xe4>)
 8001584:	6013      	str	r3, [r2, #0]

  /* definition and creation of HandleAnomaly */
  osThreadDef(HandleAnomaly, HandleAnomalyTask, osPriorityNormal, 0, 256);
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <main+0xe8>)
 8001588:	f107 041c 	add.w	r4, r7, #28
 800158c:	461d      	mov	r5, r3
 800158e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HandleAnomalyHandle = osThreadCreate(osThread(HandleAnomaly), NULL);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f007 f99c 	bl	80088de <osThreadCreate>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <main+0xec>)
 80015aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of ProcessingData */
  osThreadDef(ProcessingData, ProcessingDataTask, osPriorityHigh, 0, 256);
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <main+0xf0>)
 80015ae:	463c      	mov	r4, r7
 80015b0:	461d      	mov	r5, r3
 80015b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessingDataHandle = osThreadCreate(osThread(ProcessingData), NULL);
 80015be:	463b      	mov	r3, r7
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f007 f98b 	bl	80088de <osThreadCreate>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <main+0xf4>)
 80015cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015ce:	f007 f97f 	bl	80088d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d2:	bf00      	nop
 80015d4:	e7fd      	b.n	80015d2 <main+0xca>
 80015d6:	bf00      	nop
 80015d8:	20000650 	.word	0x20000650
 80015dc:	20000604 	.word	0x20000604
 80015e0:	0800e5dc 	.word	0x0800e5dc
 80015e4:	200006e4 	.word	0x200006e4
 80015e8:	0800e604 	.word	0x0800e604
 80015ec:	200006e8 	.word	0x200006e8
 80015f0:	0800e630 	.word	0x0800e630
 80015f4:	200006ec 	.word	0x200006ec
 80015f8:	0800e65c 	.word	0x0800e65c
 80015fc:	200006f0 	.word	0x200006f0

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b096      	sub	sp, #88	@ 0x58
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2244      	movs	r2, #68	@ 0x44
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00a fa32 	bl	800ba78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001622:	2000      	movs	r0, #0
 8001624:	f004 f8ca 	bl	80057bc <HAL_PWREx_ControlVoltageScaling>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800162e:	f000 fc51 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001632:	2310      	movs	r3, #16
 8001634:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001636:	2301      	movs	r3, #1
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800163e:	2360      	movs	r3, #96	@ 0x60
 8001640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001646:	2301      	movs	r3, #1
 8001648:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800164e:	233c      	movs	r3, #60	@ 0x3c
 8001650:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001652:	2302      	movs	r3, #2
 8001654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f94e 	bl	8005904 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800166e:	f000 fc31 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	230f      	movs	r3, #15
 8001674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2303      	movs	r3, #3
 8001678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	2105      	movs	r1, #5
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fd54 	bl	8006138 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001696:	f000 fc1d 	bl	8001ed4 <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3758      	adds	r7, #88	@ 0x58
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2228      	movs	r2, #40	@ 0x28
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00a f9e1 	bl	800ba78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_DAC1_Init+0x60>)
 80016b8:	4a13      	ldr	r2, [pc, #76]	@ (8001708 <MX_DAC1_Init+0x64>)
 80016ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016bc:	4811      	ldr	r0, [pc, #68]	@ (8001704 <MX_DAC1_Init+0x60>)
 80016be:	f002 f8b9 	bl	8003834 <HAL_DAC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016c8:	f000 fc04 	bl	8001ed4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80016d0:	230a      	movs	r3, #10
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80016d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016d8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_DAC1_Init+0x60>)
 80016ee:	f002 fa57 	bl	8003ba0 <HAL_DAC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 fbec 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000053c 	.word	0x2000053c
 8001708:	40007400 	.word	0x40007400

0800170c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <MX_I2C2_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <MX_I2C2_Init+0x7c>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_I2C2_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001724:	2201      	movs	r2, #1
 8001726:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_I2C2_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_I2C2_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001746:	480e      	ldr	r0, [pc, #56]	@ (8001780 <MX_I2C2_Init+0x74>)
 8001748:	f003 f9c6 	bl	8004ad8 <HAL_I2C_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001752:	f000 fbbf 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <MX_I2C2_Init+0x74>)
 800175a:	f003 ff77 	bl	800564c <HAL_I2CEx_ConfigAnalogFilter>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001764:	f000 fbb6 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_I2C2_Init+0x74>)
 800176c:	f003 ffb9 	bl	80056e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 fbad 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200005b0 	.word	0x200005b0
 8001784:	40005800 	.word	0x40005800
 8001788:	30a175ab 	.word	0x30a175ab

0800178c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017c0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80017c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017d4:	f005 fcb8 	bl	8007148 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017de:	f000 fb79 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017f0:	f005 fe79 	bl	80074e6 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017fa:	f000 fb6b 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017fe:	2320      	movs	r3, #32
 8001800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <MX_TIM2_Init+0x98>)
 800180c:	f006 f8a6 	bl	800795c <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001816:	f000 fb5d 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000604 	.word	0x20000604

08001828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <MX_USART1_UART_Init+0x94>)
 8001830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001870:	4811      	ldr	r0, [pc, #68]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001872:	f006 f919 	bl	8007aa8 <HAL_UART_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 fb2a 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001880:	2100      	movs	r1, #0
 8001882:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001884:	f006 ff42 	bl	800870c <HAL_UARTEx_SetTxFifoThreshold>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800188e:	f000 fb21 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001892:	2100      	movs	r1, #0
 8001894:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 8001896:	f006 ff77 	bl	8008788 <HAL_UARTEx_SetRxFifoThreshold>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018a0:	f000 fb18 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <MX_USART1_UART_Init+0x90>)
 80018a6:	f006 fef8 	bl	800869a <HAL_UARTEx_DisableFifoMode>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f000 fb10 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000650 	.word	0x20000650
 80018bc:	40013800 	.word	0x40013800

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_DMA_Init+0x50>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <MX_DMA_Init+0x50>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_DMA_Init+0x50>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_DMA_Init+0x50>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <MX_DMA_Init+0x50>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_DMA_Init+0x50>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2105      	movs	r1, #5
 80018fa:	200b      	movs	r0, #11
 80018fc:	f001 ff70 	bl	80037e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001900:	200b      	movs	r0, #11
 8001902:	f001 ff89 	bl	8003818 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <MX_GPIO_Init+0x94>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_GPIO_Init+0x94>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_GPIO_Init+0x94>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8001972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001978:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <MX_GPIO_Init+0x98>)
 800198a:	f002 fe09 	bl	80045a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2105      	movs	r1, #5
 8001992:	2028      	movs	r0, #40	@ 0x28
 8001994:	f001 ff24 	bl	80037e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001998:	2028      	movs	r0, #40	@ 0x28
 800199a:	f001 ff3d 	bl	8003818 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	48000800 	.word	0x48000800

080019b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019c0:	d103      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x1a>
		  HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80019c2:	2100      	movs	r1, #0
 80019c4:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80019c6:	f002 f823 	bl	8003a10 <HAL_DAC_Stop_DMA>


	}
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000053c 	.word	0x2000053c

080019d8 <SensorReadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SensorReadTask */
void SensorReadTask(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	BSP_TSENSOR_Init();
 80019e0:	f000 fcee 	bl	80023c0 <BSP_TSENSOR_Init>
	BSP_PSENSOR_Init();
 80019e4:	f000 fcbe 	bl	8002364 <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init();
 80019e8:	f000 fc62 	bl	80022b0 <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init();
 80019ec:	f000 fc8e 	bl	800230c <BSP_MAGNETO_Init>
	BSP_ACCELERO_Init();
 80019f0:	f000 fbc6 	bl	8002180 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 80019f4:	f000 fc02 	bl	80021fc <BSP_GYRO_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80019f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019fc:	f006 ffbb 	bl	8008976 <osDelay>
    pressure = BSP_PSENSOR_ReadPressure();
 8001a00:	f000 fcd0 	bl	80023a4 <BSP_PSENSOR_ReadPressure>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
 8001a08:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <SensorReadTask+0x108>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
    humidity = BSP_HSENSOR_ReadHumidity();
 8001a0e:	f000 fc6f 	bl	80022f0 <BSP_HSENSOR_ReadHumidity>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <SensorReadTask+0x10c>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
    BSP_GYRO_GetXYZ(gyro);
 8001a1c:	4832      	ldr	r0, [pc, #200]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a1e:	f000 fc2f 	bl	8002280 <BSP_GYRO_GetXYZ>
    temperature = BSP_TSENSOR_ReadTemp();
 8001a22:	f000 fce9 	bl	80023f8 <BSP_TSENSOR_ReadTemp>
 8001a26:	eef0 7a40 	vmov.f32	s15, s0
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <SensorReadTask+0x114>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
    gyroscope = (gyro[0]+gyro[1]+gyro[2])/300;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a32:	ed93 7a00 	vldr	s14, [r3]
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a40:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001af0 <SensorReadTask+0x118>
 8001a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <SensorReadTask+0x11c>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
    data = sprintf(buf, "pressure = %2.d , humidity = %2.d , temperature = %2.d, gyro x= %2.d y = %2.d z = %2.d \r\n", (int)pressure, (int)humidity, (int)temperature, (int)gyro[0], (int)gyro[1], (int)gyro[2]);
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <SensorReadTask+0x108>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001a62:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <SensorReadTask+0x10c>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <SensorReadTask+0x114>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a76:	ee17 2a90 	vmov	r2, s15
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a84:	ee17 1a90 	vmov	r1, s15
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <SensorReadTask+0x110>)
 8001a98:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	9303      	str	r3, [sp, #12]
 8001aa6:	9002      	str	r0, [sp, #8]
 8001aa8:	9101      	str	r1, [sp, #4]
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	ee16 3a90 	vmov	r3, s13
 8001ab0:	ee17 2a10 	vmov	r2, s14
 8001ab4:	4910      	ldr	r1, [pc, #64]	@ (8001af8 <SensorReadTask+0x120>)
 8001ab6:	4811      	ldr	r0, [pc, #68]	@ (8001afc <SensorReadTask+0x124>)
 8001ab8:	f009 f806 	bl	800aac8 <siprintf>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <SensorReadTask+0x128>)
 8001ac0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, (unsigned char *) buf, 150, 100);
 8001ac2:	2364      	movs	r3, #100	@ 0x64
 8001ac4:	2296      	movs	r2, #150	@ 0x96
 8001ac6:	490d      	ldr	r1, [pc, #52]	@ (8001afc <SensorReadTask+0x124>)
 8001ac8:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <SensorReadTask+0x12c>)
 8001aca:	f006 f83d 	bl	8007b48 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (unsigned char *) "\33[2K\r", 8, 100);
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <SensorReadTask+0x130>)
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <SensorReadTask+0x12c>)
 8001ad6:	f006 f837 	bl	8007b48 <HAL_UART_Transmit>
    osDelay(500);
 8001ada:	bf00      	nop
 8001adc:	e78c      	b.n	80019f8 <SensorReadTask+0x20>
 8001ade:	bf00      	nop
 8001ae0:	2000078c 	.word	0x2000078c
 8001ae4:	20000790 	.word	0x20000790
 8001ae8:	20000794 	.word	0x20000794
 8001aec:	200007a0 	.word	0x200007a0
 8001af0:	43960000 	.word	0x43960000
 8001af4:	200007a4 	.word	0x200007a4
 8001af8:	0800e678 	.word	0x0800e678
 8001afc:	200007a8 	.word	0x200007a8
 8001b00:	20000840 	.word	0x20000840
 8001b04:	20000650 	.word	0x20000650
 8001b08:	0800e5c8 	.word	0x0800e5c8

08001b0c <EnqueueDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EnqueueDataTask */
void EnqueueDataTask(void const * argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnqueueDataTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8001b14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b18:	f006 ff2d 	bl	8008976 <osDelay>
    enqueueValue(pressure, pressureQueue, &frontPressure, &rearPressure);
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <EnqueueDataTask+0xa4>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <EnqueueDataTask+0xa8>)
 8001b24:	4924      	ldr	r1, [pc, #144]	@ (8001bb8 <EnqueueDataTask+0xac>)
 8001b26:	4825      	ldr	r0, [pc, #148]	@ (8001bbc <EnqueueDataTask+0xb0>)
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	f7ff fae8 	bl	8001100 <enqueueValue>
    enqueueValue(temperature, temperatureQueue, &frontTemperature, &rearTemperature);
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <EnqueueDataTask+0xb4>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <EnqueueDataTask+0xb8>)
 8001b38:	4923      	ldr	r1, [pc, #140]	@ (8001bc8 <EnqueueDataTask+0xbc>)
 8001b3a:	4824      	ldr	r0, [pc, #144]	@ (8001bcc <EnqueueDataTask+0xc0>)
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	f7ff fade 	bl	8001100 <enqueueValue>
    enqueueValue(humidity, humidityQueue, &frontHumidity, &rearHumidity);
 8001b44:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <EnqueueDataTask+0xc4>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <EnqueueDataTask+0xc8>)
 8001b4c:	4922      	ldr	r1, [pc, #136]	@ (8001bd8 <EnqueueDataTask+0xcc>)
 8001b4e:	4823      	ldr	r0, [pc, #140]	@ (8001bdc <EnqueueDataTask+0xd0>)
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	f7ff fad4 	bl	8001100 <enqueueValue>
    enqueueValue(gyro[0]/100, gyroscopeQueueX, &frontGyroscopeX, &rearGyroscopeX);
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <EnqueueDataTask+0xd4>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001be4 <EnqueueDataTask+0xd8>
 8001b62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b66:	4a20      	ldr	r2, [pc, #128]	@ (8001be8 <EnqueueDataTask+0xdc>)
 8001b68:	4920      	ldr	r1, [pc, #128]	@ (8001bec <EnqueueDataTask+0xe0>)
 8001b6a:	4821      	ldr	r0, [pc, #132]	@ (8001bf0 <EnqueueDataTask+0xe4>)
 8001b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b70:	f7ff fac6 	bl	8001100 <enqueueValue>
    enqueueValue(gyro[1]/100, gyroscopeQueueY, &frontGyroscopeY, &rearGyroscopeY);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <EnqueueDataTask+0xd4>)
 8001b76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b7a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001be4 <EnqueueDataTask+0xd8>
 8001b7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b82:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <EnqueueDataTask+0xe8>)
 8001b84:	491c      	ldr	r1, [pc, #112]	@ (8001bf8 <EnqueueDataTask+0xec>)
 8001b86:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <EnqueueDataTask+0xf0>)
 8001b88:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8c:	f7ff fab8 	bl	8001100 <enqueueValue>
    enqueueValue(gyro[2]/100, gyroscopeQueueZ, &frontGyroscopeZ, &rearGyroscopeZ);
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <EnqueueDataTask+0xd4>)
 8001b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b96:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001be4 <EnqueueDataTask+0xd8>
 8001b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b9e:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <EnqueueDataTask+0xf4>)
 8001ba0:	4918      	ldr	r1, [pc, #96]	@ (8001c04 <EnqueueDataTask+0xf8>)
 8001ba2:	4819      	ldr	r0, [pc, #100]	@ (8001c08 <EnqueueDataTask+0xfc>)
 8001ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba8:	f7ff faaa 	bl	8001100 <enqueueValue>
    osDelay(500);
 8001bac:	bf00      	nop
 8001bae:	e7b1      	b.n	8001b14 <EnqueueDataTask+0x8>
 8001bb0:	2000078c 	.word	0x2000078c
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000844 	.word	0x20000844
 8001bc0:	200007a0 	.word	0x200007a0
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000894 	.word	0x20000894
 8001bd0:	20000790 	.word	0x20000790
 8001bd4:	20000014 	.word	0x20000014
 8001bd8:	20000010 	.word	0x20000010
 8001bdc:	200008e4 	.word	0x200008e4
 8001be0:	20000794 	.word	0x20000794
 8001be4:	42c80000 	.word	0x42c80000
 8001be8:	2000001c 	.word	0x2000001c
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	20000934 	.word	0x20000934
 8001bf4:	20000024 	.word	0x20000024
 8001bf8:	20000020 	.word	0x20000020
 8001bfc:	20000984 	.word	0x20000984
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	20000028 	.word	0x20000028
 8001c08:	200009d4 	.word	0x200009d4

08001c0c <HandleAnomalyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandleAnomalyTask */
void HandleAnomalyTask(void const * argument)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleAnomalyTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8001c14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c18:	f006 fead 	bl	8008976 <osDelay>
    C6gen();
 8001c1c:	f7ff fa14 	bl	8001048 <C6gen>
    if (!isQueueEmpty(frontPressure) && !isQueueEmpty(frontHumidity) &&
 8001c20:	4b88      	ldr	r3, [pc, #544]	@ (8001e44 <HandleAnomalyTask+0x238>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fb09 	bl	800123c <isQueueEmpty>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ee      	beq.n	8001c14 <HandleAnomalyTask+0x8>
 8001c36:	4b84      	ldr	r3, [pc, #528]	@ (8001e48 <HandleAnomalyTask+0x23c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fafe 	bl	800123c <isQueueEmpty>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f083 0301 	eor.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0e3      	beq.n	8001c14 <HandleAnomalyTask+0x8>
        !isQueueEmpty(frontTemperature) && !isQueueEmpty(frontGyroscopeX)) {
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e4c <HandleAnomalyTask+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff faf3 	bl	800123c <isQueueEmpty>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
    if (!isQueueEmpty(frontPressure) && !isQueueEmpty(frontHumidity) &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0d8      	beq.n	8001c14 <HandleAnomalyTask+0x8>
        !isQueueEmpty(frontTemperature) && !isQueueEmpty(frontGyroscopeX)) {
 8001c62:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <HandleAnomalyTask+0x244>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fae8 	bl	800123c <isQueueEmpty>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f083 0301 	eor.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0cd      	beq.n	8001c14 <HandleAnomalyTask+0x8>

        bool fallingPressure = isFallingTrend(pressureQueue, frontPressure, rearPressure);
 8001c78:	4b72      	ldr	r3, [pc, #456]	@ (8001e44 <HandleAnomalyTask+0x238>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a75      	ldr	r2, [pc, #468]	@ (8001e54 <HandleAnomalyTask+0x248>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4875      	ldr	r0, [pc, #468]	@ (8001e58 <HandleAnomalyTask+0x24c>)
 8001c84:	f7ff fb30 	bl	80012e8 <isFallingTrend>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
        bool risingHumidity = isRisingTrend(humidityQueue, frontHumidity, rearHumidity);
 8001c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <HandleAnomalyTask+0x23c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a72      	ldr	r2, [pc, #456]	@ (8001e5c <HandleAnomalyTask+0x250>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4872      	ldr	r0, [pc, #456]	@ (8001e60 <HandleAnomalyTask+0x254>)
 8001c98:	f7ff fae2 	bl	8001260 <isRisingTrend>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73bb      	strb	r3, [r7, #14]
        bool fluctuatingTemp = isFluctuatingTrend(temperatureQueue, frontTemperature, rearTemperature);
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HandleAnomalyTask+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <HandleAnomalyTask+0x258>)
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	486f      	ldr	r0, [pc, #444]	@ (8001e68 <HandleAnomalyTask+0x25c>)
 8001cac:	f7ff fb60 	bl	8001370 <isFluctuatingTrend>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	737b      	strb	r3, [r7, #13]
        bool strongWinds = isFluctuatingTrend(gyroscopeQueueX, frontGyroscopeX, rearGyroscopeX)||isFluctuatingTrend(gyroscopeQueueY, frontGyroscopeY, rearGyroscopeY)||isFluctuatingTrend(gyroscopeQueueZ, frontGyroscopeZ, rearGyroscopeZ);
 8001cb4:	4b66      	ldr	r3, [pc, #408]	@ (8001e50 <HandleAnomalyTask+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a6c      	ldr	r2, [pc, #432]	@ (8001e6c <HandleAnomalyTask+0x260>)
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	486c      	ldr	r0, [pc, #432]	@ (8001e70 <HandleAnomalyTask+0x264>)
 8001cc0:	f7ff fb56 	bl	8001370 <isFluctuatingTrend>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HandleAnomalyTask+0xea>
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HandleAnomalyTask+0x268>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6a      	ldr	r2, [pc, #424]	@ (8001e78 <HandleAnomalyTask+0x26c>)
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4869      	ldr	r0, [pc, #420]	@ (8001e7c <HandleAnomalyTask+0x270>)
 8001cd6:	f7ff fb4b 	bl	8001370 <isFluctuatingTrend>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HandleAnomalyTask+0xea>
 8001ce0:	4b67      	ldr	r3, [pc, #412]	@ (8001e80 <HandleAnomalyTask+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a67      	ldr	r2, [pc, #412]	@ (8001e84 <HandleAnomalyTask+0x278>)
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4867      	ldr	r0, [pc, #412]	@ (8001e88 <HandleAnomalyTask+0x27c>)
 8001cec:	f7ff fb40 	bl	8001370 <isFluctuatingTrend>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HandleAnomalyTask+0xee>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HandleAnomalyTask+0xf0>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	733b      	strb	r3, [r7, #12]
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	733b      	strb	r3, [r7, #12]



        if (fallingPressure && risingHumidity && fluctuatingTemp) {
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HandleAnomalyTask+0x114>
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HandleAnomalyTask+0x114>
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HandleAnomalyTask+0x114>
            raiseAlarm("Thunderstorm detected!");
 8001d18:	485c      	ldr	r0, [pc, #368]	@ (8001e8c <HandleAnomalyTask+0x280>)
 8001d1a:	f7ff fb71 	bl	8001400 <raiseAlarm>
 8001d1e:	e090      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (fallingPressure && risingHumidity && strongWinds) {
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HandleAnomalyTask+0x12e>
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HandleAnomalyTask+0x12e>
 8001d2c:	7b3b      	ldrb	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HandleAnomalyTask+0x12e>
            raiseAlarm("Hurricane/Cyclone detected!");
 8001d32:	4857      	ldr	r0, [pc, #348]	@ (8001e90 <HandleAnomalyTask+0x284>)
 8001d34:	f7ff fb64 	bl	8001400 <raiseAlarm>
 8001d38:	e083      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (fallingPressure && fluctuatingTemp && strongWinds) {
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HandleAnomalyTask+0x148>
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HandleAnomalyTask+0x148>
 8001d46:	7b3b      	ldrb	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HandleAnomalyTask+0x148>
            raiseAlarm("Tornado detected!");
 8001d4c:	4851      	ldr	r0, [pc, #324]	@ (8001e94 <HandleAnomalyTask+0x288>)
 8001d4e:	f7ff fb57 	bl	8001400 <raiseAlarm>
 8001d52:	e076      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (fluctuatingTemp && isFluctuatingTrend(pressureQueue, frontPressure, rearPressure) &&
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HandleAnomalyTask+0x182>
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <HandleAnomalyTask+0x238>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e54 <HandleAnomalyTask+0x248>)
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	483c      	ldr	r0, [pc, #240]	@ (8001e58 <HandleAnomalyTask+0x24c>)
 8001d66:	f7ff fb03 	bl	8001370 <isFluctuatingTrend>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <HandleAnomalyTask+0x182>
                   isFluctuatingTrend(humidityQueue, frontHumidity, rearHumidity)) {
 8001d70:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <HandleAnomalyTask+0x23c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a39      	ldr	r2, [pc, #228]	@ (8001e5c <HandleAnomalyTask+0x250>)
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4839      	ldr	r0, [pc, #228]	@ (8001e60 <HandleAnomalyTask+0x254>)
 8001d7c:	f7ff faf8 	bl	8001370 <isFluctuatingTrend>
 8001d80:	4603      	mov	r3, r0
        } else if (fluctuatingTemp && isFluctuatingTrend(pressureQueue, frontPressure, rearPressure) &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HandleAnomalyTask+0x182>
            raiseAlarm("Atmospheric front detected!");
 8001d86:	4844      	ldr	r0, [pc, #272]	@ (8001e98 <HandleAnomalyTask+0x28c>)
 8001d88:	f7ff fb3a 	bl	8001400 <raiseAlarm>
 8001d8c:	e059      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (risingHumidity && temperatureQueue[rearTemperature] > 15.0) {
 8001d8e:	7bbb      	ldrb	r3, [r7, #14]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d011      	beq.n	8001db8 <HandleAnomalyTask+0x1ac>
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HandleAnomalyTask+0x258>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a33      	ldr	r2, [pc, #204]	@ (8001e68 <HandleAnomalyTask+0x25c>)
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd03      	ble.n	8001db8 <HandleAnomalyTask+0x1ac>
            raiseAlarm("Fog detected!");
 8001db0:	483a      	ldr	r0, [pc, #232]	@ (8001e9c <HandleAnomalyTask+0x290>)
 8001db2:	f7ff fb25 	bl	8001400 <raiseAlarm>
 8001db6:	e044      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (risingHumidity && temperatureQueue[rearTemperature] <= 0.0) {
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00f      	beq.n	8001dde <HandleAnomalyTask+0x1d2>
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HandleAnomalyTask+0x258>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HandleAnomalyTask+0x25c>)
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d803      	bhi.n	8001dde <HandleAnomalyTask+0x1d2>
            raiseAlarm("Snow detected!");
 8001dd6:	4832      	ldr	r0, [pc, #200]	@ (8001ea0 <HandleAnomalyTask+0x294>)
 8001dd8:	f7ff fb12 	bl	8001400 <raiseAlarm>
 8001ddc:	e031      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (risingHumidity && temperatureQueue[rearTemperature] > 0.0) {
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00f      	beq.n	8001e04 <HandleAnomalyTask+0x1f8>
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HandleAnomalyTask+0x258>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e68 <HandleAnomalyTask+0x25c>)
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	dd03      	ble.n	8001e04 <HandleAnomalyTask+0x1f8>
            raiseAlarm("Rain detected!");
 8001dfc:	4829      	ldr	r0, [pc, #164]	@ (8001ea4 <HandleAnomalyTask+0x298>)
 8001dfe:	f7ff faff 	bl	8001400 <raiseAlarm>
 8001e02:	e01e      	b.n	8001e42 <HandleAnomalyTask+0x236>
			//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
        } else if (strongWinds) {
 8001e04:	7b3b      	ldrb	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HandleAnomalyTask+0x216>
            raiseAlarm("Earthquake/Strong winds detected");
 8001e0a:	4827      	ldr	r0, [pc, #156]	@ (8001ea8 <HandleAnomalyTask+0x29c>)
 8001e0c:	f7ff faf8 	bl	8001400 <raiseAlarm>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, C6, 38, DAC_ALIGN_8B_R);
 8001e10:	2308      	movs	r3, #8
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2326      	movs	r3, #38	@ 0x26
 8001e16:	4a25      	ldr	r2, [pc, #148]	@ (8001eac <HandleAnomalyTask+0x2a0>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4825      	ldr	r0, [pc, #148]	@ (8001eb0 <HandleAnomalyTask+0x2a4>)
 8001e1c:	f001 fd2c 	bl	8003878 <HAL_DAC_Start_DMA>
 8001e20:	e6f8      	b.n	8001c14 <HandleAnomalyTask+0x8>
        } else{

        	sprintf(buf, "Nothing to worry about\n");
 8001e22:	4924      	ldr	r1, [pc, #144]	@ (8001eb4 <HandleAnomalyTask+0x2a8>)
 8001e24:	4824      	ldr	r0, [pc, #144]	@ (8001eb8 <HandleAnomalyTask+0x2ac>)
 8001e26:	f008 fe4f 	bl	800aac8 <siprintf>
        	HAL_UART_Transmit(&huart1, (unsigned char *) buf, 150, 100);
 8001e2a:	2364      	movs	r3, #100	@ 0x64
 8001e2c:	2296      	movs	r2, #150	@ 0x96
 8001e2e:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HandleAnomalyTask+0x2ac>)
 8001e30:	4822      	ldr	r0, [pc, #136]	@ (8001ebc <HandleAnomalyTask+0x2b0>)
 8001e32:	f005 fe89 	bl	8007b48 <HAL_UART_Transmit>
        	HAL_UART_Transmit(&huart1, (unsigned char *) "\33[2K\r", 8, 100);
 8001e36:	2364      	movs	r3, #100	@ 0x64
 8001e38:	2208      	movs	r2, #8
 8001e3a:	4921      	ldr	r1, [pc, #132]	@ (8001ec0 <HandleAnomalyTask+0x2b4>)
 8001e3c:	481f      	ldr	r0, [pc, #124]	@ (8001ebc <HandleAnomalyTask+0x2b0>)
 8001e3e:	f005 fe83 	bl	8007b48 <HAL_UART_Transmit>
    osDelay(500);
 8001e42:	e6e7      	b.n	8001c14 <HandleAnomalyTask+0x8>
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000010 	.word	0x20000010
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000018 	.word	0x20000018
 8001e54:	20000004 	.word	0x20000004
 8001e58:	20000844 	.word	0x20000844
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	200008e4 	.word	0x200008e4
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000894 	.word	0x20000894
 8001e6c:	2000001c 	.word	0x2000001c
 8001e70:	20000934 	.word	0x20000934
 8001e74:	20000020 	.word	0x20000020
 8001e78:	20000024 	.word	0x20000024
 8001e7c:	20000984 	.word	0x20000984
 8001e80:	20000028 	.word	0x20000028
 8001e84:	2000002c 	.word	0x2000002c
 8001e88:	200009d4 	.word	0x200009d4
 8001e8c:	0800e6d4 	.word	0x0800e6d4
 8001e90:	0800e6ec 	.word	0x0800e6ec
 8001e94:	0800e708 	.word	0x0800e708
 8001e98:	0800e71c 	.word	0x0800e71c
 8001e9c:	0800e738 	.word	0x0800e738
 8001ea0:	0800e748 	.word	0x0800e748
 8001ea4:	0800e758 	.word	0x0800e758
 8001ea8:	0800e768 	.word	0x0800e768
 8001eac:	200006f4 	.word	0x200006f4
 8001eb0:	2000053c 	.word	0x2000053c
 8001eb4:	0800e78c 	.word	0x0800e78c
 8001eb8:	200007a8 	.word	0x200007a8
 8001ebc:	20000650 	.word	0x20000650
 8001ec0:	0800e5c8 	.word	0x0800e5c8

08001ec4 <ProcessingDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProcessingDataTask */
void ProcessingDataTask(void const * argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProcessingDataTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001ecc:	2064      	movs	r0, #100	@ 0x64
 8001ece:	f006 fd52 	bl	8008976 <osDelay>
 8001ed2:	e7fb      	b.n	8001ecc <ProcessingDataTask+0x8>

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <Error_Handler+0x8>

08001ee0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	4a26      	ldr	r2, [pc, #152]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef4:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f12:	2304      	movs	r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481b      	ldr	r0, [pc, #108]	@ (8001f8c <I2Cx_MspInit+0xac>)
 8001f1e:	f002 fb3f 	bl	80045a0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4818      	ldr	r0, [pc, #96]	@ (8001f8c <I2Cx_MspInit+0xac>)
 8001f2a:	f002 fb39 	bl	80045a0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a15      	ldr	r2, [pc, #84]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f50:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f56:	4a0c      	ldr	r2, [pc, #48]	@ (8001f88 <I2Cx_MspInit+0xa8>)
 8001f58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f5c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	210f      	movs	r1, #15
 8001f62:	2021      	movs	r0, #33	@ 0x21
 8001f64:	f001 fc3c 	bl	80037e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f68:	2021      	movs	r0, #33	@ 0x21
 8001f6a:	f001 fc55 	bl	8003818 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	210f      	movs	r1, #15
 8001f72:	2022      	movs	r0, #34	@ 0x22
 8001f74:	f001 fc34 	bl	80037e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001f78:	2022      	movs	r0, #34	@ 0x22
 8001f7a:	f001 fc4d 	bl	8003818 <HAL_NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	48000400 	.word	0x48000400

08001f90 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <I2Cx_Init+0x54>)
 8001f9c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <I2Cx_Init+0x58>)
 8001fa2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff89 	bl	8001ee0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f002 fd82 	bl	8004ad8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f003 fb38 	bl	800564c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40005800 	.word	0x40005800
 8001fe8:	00702681 	.word	0x00702681

08001fec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af04      	add	r7, sp, #16
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	72fb      	strb	r3, [r7, #11]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	b299      	uxth	r1, r3
 800200e:	88f8      	ldrh	r0, [r7, #6]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f002 ff36 	bl	8004e94 <HAL_I2C_Mem_Read>
 8002028:	4603      	mov	r3, r0
 800202a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	4619      	mov	r1, r3
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f832 	bl	80020a0 <I2Cx_Error>
  }
  return status;
 800203c:	7dfb      	ldrb	r3, [r7, #23]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	@ 0x28
 800204a:	af04      	add	r7, sp, #16
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	4608      	mov	r0, r1
 8002050:	4611      	mov	r1, r2
 8002052:	461a      	mov	r2, r3
 8002054:	4603      	mov	r3, r0
 8002056:	72fb      	strb	r3, [r7, #11]
 8002058:	460b      	mov	r3, r1
 800205a:	813b      	strh	r3, [r7, #8]
 800205c:	4613      	mov	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	b299      	uxth	r1, r3
 8002068:	88f8      	ldrh	r0, [r7, #6]
 800206a:	893a      	ldrh	r2, [r7, #8]
 800206c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f002 fdf5 	bl	8004c6c <HAL_I2C_Mem_Write>
 8002082:	4603      	mov	r3, r0
 8002084:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	4619      	mov	r1, r3
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f805 	bl	80020a0 <I2Cx_Error>
  }
  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f002 fdae 	bl	8004c0e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff6c 	bl	8001f90 <I2Cx_Init>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <SENSOR_IO_Init+0x10>)
 80020c6:	f7ff ff63 	bl	8001f90 <I2Cx_Init>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000a24 	.word	0x20000a24

080020d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	460b      	mov	r3, r1
 80020e0:	71bb      	strb	r3, [r7, #6]
 80020e2:	4613      	mov	r3, r2
 80020e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	79f9      	ldrb	r1, [r7, #7]
 80020ec:	2301      	movs	r3, #1
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	1d7b      	adds	r3, r7, #5
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <SENSOR_IO_Write+0x30>)
 80020f8:	f7ff ffa5 	bl	8002046 <I2Cx_WriteMultiple>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000a24 	.word	0x20000a24

08002108 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	4603      	mov	r3, r0
 8002110:	460a      	mov	r2, r1
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	b29a      	uxth	r2, r3
 8002120:	79f9      	ldrb	r1, [r7, #7]
 8002122:	2301      	movs	r3, #1
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	f107 030f 	add.w	r3, r7, #15
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2301      	movs	r3, #1
 800212e:	4804      	ldr	r0, [pc, #16]	@ (8002140 <SENSOR_IO_Read+0x38>)
 8002130:	f7ff ff5c 	bl	8001fec <I2Cx_ReadMultiple>

  return read_value;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000a24 	.word	0x20000a24

08002144 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af02      	add	r7, sp, #8
 800214a:	603a      	str	r2, [r7, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	460b      	mov	r3, r1
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	4613      	mov	r3, r2
 8002158:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800215a:	79bb      	ldrb	r3, [r7, #6]
 800215c:	b29a      	uxth	r2, r3
 800215e:	79f9      	ldrb	r1, [r7, #7]
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	4804      	ldr	r0, [pc, #16]	@ (800217c <SENSOR_IO_ReadMultiple+0x38>)
 800216c:	f7ff ff3e 	bl	8001fec <I2Cx_ReadMultiple>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000a24 	.word	0x20000a24

08002180 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800218a:	2300      	movs	r3, #0
 800218c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <BSP_ACCELERO_Init+0x74>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4798      	blx	r3
 8002194:	4603      	mov	r3, r0
 8002196:	2b6a      	cmp	r3, #106	@ 0x6a
 8002198:	d002      	beq.n	80021a0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e024      	b.n	80021ea <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <BSP_ACCELERO_Init+0x78>)
 80021a2:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <BSP_ACCELERO_Init+0x74>)
 80021a4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80021a6:	2330      	movs	r3, #48	@ 0x30
 80021a8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80021ae:	2300      	movs	r3, #0
 80021b0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80021b2:	2340      	movs	r3, #64	@ 0x40
 80021b4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80021be:	797a      	ldrb	r2, [r7, #5]
 80021c0:	7abb      	ldrb	r3, [r7, #10]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80021c8:	7a3b      	ldrb	r3, [r7, #8]
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <BSP_ACCELERO_Init+0x78>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	89ba      	ldrh	r2, [r7, #12]
 80021e6:	4610      	mov	r0, r2
 80021e8:	4798      	blx	r3
  }  

  return ret;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000090 	.word	0x20000090
 80021f8:	20000a78 	.word	0x20000a78

080021fc <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002206:	2300      	movs	r3, #0
 8002208:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <BSP_GYRO_Init+0x7c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2b6a      	cmp	r3, #106	@ 0x6a
 8002214:	d002      	beq.n	800221c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e028      	b.n	800226e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <BSP_GYRO_Init+0x80>)
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <BSP_GYRO_Init+0x7c>)
 8002220:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002226:	2330      	movs	r3, #48	@ 0x30
 8002228:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002232:	2340      	movs	r3, #64	@ 0x40
 8002234:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800223a:	230c      	movs	r3, #12
 800223c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800223e:	7aba      	ldrb	r2, [r7, #10]
 8002240:	797b      	ldrb	r3, [r7, #5]
 8002242:	4313      	orrs	r3, r2
 8002244:	b2db      	uxtb	r3, r3
 8002246:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002248:	7a3b      	ldrb	r3, [r7, #8]
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	b2db      	uxtb	r3, r3
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <BSP_GYRO_Init+0x80>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	89ba      	ldrh	r2, [r7, #12]
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
    
    ret = GYRO_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200000c4 	.word	0x200000c4
 800227c:	20000a7c 	.word	0x20000a7c

08002280 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <BSP_GYRO_GetXYZ+0x2c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <BSP_GYRO_GetXYZ+0x2c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <BSP_GYRO_GetXYZ+0x2c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000a7c 	.word	0x20000a7c

080022b0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80022b6:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <BSP_HSENSOR_Init+0x38>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	20be      	movs	r0, #190	@ 0xbe
 80022bc:	4798      	blx	r3
 80022be:	4603      	mov	r3, r0
 80022c0:	2bbc      	cmp	r3, #188	@ 0xbc
 80022c2:	d002      	beq.n	80022ca <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	e009      	b.n	80022de <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80022ca:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <BSP_HSENSOR_Init+0x3c>)
 80022cc:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <BSP_HSENSOR_Init+0x38>)
 80022ce:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <BSP_HSENSOR_Init+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	20be      	movs	r0, #190	@ 0xbe
 80022d8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000034 	.word	0x20000034
 80022ec:	20000a80 	.word	0x20000a80

080022f0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <BSP_HSENSOR_ReadHumidity+0x18>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	20be      	movs	r0, #190	@ 0xbe
 80022fc:	4798      	blx	r3
 80022fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000a80 	.word	0x20000a80

0800230c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <BSP_MAGNETO_Init+0x50>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4798      	blx	r3
 800231c:	4603      	mov	r3, r0
 800231e:	2b3d      	cmp	r3, #61	@ 0x3d
 8002320:	d002      	beq.n	8002328 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	e013      	b.n	8002350 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <BSP_MAGNETO_Init+0x54>)
 800232a:	4a0c      	ldr	r2, [pc, #48]	@ (800235c <BSP_MAGNETO_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800232e:	2358      	movs	r3, #88	@ 0x58
 8002330:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002332:	2300      	movs	r3, #0
 8002334:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002336:	2300      	movs	r3, #0
 8002338:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800233a:	2308      	movs	r3, #8
 800233c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800233e:	2340      	movs	r3, #64	@ 0x40
 8002340:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <BSP_MAGNETO_Init+0x54>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	463a      	mov	r2, r7
 800234a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800234e:	4798      	blx	r3
  } 

  return ret;  
 8002350:	79fb      	ldrb	r3, [r7, #7]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000050 	.word	0x20000050
 8002360:	20000a84 	.word	0x20000a84

08002364 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <BSP_PSENSOR_Init+0x38>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	20ba      	movs	r0, #186	@ 0xba
 8002370:	4798      	blx	r3
 8002372:	4603      	mov	r3, r0
 8002374:	2bb1      	cmp	r3, #177	@ 0xb1
 8002376:	d002      	beq.n	800237e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	e009      	b.n	8002392 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <BSP_PSENSOR_Init+0x3c>)
 8002380:	4a06      	ldr	r2, [pc, #24]	@ (800239c <BSP_PSENSOR_Init+0x38>)
 8002382:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <BSP_PSENSOR_Init+0x3c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	20ba      	movs	r0, #186	@ 0xba
 800238c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000084 	.word	0x20000084
 80023a0:	20000a88 	.word	0x20000a88

080023a4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <BSP_PSENSOR_ReadPressure+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	20ba      	movs	r0, #186	@ 0xba
 80023b0:	4798      	blx	r3
 80023b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000a88 	.word	0x20000a88

080023c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <BSP_TSENSOR_Init+0x30>)
 80023cc:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <BSP_TSENSOR_Init+0x34>)
 80023ce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023d0:	f7ff fe76 	bl	80020c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <BSP_TSENSOR_Init+0x30>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	20be      	movs	r0, #190	@ 0xbe
 80023de:	4798      	blx	r3

  ret = TSENSOR_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000a8c 	.word	0x20000a8c
 80023f4:	20000040 	.word	0x20000040

080023f8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <BSP_TSENSOR_ReadTemp+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	20be      	movs	r0, #190	@ 0xbe
 8002404:	4798      	blx	r3
 8002406:	eef0 7a40 	vmov.f32	s15, s0
}
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000a8c 	.word	0x20000a8c

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_MspInit+0x4c>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	4a10      	ldr	r2, [pc, #64]	@ (8002460 <HAL_MspInit+0x4c>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6613      	str	r3, [r2, #96]	@ 0x60
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <HAL_MspInit+0x4c>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_MspInit+0x4c>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_MspInit+0x4c>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	210f      	movs	r1, #15
 800244e:	f06f 0001 	mvn.w	r0, #1
 8002452:	f001 f9c5 	bl	80037e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <HAL_DAC_MspInit+0xdc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d157      	bne.n	8002536 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002486:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	4a2e      	ldr	r2, [pc, #184]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 800248c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002490:	6593      	str	r3, [r2, #88]	@ 0x58
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a28      	ldr	r2, [pc, #160]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <HAL_DAC_MspInit+0xe0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b6:	2310      	movs	r3, #16
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ba:	2303      	movs	r3, #3
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024cc:	f002 f868 	bl	80045a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024d2:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <HAL_DAC_MspInit+0xe8>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024d8:	2206      	movs	r2, #6
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024de:	2210      	movs	r2, #16
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ee:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 80024f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80024fe:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800250a:	480f      	ldr	r0, [pc, #60]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 800250c:	f001 fd28 	bl	8003f60 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002516:	f7ff fcdd 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <HAL_DAC_MspInit+0xe4>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2105      	movs	r1, #5
 800252a:	2036      	movs	r0, #54	@ 0x36
 800252c:	f001 f958 	bl	80037e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002530:	2036      	movs	r0, #54	@ 0x36
 8002532:	f001 f971 	bl	8003818 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	@ 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40007400 	.word	0x40007400
 8002544:	40021000 	.word	0x40021000
 8002548:	20000550 	.word	0x20000550
 800254c:	40020008 	.word	0x40020008

08002550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0ae      	sub	sp, #184	@ 0xb8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	2294      	movs	r2, #148	@ 0x94
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f009 fa81 	bl	800ba78 <memset>
  if(hi2c->Instance==I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_I2C_MspInit+0xb0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d13b      	bne.n	80025f8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002584:	2300      	movs	r3, #0
 8002586:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f004 f8c3 	bl	8006718 <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002598:	f7ff fc9c 	bl	8001ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a8:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025bc:	2312      	movs	r3, #18
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025ce:	2304      	movs	r3, #4
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025d8:	4619      	mov	r1, r3
 80025da:	480b      	ldr	r0, [pc, #44]	@ (8002608 <HAL_I2C_MspInit+0xb8>)
 80025dc:	f001 ffe0 	bl	80045a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	4a07      	ldr	r2, [pc, #28]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 80025e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_I2C_MspInit+0xb4>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025f8:	bf00      	nop
 80025fa:	37b8      	adds	r7, #184	@ 0xb8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40005800 	.word	0x40005800
 8002604:	40021000 	.word	0x40021000
 8002608:	48000400 	.word	0x48000400

0800260c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_I2C_MspDeInit+0x3c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10f      	bne.n	800263e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_I2C_MspDeInit+0x40>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_I2C_MspDeInit+0x40>)
 8002624:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800262a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800262e:	4808      	ldr	r0, [pc, #32]	@ (8002650 <HAL_I2C_MspDeInit+0x44>)
 8002630:	f002 f948 	bl	80048c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002634:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002638:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_I2C_MspDeInit+0x44>)
 800263a:	f002 f943 	bl	80048c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40005800 	.word	0x40005800
 800264c:	40021000 	.word	0x40021000
 8002650:	48000400 	.word	0x48000400

08002654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d113      	bne.n	800268e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <HAL_TIM_Base_MspInit+0x44>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4a0b      	ldr	r2, [pc, #44]	@ (8002698 <HAL_TIM_Base_MspInit+0x44>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_TIM_Base_MspInit+0x44>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2105      	movs	r1, #5
 8002682:	201c      	movs	r0, #28
 8002684:	f001 f8ac 	bl	80037e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002688:	201c      	movs	r0, #28
 800268a:	f001 f8c5 	bl	8003818 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ae      	sub	sp, #184	@ 0xb8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	2294      	movs	r2, #148	@ 0x94
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 f9db 	bl	800ba78 <memset>
  if(huart->Instance==USART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	@ (800274c <HAL_UART_MspInit+0xb0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d13a      	bne.n	8002742 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 f81d 	bl	8006718 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e4:	f7ff fbf6 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_UART_MspInit+0xb4>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002718:	23c0      	movs	r3, #192	@ 0xc0
 800271a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002730:	2307      	movs	r3, #7
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800273a:	4619      	mov	r1, r3
 800273c:	4805      	ldr	r0, [pc, #20]	@ (8002754 <HAL_UART_MspInit+0xb8>)
 800273e:	f001 ff2f 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002742:	bf00      	nop
 8002744:	37b8      	adds	r7, #184	@ 0xb8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40013800 	.word	0x40013800
 8002750:	40021000 	.word	0x40021000
 8002754:	48000400 	.word	0x48000400

08002758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	@ 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002766:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_InitTick+0xe0>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <HAL_InitTick+0xe0>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_InitTick+0xe0>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f003 fed3 	bl	8006534 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d103      	bne.n	80027a0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002798:	f003 fea0 	bl	80064dc <HAL_RCC_GetPCLK1Freq>
 800279c:	6378      	str	r0, [r7, #52]	@ 0x34
 800279e:	e004      	b.n	80027aa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027a0:	f003 fe9c 	bl	80064dc <HAL_RCC_GetPCLK1Freq>
 80027a4:	4603      	mov	r3, r0
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <HAL_InitTick+0xe4>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0c9b      	lsrs	r3, r3, #18
 80027b4:	3b01      	subs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027b8:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_InitTick+0xe8>)
 80027ba:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <HAL_InitTick+0xec>)
 80027bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_InitTick+0xe8>)
 80027c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_InitTick+0xe8>)
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002840 <HAL_InitTick+0xe8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_InitTick+0xe8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_InitTick+0xe8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80027de:	4818      	ldr	r0, [pc, #96]	@ (8002840 <HAL_InitTick+0xe8>)
 80027e0:	f004 fcb2 	bl	8007148 <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80027ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11b      	bne.n	800282a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80027f2:	4813      	ldr	r0, [pc, #76]	@ (8002840 <HAL_InitTick+0xe8>)
 80027f4:	f004 fd00 	bl	80071f8 <HAL_TIM_Base_Start_IT>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80027fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002806:	2036      	movs	r0, #54	@ 0x36
 8002808:	f001 f806 	bl	8003818 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	d808      	bhi.n	8002824 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002812:	2200      	movs	r2, #0
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	2036      	movs	r0, #54	@ 0x36
 8002818:	f000 ffe2 	bl	80037e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800281c:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <HAL_InitTick+0xf0>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e002      	b.n	800282a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800282a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800282e:	4618      	mov	r0, r3
 8002830:	3738      	adds	r7, #56	@ 0x38
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	431bde83 	.word	0x431bde83
 8002840:	20000a90 	.word	0x20000a90
 8002844:	40001000 	.word	0x40001000
 8002848:	200000f8 	.word	0x200000f8

0800284c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <NMI_Handler+0x4>

08002854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <HardFault_Handler+0x4>

0800285c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <MemManage_Handler+0x4>

08002864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <UsageFault_Handler+0x4>

08002874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002888:	4802      	ldr	r0, [pc, #8]	@ (8002894 <DMA1_Channel1_IRQHandler+0x10>)
 800288a:	f001 fce8 	bl	800425e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000550 	.word	0x20000550

08002898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <TIM2_IRQHandler+0x10>)
 800289e:	f004 fd1b 	bl	80072d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000604 	.word	0x20000604

080028ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
 80028b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028b4:	f002 f8f8 	bl	8004aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (htim6.Instance != NULL)
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <TIM6_DAC_IRQHandler+0x24>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <TIM6_DAC_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim6);
 80028c8:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <TIM6_DAC_IRQHandler+0x24>)
 80028ca:	f004 fd05 	bl	80072d8 <HAL_TIM_IRQHandler>
  }
  if (hdac1.Instance != NULL)
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <TIM6_DAC_IRQHandler+0x28>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <TIM6_DAC_IRQHandler+0x20>
  {
    HAL_DAC_IRQHandler(&hdac1);
 80028d6:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <TIM6_DAC_IRQHandler+0x28>)
 80028d8:	f001 f8df 	bl	8003a9a <HAL_DAC_IRQHandler>
  }
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000a90 	.word	0x20000a90
 80028e4:	2000053c 	.word	0x2000053c

080028e8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_dac1_ch1);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <DMAMUX1_OVR_IRQHandler+0x10>)
 80028ee:	f001 fe05 	bl	80044fc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000550 	.word	0x20000550

080028fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_kill>:

int _kill(int pid, int sig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002916:	f009 f8bb 	bl	800ba90 <__errno>
 800291a:	4603      	mov	r3, r0
 800291c:	2216      	movs	r2, #22
 800291e:	601a      	str	r2, [r3, #0]
  return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_exit>:

void _exit (int status)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ffe7 	bl	800290c <_kill>
  while (1) {}    /* Make sure we hang here */
 800293e:	bf00      	nop
 8002940:	e7fd      	b.n	800293e <_exit+0x12>

08002942 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e00a      	b.n	800296a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002954:	f3af 8000 	nop.w
 8002958:	4601      	mov	r1, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	60ba      	str	r2, [r7, #8]
 8002960:	b2ca      	uxtb	r2, r1
 8002962:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	dbf0      	blt.n	8002954 <_read+0x12>
  }

  return len;
 8002972:	687b      	ldr	r3, [r7, #4]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e009      	b.n	80029a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	60ba      	str	r2, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dbf1      	blt.n	800298e <_write+0x12>
  }
  return len;
 80029aa:	687b      	ldr	r3, [r7, #4]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_close>:

int _close(int file)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029dc:	605a      	str	r2, [r3, #4]
  return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_isatty>:

int _isatty(int file)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <_sbrk+0x5c>)
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <_sbrk+0x60>)
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <_sbrk+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <_sbrk+0x64>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <_sbrk+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d207      	bcs.n	8002a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a4c:	f009 f820 	bl	800ba90 <__errno>
 8002a50:	4603      	mov	r3, r0
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a5a:	e009      	b.n	8002a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <_sbrk+0x64>)
 8002a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200a0000 	.word	0x200a0000
 8002a7c:	00000400 	.word	0x00000400
 8002a80:	20000adc 	.word	0x20000adc
 8002a84:	20002110 	.word	0x20002110

08002a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <SystemInit+0x20>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <SystemInit+0x20>)
 8002a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ab0:	f7ff ffea 	bl	8002a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab4:	480c      	ldr	r0, [pc, #48]	@ (8002ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ab6:	490d      	ldr	r1, [pc, #52]	@ (8002aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8002af0 <LoopForever+0xe>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002abc:	e002      	b.n	8002ac4 <LoopCopyDataInit>

08002abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac2:	3304      	adds	r3, #4

08002ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac8:	d3f9      	bcc.n	8002abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002acc:	4c0a      	ldr	r4, [pc, #40]	@ (8002af8 <LoopForever+0x16>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad0:	e001      	b.n	8002ad6 <LoopFillZerobss>

08002ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad4:	3204      	adds	r2, #4

08002ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad8:	d3fb      	bcc.n	8002ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ada:	f008 ffdf 	bl	800ba9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ade:	f7fe fd13 	bl	8001508 <main>

08002ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ae2:	e7fe      	b.n	8002ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ae4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002af0:	0800f45c 	.word	0x0800f45c
  ldr r2, =_sbss
 8002af4:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002af8:	2000210c 	.word	0x2000210c

08002afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC1_IRQHandler>

08002afe <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fafa 	bl	8002108 <SENSOR_IO_Read>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	2120      	movs	r1, #32
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fac3 	bl	80020d4 <SENSOR_IO_Write>
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002b64:	f7ff faac 	bl	80020c0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	210f      	movs	r1, #15
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff faca 	bl	8002108 <SENSOR_IO_Read>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	b2d8      	uxtb	r0, r3
 8002b92:	f107 020c 	add.w	r2, r7, #12
 8002b96:	2302      	movs	r3, #2
 8002b98:	21b0      	movs	r1, #176	@ 0xb0
 8002b9a:	f7ff fad3 	bl	8002144 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002b9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002ba6:	7b7b      	ldrb	r3, [r7, #13]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	f107 020c 	add.w	r2, r7, #12
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	21b6      	movs	r1, #182	@ 0xb6
 8002bba:	f7ff fac3 	bl	8002144 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bbe:	7b7b      	ldrb	r3, [r7, #13]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	7b3b      	ldrb	r3, [r7, #12]
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	21ba      	movs	r1, #186	@ 0xba
 8002bd8:	f7ff fab4 	bl	8002144 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bdc:	7b7b      	ldrb	r3, [r7, #13]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	7b3b      	ldrb	r3, [r7, #12]
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	b2d8      	uxtb	r0, r3
 8002bee:	f107 020c 	add.w	r2, r7, #12
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	21a8      	movs	r1, #168	@ 0xa8
 8002bf6:	f7ff faa5 	bl	8002144 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bfa:	7b7b      	ldrb	r3, [r7, #13]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	7b3b      	ldrb	r3, [r7, #12]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002c08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c1a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002c1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c30:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c56:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c66:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c6e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002cb4 <HTS221_H_ReadHumidity+0x130>
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	dd01      	ble.n	8002c80 <HTS221_H_ReadHumidity+0xfc>
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HTS221_H_ReadHumidity+0x134>)
 8002c7e:	e00a      	b.n	8002c96 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d502      	bpl.n	8002c94 <HTS221_H_ReadHumidity+0x110>
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e000      	b.n	8002c96 <HTS221_H_ReadHumidity+0x112>
 8002c94:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002c96:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c9c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ca0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ca4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	447a0000 	.word	0x447a0000
 8002cb8:	447a0000 	.word	0x447a0000

08002cbc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2120      	movs	r1, #32
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fa1a 	bl	8002108 <SENSOR_IO_Read>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	2120      	movs	r1, #32
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f9e3 	bl	80020d4 <SENSOR_IO_Write>
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	f107 0208 	add.w	r2, r7, #8
 8002d28:	2302      	movs	r3, #2
 8002d2a:	21b2      	movs	r1, #178	@ 0xb2
 8002d2c:	f7ff fa0a 	bl	8002144 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2135      	movs	r1, #53	@ 0x35
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f9e6 	bl	8002108 <SENSOR_IO_Read>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	7a3b      	ldrb	r3, [r7, #8]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	019b      	lsls	r3, r3, #6
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	7a7b      	ldrb	r3, [r7, #9]
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	4313      	orrs	r3, r2
 8002d66:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002d68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d6c:	10db      	asrs	r3, r3, #3
 8002d6e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002d70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d74:	10db      	asrs	r3, r3, #3
 8002d76:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	b2d8      	uxtb	r0, r3
 8002d7c:	f107 0208 	add.w	r2, r7, #8
 8002d80:	2304      	movs	r3, #4
 8002d82:	21bc      	movs	r1, #188	@ 0xbc
 8002d84:	f7ff f9de 	bl	8002144 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	7a3b      	ldrb	r3, [r7, #8]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	7abb      	ldrb	r3, [r7, #10]
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	b2d8      	uxtb	r0, r3
 8002da8:	f107 0208 	add.w	r2, r7, #8
 8002dac:	2302      	movs	r3, #2
 8002dae:	21aa      	movs	r1, #170	@ 0xaa
 8002db0:	f7ff f9c8 	bl	8002144 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002db4:	7a7b      	ldrb	r3, [r7, #9]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b21a      	sxth	r2, r3
 8002dba:	7a3b      	ldrb	r3, [r7, #8]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002dc2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dd8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002dea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002dee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	ee07 3a90 	vmov	s15, r3
}
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002e30:	783b      	ldrb	r3, [r7, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	2120      	movs	r1, #32
 8002e36:	203c      	movs	r0, #60	@ 0x3c
 8002e38:	f7ff f94c 	bl	80020d4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2121      	movs	r1, #33	@ 0x21
 8002e42:	203c      	movs	r0, #60	@ 0x3c
 8002e44:	f7ff f946 	bl	80020d4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002e48:	78bb      	ldrb	r3, [r7, #2]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2122      	movs	r1, #34	@ 0x22
 8002e4e:	203c      	movs	r0, #60	@ 0x3c
 8002e50:	f7ff f940 	bl	80020d4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	461a      	mov	r2, r3
 8002e58:	2123      	movs	r1, #35	@ 0x23
 8002e5a:	203c      	movs	r0, #60	@ 0x3c
 8002e5c:	f7ff f93a 	bl	80020d4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002e60:	793b      	ldrb	r3, [r7, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	2124      	movs	r1, #36	@ 0x24
 8002e66:	203c      	movs	r0, #60	@ 0x3c
 8002e68:	f7ff f934 	bl	80020d4 <SENSOR_IO_Write>
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002e7e:	2122      	movs	r1, #34	@ 0x22
 8002e80:	203c      	movs	r0, #60	@ 0x3c
 8002e82:	f7ff f941 	bl	8002108 <SENSOR_IO_Read>
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f023 0303 	bic.w	r3, r3, #3
 8002e90:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f043 0303 	orr.w	r3, r3, #3
 8002e98:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2122      	movs	r1, #34	@ 0x22
 8002ea0:	203c      	movs	r0, #60	@ 0x3c
 8002ea2:	f7ff f917 	bl	80020d4 <SENSOR_IO_Write>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002eb2:	f7ff f905 	bl	80020c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	203c      	movs	r0, #60	@ 0x3c
 8002eba:	f7ff f925 	bl	8002108 <SENSOR_IO_Read>
 8002ebe:	4603      	mov	r3, r0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002ed2:	2122      	movs	r1, #34	@ 0x22
 8002ed4:	203c      	movs	r0, #60	@ 0x3c
 8002ed6:	f7ff f917 	bl	8002108 <SENSOR_IO_Read>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	f023 0320 	bic.w	r3, r3, #32
 8002ee4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	f043 0320 	orr.w	r3, r3, #32
 8002ef2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2122      	movs	r1, #34	@ 0x22
 8002efa:	203c      	movs	r0, #60	@ 0x3c
 8002efc:	f7ff f8ea 	bl	80020d4 <SENSOR_IO_Write>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002f1e:	2121      	movs	r1, #33	@ 0x21
 8002f20:	203c      	movs	r0, #60	@ 0x3c
 8002f22:	f7ff f8f1 	bl	8002108 <SENSOR_IO_Read>
 8002f26:	4603      	mov	r3, r0
 8002f28:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002f2a:	f107 0208 	add.w	r2, r7, #8
 8002f2e:	2306      	movs	r3, #6
 8002f30:	21a8      	movs	r1, #168	@ 0xa8
 8002f32:	203c      	movs	r0, #60	@ 0x3c
 8002f34:	f7ff f906 	bl	8002144 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e01a      	b.n	8002f74 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3301      	adds	r3, #1
 8002f44:	3320      	adds	r3, #32
 8002f46:	443b      	add	r3, r7
 8002f48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	7ffa      	ldrb	r2, [r7, #31]
 8002f52:	0052      	lsls	r2, r2, #1
 8002f54:	3220      	adds	r2, #32
 8002f56:	443a      	add	r2, r7
 8002f58:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	b212      	sxth	r2, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	3320      	adds	r3, #32
 8002f68:	443b      	add	r3, r7
 8002f6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	3301      	adds	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d9e1      	bls.n	8002f3e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002f80:	2b60      	cmp	r3, #96	@ 0x60
 8002f82:	d013      	beq.n	8002fac <LIS3MDL_MagReadXYZ+0xa4>
 8002f84:	2b60      	cmp	r3, #96	@ 0x60
 8002f86:	dc14      	bgt.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
 8002f88:	2b40      	cmp	r3, #64	@ 0x40
 8002f8a:	d00c      	beq.n	8002fa6 <LIS3MDL_MagReadXYZ+0x9e>
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	dc10      	bgt.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <LIS3MDL_MagReadXYZ+0x92>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d003      	beq.n	8002fa0 <LIS3MDL_MagReadXYZ+0x98>
 8002f98:	e00b      	b.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002f9a:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <LIS3MDL_MagReadXYZ+0xf8>)
 8002f9c:	61bb      	str	r3, [r7, #24]
    break;
 8002f9e:	e008      	b.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <LIS3MDL_MagReadXYZ+0xfc>)
 8002fa2:	61bb      	str	r3, [r7, #24]
    break;
 8002fa4:	e005      	b.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <LIS3MDL_MagReadXYZ+0x100>)
 8002fa8:	61bb      	str	r3, [r7, #24]
    break;
 8002faa:	e002      	b.n	8002fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002fac:	4b17      	ldr	r3, [pc, #92]	@ (800300c <LIS3MDL_MagReadXYZ+0x104>)
 8002fae:	61bb      	str	r3, [r7, #24]
    break;    
 8002fb0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e01a      	b.n	8002fee <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	443b      	add	r3, r7
 8002fc0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe0:	ee17 2a90 	vmov	r2, s15
 8002fe4:	b212      	sxth	r2, r2
 8002fe6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	3301      	adds	r3, #1
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d9e1      	bls.n	8002fb8 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	3e0f5c29 	.word	0x3e0f5c29
 8003004:	3e947ae1 	.word	0x3e947ae1
 8003008:	3edc28f6 	.word	0x3edc28f6
 800300c:	3f147ae1 	.word	0x3f147ae1

08003010 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f879 	bl	8003114 <LPS22HB_Init>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003038:	f7ff f842 	bl	80020c0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	210f      	movs	r1, #15
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f860 	bl	8002108 <SENSOR_IO_Read>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	74fb      	strb	r3, [r7, #19]
 800306a:	e013      	b.n	8003094 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	3328      	adds	r3, #40	@ 0x28
 8003074:	b2db      	uxtb	r3, r3
 8003076:	7cfc      	ldrb	r4, [r7, #19]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7ff f844 	bl	8002108 <SENSOR_IO_Read>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	f104 0318 	add.w	r3, r4, #24
 8003088:	443b      	add	r3, r7
 800308a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	3301      	adds	r3, #1
 8003092:	74fb      	strb	r3, [r7, #19]
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d9e8      	bls.n	800306c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	74fb      	strb	r3, [r7, #19]
 800309e:	e00f      	b.n	80030c0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	3318      	adds	r3, #24
 80030a4:	443b      	add	r3, r7
 80030a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030aa:	461a      	mov	r2, r3
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	3301      	adds	r3, #1
 80030be:	74fb      	strb	r3, [r7, #19]
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d9ec      	bls.n	80030a0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2264      	movs	r2, #100	@ 0x64
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da01      	bge.n	80030ec <LPS22HB_P_ReadPressure+0x94>
 80030e8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030ec:	131b      	asrs	r3, r3, #12
 80030ee:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003110 <LPS22HB_P_ReadPressure+0xb8>
 80030fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003102:	eef0 7a66 	vmov.f32	s15, s13
}
 8003106:	eeb0 0a67 	vmov.f32	s0, s15
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	42c80000 	.word	0x42c80000

08003114 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	211a      	movs	r1, #26
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ffef 	bl	8002108 <SENSOR_IO_Read>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	211a      	movs	r1, #26
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe ffc4 	bl	80020d4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2110      	movs	r1, #16
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe ffd8 	bl	8002108 <SENSOR_IO_Read>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003162:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800316a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	f023 0302 	bic.w	r3, r3, #2
 8003172:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	2110      	movs	r1, #16
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe ffa5 	bl	80020d4 <SENSOR_IO_Write>
}  
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031a0:	2110      	movs	r1, #16
 80031a2:	20d4      	movs	r0, #212	@ 0xd4
 80031a4:	f7fe ffb0 	bl	8002108 <SENSOR_IO_Read>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80031b8:	7bba      	ldrb	r2, [r7, #14]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	4313      	orrs	r3, r2
 80031be:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80031c0:	7bbb      	ldrb	r3, [r7, #14]
 80031c2:	461a      	mov	r2, r3
 80031c4:	2110      	movs	r1, #16
 80031c6:	20d4      	movs	r0, #212	@ 0xd4
 80031c8:	f7fe ff84 	bl	80020d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80031cc:	2112      	movs	r1, #18
 80031ce:	20d4      	movs	r0, #212	@ 0xd4
 80031d0:	f7fe ff9a 	bl	8002108 <SENSOR_IO_Read>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29b      	uxth	r3, r3
 80031de:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80031e0:	7bbb      	ldrb	r3, [r7, #14]
 80031e2:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80031e6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80031e8:	7bba      	ldrb	r2, [r7, #14]
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	461a      	mov	r2, r3
 80031f4:	2112      	movs	r1, #18
 80031f6:	20d4      	movs	r0, #212	@ 0xd4
 80031f8:	f7fe ff6c 	bl	80020d4 <SENSOR_IO_Write>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800320e:	2110      	movs	r1, #16
 8003210:	20d4      	movs	r0, #212	@ 0xd4
 8003212:	f7fe ff79 	bl	8002108 <SENSOR_IO_Read>
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	461a      	mov	r2, r3
 8003226:	2110      	movs	r1, #16
 8003228:	20d4      	movs	r0, #212	@ 0xd4
 800322a:	f7fe ff53 	bl	80020d4 <SENSOR_IO_Write>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800323a:	f7fe ff41 	bl	80020c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800323e:	210f      	movs	r1, #15
 8003240:	20d4      	movs	r0, #212	@ 0xd4
 8003242:	f7fe ff61 	bl	8002108 <SENSOR_IO_Read>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}

0800324c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800325a:	2115      	movs	r1, #21
 800325c:	20d4      	movs	r0, #212	@ 0xd4
 800325e:	f7fe ff53 	bl	8002108 <SENSOR_IO_Read>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	461a      	mov	r2, r3
 8003280:	2115      	movs	r1, #21
 8003282:	20d4      	movs	r0, #212	@ 0xd4
 8003284:	f7fe ff26 	bl	80020d4 <SENSOR_IO_Write>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80032a6:	2110      	movs	r1, #16
 80032a8:	20d4      	movs	r0, #212	@ 0xd4
 80032aa:	f7fe ff2d 	bl	8002108 <SENSOR_IO_Read>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	2306      	movs	r3, #6
 80032b8:	2128      	movs	r1, #40	@ 0x28
 80032ba:	20d4      	movs	r0, #212	@ 0xd4
 80032bc:	f7fe ff42 	bl	8002144 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e01a      	b.n	80032fc <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	3301      	adds	r3, #1
 80032cc:	3320      	adds	r3, #32
 80032ce:	443b      	add	r3, r7
 80032d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	7ffa      	ldrb	r2, [r7, #31]
 80032da:	0052      	lsls	r2, r2, #1
 80032dc:	3220      	adds	r2, #32
 80032de:	443a      	add	r2, r7
 80032e0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80032e4:	4413      	add	r3, r2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	7ffb      	ldrb	r3, [r7, #31]
 80032ea:	b212      	sxth	r2, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	3320      	adds	r3, #32
 80032f0:	443b      	add	r3, r7
 80032f2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	3301      	adds	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d9e1      	bls.n	80032c6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d829      	bhi.n	8003360 <LSM6DSL_AccReadXYZ+0xd0>
 800330c:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <LSM6DSL_AccReadXYZ+0x84>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003349 	.word	0x08003349
 8003318:	08003361 	.word	0x08003361
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	0800335b 	.word	0x0800335b
 8003328:	08003361 	.word	0x08003361
 800332c:	08003361 	.word	0x08003361
 8003330:	08003361 	.word	0x08003361
 8003334:	0800334f 	.word	0x0800334f
 8003338:	08003361 	.word	0x08003361
 800333c:	08003361 	.word	0x08003361
 8003340:	08003361 	.word	0x08003361
 8003344:	08003355 	.word	0x08003355
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003348:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <LSM6DSL_AccReadXYZ+0x11c>)
 800334a:	61bb      	str	r3, [r7, #24]
    break;
 800334c:	e008      	b.n	8003360 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <LSM6DSL_AccReadXYZ+0x120>)
 8003350:	61bb      	str	r3, [r7, #24]
    break;
 8003352:	e005      	b.n	8003360 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003354:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <LSM6DSL_AccReadXYZ+0x124>)
 8003356:	61bb      	str	r3, [r7, #24]
    break;
 8003358:	e002      	b.n	8003360 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800335a:	4b17      	ldr	r3, [pc, #92]	@ (80033b8 <LSM6DSL_AccReadXYZ+0x128>)
 800335c:	61bb      	str	r3, [r7, #24]
    break;    
 800335e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e01a      	b.n	800339c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	3320      	adds	r3, #32
 800336c:	443b      	add	r3, r7
 800336e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337a:	edd7 7a06 	vldr	s15, [r7, #24]
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338e:	ee17 2a90 	vmov	r2, s15
 8003392:	b212      	sxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003396:	7ffb      	ldrb	r3, [r7, #31]
 8003398:	3301      	adds	r3, #1
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	7ffb      	ldrb	r3, [r7, #31]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d9e1      	bls.n	8003366 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	3d79db23 	.word	0x3d79db23
 80033b0:	3df9db23 	.word	0x3df9db23
 80033b4:	3e79db23 	.word	0x3e79db23
 80033b8:	3ef9db23 	.word	0x3ef9db23

080033bc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80033ca:	2111      	movs	r1, #17
 80033cc:	20d4      	movs	r0, #212	@ 0xd4
 80033ce:	f7fe fe9b 	bl	8002108 <SENSOR_IO_Read>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80033da:	7bbb      	ldrb	r3, [r7, #14]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80033e2:	7bba      	ldrb	r2, [r7, #14]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	461a      	mov	r2, r3
 80033ee:	2111      	movs	r1, #17
 80033f0:	20d4      	movs	r0, #212	@ 0xd4
 80033f2:	f7fe fe6f 	bl	80020d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80033f6:	2112      	movs	r1, #18
 80033f8:	20d4      	movs	r0, #212	@ 0xd4
 80033fa:	f7fe fe85 	bl	8002108 <SENSOR_IO_Read>
 80033fe:	4603      	mov	r3, r0
 8003400:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	b29b      	uxth	r3, r3
 8003408:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800340a:	7bbb      	ldrb	r3, [r7, #14]
 800340c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003410:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003412:	7bba      	ldrb	r2, [r7, #14]
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	4313      	orrs	r3, r2
 8003418:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	461a      	mov	r2, r3
 800341e:	2112      	movs	r1, #18
 8003420:	20d4      	movs	r0, #212	@ 0xd4
 8003422:	f7fe fe57 	bl	80020d4 <SENSOR_IO_Write>
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003434:	2300      	movs	r3, #0
 8003436:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003438:	2111      	movs	r1, #17
 800343a:	20d4      	movs	r0, #212	@ 0xd4
 800343c:	f7fe fe64 	bl	8002108 <SENSOR_IO_Read>
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	461a      	mov	r2, r3
 8003450:	2111      	movs	r1, #17
 8003452:	20d4      	movs	r0, #212	@ 0xd4
 8003454:	f7fe fe3e 	bl	80020d4 <SENSOR_IO_Write>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003464:	f7fe fe2c 	bl	80020c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003468:	210f      	movs	r1, #15
 800346a:	20d4      	movs	r0, #212	@ 0xd4
 800346c:	f7fe fe4c 	bl	8002108 <SENSOR_IO_Read>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	bd80      	pop	{r7, pc}

08003476 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003484:	2116      	movs	r1, #22
 8003486:	20d4      	movs	r0, #212	@ 0xd4
 8003488:	f7fe fe3e 	bl	8002108 <SENSOR_IO_Read>
 800348c:	4603      	mov	r3, r0
 800348e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003496:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034a4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	461a      	mov	r2, r3
 80034aa:	2116      	movs	r1, #22
 80034ac:	20d4      	movs	r0, #212	@ 0xd4
 80034ae:	f7fe fe11 	bl	80020d4 <SENSOR_IO_Write>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80034d2:	2111      	movs	r1, #17
 80034d4:	20d4      	movs	r0, #212	@ 0xd4
 80034d6:	f7fe fe17 	bl	8002108 <SENSOR_IO_Read>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80034de:	f107 0208 	add.w	r2, r7, #8
 80034e2:	2306      	movs	r3, #6
 80034e4:	2122      	movs	r1, #34	@ 0x22
 80034e6:	20d4      	movs	r0, #212	@ 0xd4
 80034e8:	f7fe fe2c 	bl	8002144 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e01a      	b.n	8003528 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	3301      	adds	r3, #1
 80034f8:	3320      	adds	r3, #32
 80034fa:	443b      	add	r3, r7
 80034fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	b29b      	uxth	r3, r3
 8003504:	7ffa      	ldrb	r2, [r7, #31]
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	3220      	adds	r2, #32
 800350a:	443a      	add	r2, r7
 800350c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003510:	4413      	add	r3, r2
 8003512:	b29a      	uxth	r2, r3
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	b212      	sxth	r2, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	3320      	adds	r3, #32
 800351c:	443b      	add	r3, r7
 800351e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	3301      	adds	r3, #1
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d9e1      	bls.n	80034f2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d829      	bhi.n	800358c <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	0800358d 	.word	0x0800358d
 8003548:	0800358d 	.word	0x0800358d
 800354c:	0800358d 	.word	0x0800358d
 8003550:	0800357b 	.word	0x0800357b
 8003554:	0800358d 	.word	0x0800358d
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800358d 	.word	0x0800358d
 8003560:	08003581 	.word	0x08003581
 8003564:	0800358d 	.word	0x0800358d
 8003568:	0800358d 	.word	0x0800358d
 800356c:	0800358d 	.word	0x0800358d
 8003570:	08003587 	.word	0x08003587
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003574:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8003576:	61bb      	str	r3, [r7, #24]
    break;
 8003578:	e008      	b.n	800358c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800357c:	61bb      	str	r3, [r7, #24]
    break;
 800357e:	e005      	b.n	800358c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003582:	61bb      	str	r3, [r7, #24]
    break;
 8003584:	e002      	b.n	800358c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003588:	61bb      	str	r3, [r7, #24]
    break;    
 800358a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e016      	b.n	80035c0 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	3320      	adds	r3, #32
 8003598:	443b      	add	r3, r7
 800359a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	3301      	adds	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	7ffb      	ldrb	r3, [r7, #31]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d9e5      	bls.n	8003592 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	410c0000 	.word	0x410c0000
 80035d4:	418c0000 	.word	0x418c0000
 80035d8:	420c0000 	.word	0x420c0000
 80035dc:	428c0000 	.word	0x428c0000

080035e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ea:	2003      	movs	r0, #3
 80035ec:	f000 f8ed 	bl	80037ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035f0:	2005      	movs	r0, #5
 80035f2:	f7ff f8b1 	bl	8002758 <HAL_InitTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	71fb      	strb	r3, [r7, #7]
 8003600:	e001      	b.n	8003606 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003602:	f7fe ff07 	bl	8002414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003606:	79fb      	ldrb	r3, [r7, #7]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return uwTick;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <HAL_GetTick+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000ae0 	.word	0x20000ae0

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff ffee 	bl	8003610 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_Delay+0x44>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffde 	bl	8003610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200000fc 	.word	0x200000fc

08003670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4907      	ldr	r1, [pc, #28]	@ (800370c <__NVIC_EnableIRQ+0x38>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	@ (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	@ (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	@ 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
         );
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	@ 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff4c 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f2:	f7ff ff61 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 80037f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	6978      	ldr	r0, [r7, #20]
 80037fe:	f7ff ffb1 	bl	8003764 <NVIC_EncodePriority>
 8003802:	4602      	mov	r2, r0
 8003804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff80 	bl	8003710 <__NVIC_SetPriority>
}
 8003810:	bf00      	nop
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff54 	bl	80036d4 <__NVIC_EnableIRQ>
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e014      	b.n	8003870 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe fe04 	bl	8002464 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	795b      	ldrb	r3, [r3, #5]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_DAC_Start_DMA+0x1e>
 8003892:	2302      	movs	r3, #2
 8003894:	e0ab      	b.n	80039ee <HAL_DAC_Start_DMA+0x176>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d12f      	bne.n	8003908 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_DAC_Start_DMA+0x180>)
 80038ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a51      	ldr	r2, [pc, #324]	@ (80039fc <HAL_DAC_Start_DMA+0x184>)
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a50      	ldr	r2, [pc, #320]	@ (8003a00 <HAL_DAC_Start_DMA+0x188>)
 80038be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d013      	beq.n	80038fe <HAL_DAC_Start_DMA+0x86>
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d845      	bhi.n	8003968 <HAL_DAC_Start_DMA+0xf0>
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DAC_Start_DMA+0x72>
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d005      	beq.n	80038f4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80038e8:	e03e      	b.n	8003968 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	613b      	str	r3, [r7, #16]
        break;
 80038f2:	e03c      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	613b      	str	r3, [r7, #16]
        break;
 80038fc:	e037      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3310      	adds	r3, #16
 8003904:	613b      	str	r3, [r7, #16]
        break;
 8003906:	e032      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a04 <HAL_DAC_Start_DMA+0x18c>)
 800390e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <HAL_DAC_Start_DMA+0x190>)
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a0c <HAL_DAC_Start_DMA+0x194>)
 800391e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800392e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d013      	beq.n	800395e <HAL_DAC_Start_DMA+0xe6>
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d817      	bhi.n	800396c <HAL_DAC_Start_DMA+0xf4>
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_DAC_Start_DMA+0xd2>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d005      	beq.n	8003954 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003948:	e010      	b.n	800396c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	613b      	str	r3, [r7, #16]
        break;
 8003952:	e00c      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3318      	adds	r3, #24
 800395a:	613b      	str	r3, [r7, #16]
        break;
 800395c:	e007      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	331c      	adds	r3, #28
 8003964:	613b      	str	r3, [r7, #16]
        break;
 8003966:	e002      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_DAC_Start_DMA+0xf6>
        break;
 800396c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003982:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6898      	ldr	r0, [r3, #8]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	f000 fb8f 	bl	80040b0 <HAL_DMA_Start_IT>
 8003992:	4603      	mov	r3, r0
 8003994:	75fb      	strb	r3, [r7, #23]
 8003996:	e010      	b.n	80039ba <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80039a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68d8      	ldr	r0, [r3, #12]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	f000 fb7d 	bl	80040b0 <HAL_DMA_Start_IT>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e005      	b.n	80039ec <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	08003e39 	.word	0x08003e39
 80039fc:	08003e5b 	.word	0x08003e5b
 8003a00:	08003e77 	.word	0x08003e77
 8003a04:	08003ef5 	.word	0x08003ef5
 8003a08:	08003f17 	.word	0x08003f17
 8003a0c:	08003f33 	.word	0x08003f33

08003a10 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	400a      	ands	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2201      	movs	r2, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fba1 	bl	80041a6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e00c      	b.n	8003a90 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb93 	bl	80041a6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003a8e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab0:	d120      	bne.n	8003af4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac0:	d118      	bne.n	8003af4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003adc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f84b 	bl	8003b8a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b02:	d120      	bne.n	8003b46 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b12:	d118      	bne.n	8003b46 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003b2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9cd 	bl	8003ee0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	795b      	ldrb	r3, [r3, #5]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_DAC_ConfigChannel+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e137      	b.n	8003e2c <HAL_DAC_ConfigChannel+0x28c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	f040 8081 	bne.w	8003cd4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003bd2:	f7ff fd1d 	bl	8003610 <HAL_GetTick>
 8003bd6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d140      	bne.n	8003c60 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bde:	e018      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003be0:	f7ff fd16 	bl	8003610 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d911      	bls.n	8003c12 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f043 0208 	orr.w	r2, r3, #8
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e10c      	b.n	8003e2c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1df      	bne.n	8003be0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7ff fd01 	bl	8003628 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	69d2      	ldr	r2, [r2, #28]
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c30:	e023      	b.n	8003c7a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c32:	f7ff fced 	bl	8003610 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d90f      	bls.n	8003c60 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da0a      	bge.n	8003c60 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0e5      	b.n	8003e2c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	dbe3      	blt.n	8003c32 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7ff fcdc 	bl	8003628 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	69d2      	ldr	r2, [r2, #28]
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	ea02 0103 	and.w	r1, r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	21ff      	movs	r1, #255	@ 0xff
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	ea02 0103 	and.w	r1, r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d11d      	bne.n	8003d18 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	221f      	movs	r2, #31
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2207      	movs	r2, #7
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	d104      	bne.n	8003dc8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e018      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	e00f      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003dda:	f002 fb73 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8003dde:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <HAL_DAC_ConfigChannel+0x294>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d904      	bls.n	8003df2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e003      	b.n	8003dfa <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003df8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	22c0      	movs	r2, #192	@ 0xc0
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43da      	mvns	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	04c4b400 	.word	0x04c4b400

08003e38 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fe81 	bl	8003b4e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	711a      	strb	r2, [r3, #4]
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fe7a 	bl	8003b62 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fe70 	bl	8003b76 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	711a      	strb	r2, [r3, #4]
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ffce 	bl	8003ea4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	711a      	strb	r2, [r3, #4]
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ffc7 	bl	8003eb8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ffbd 	bl	8003ecc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	711a      	strb	r2, [r3, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_DMA_Init+0x138>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d80f      	bhi.n	8003f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b45      	ldr	r3, [pc, #276]	@ (800409c <HAL_DMA_Init+0x13c>)
 8003f86:	4413      	add	r3, r2
 8003f88:	4a45      	ldr	r2, [pc, #276]	@ (80040a0 <HAL_DMA_Init+0x140>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <HAL_DMA_Init+0x144>)
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f9c:	e00e      	b.n	8003fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b40      	ldr	r3, [pc, #256]	@ (80040a8 <HAL_DMA_Init+0x148>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80040a0 <HAL_DMA_Init+0x140>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ac <HAL_DMA_Init+0x14c>)
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa12 	bl	8004438 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d102      	bne.n	8004024 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004038:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_DMA_Init+0x104>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d80c      	bhi.n	8004064 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa32 	bl	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e008      	b.n	8004076 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40020407 	.word	0x40020407
 800409c:	bffdfff8 	.word	0xbffdfff8
 80040a0:	cccccccd 	.word	0xcccccccd
 80040a4:	40020000 	.word	0x40020000
 80040a8:	bffdfbf8 	.word	0xbffdfbf8
 80040ac:	40020400 	.word	0x40020400

080040b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_DMA_Start_IT+0x20>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e066      	b.n	800419e <HAL_DMA_Start_IT+0xee>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d155      	bne.n	8004190 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f957 	bl	80043bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 020e 	orr.w	r2, r2, #14
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e00f      	b.n	8004148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 020a 	orr.w	r2, r2, #10
 8004146:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e005      	b.n	800419c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004198:	2302      	movs	r3, #2
 800419a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d008      	beq.n	80041d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e040      	b.n	8004252 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020e 	bic.w	r2, r2, #14
 80041de:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041ee:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004204:	f003 021c 	and.w	r2, r3, #28
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f202 	lsl.w	r2, r1, r2
 8004212:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800421c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004234:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800423e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f003 031c 	and.w	r3, r3, #28
 800427e:	2204      	movs	r2, #4
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d026      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x7a>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d021      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0204 	bic.w	r2, r2, #4
 80042b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	f003 021c 	and.w	r2, r3, #28
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2104      	movs	r1, #4
 80042c0:	fa01 f202 	lsl.w	r2, r1, r2
 80042c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d071      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042d6:	e06c      	b.n	80043b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042dc:	f003 031c 	and.w	r3, r3, #28
 80042e0:	2202      	movs	r2, #2
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02e      	beq.n	800434a <HAL_DMA_IRQHandler+0xec>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d029      	beq.n	800434a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 020a 	bic.w	r2, r2, #10
 8004312:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004320:	f003 021c 	and.w	r2, r3, #28
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	2102      	movs	r1, #2
 800432a:	fa01 f202 	lsl.w	r2, r1, r2
 800432e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d038      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004348:	e033      	b.n	80043b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f003 031c 	and.w	r3, r3, #28
 8004352:	2208      	movs	r2, #8
 8004354:	409a      	lsls	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02a      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x156>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d025      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020e 	bic.w	r2, r2, #14
 8004376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	f003 021c 	and.w	r2, r3, #28
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	2101      	movs	r1, #1
 8004386:	fa01 f202 	lsl.w	r2, r1, r2
 800438a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
}
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043e4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	f003 021c 	and.w	r2, r3, #28
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b10      	cmp	r3, #16
 8004408:	d108      	bne.n	800441c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800441a:	e007      	b.n	800442c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004448:	429a      	cmp	r2, r3
 800444a:	d80a      	bhi.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004458:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004460:	e007      	b.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	009a      	lsls	r2, r3, #2
 800446a:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800446c:	4413      	add	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3b08      	subs	r3, #8
 800447a:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2201      	movs	r2, #1
 8004492:	409a      	lsls	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40020407 	.word	0x40020407
 80044a8:	4002081c 	.word	0x4002081c
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020880 	.word	0x40020880

080044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a08      	ldr	r2, [pc, #32]	@ (80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3b01      	subs	r3, #1
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	1000823f 	.word	0x1000823f
 80044f8:	40020940 	.word	0x40020940

080044fc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01a      	beq.n	800454a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800452c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004532:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d022      	beq.n	8004598 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01a      	beq.n	8004598 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004570:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800457a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004580:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
      }
    }
  }
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ae:	e166      	b.n	800487e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8158 	beq.w	8004878 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d005      	beq.n	80045e0 <HAL_GPIO_Init+0x40>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d130      	bne.n	8004642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004616:	2201      	movs	r2, #1
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0201 	and.w	r2, r3, #1
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d017      	beq.n	800467e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	2203      	movs	r2, #3
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d123      	bne.n	80046d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	08da      	lsrs	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3208      	adds	r2, #8
 8004692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	08da      	lsrs	r2, r3, #3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3208      	adds	r2, #8
 80046cc:	6939      	ldr	r1, [r7, #16]
 80046ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	2203      	movs	r2, #3
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80b2 	beq.w	8004878 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <HAL_GPIO_Init+0x2fc>)
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	4a60      	ldr	r2, [pc, #384]	@ (800489c <HAL_GPIO_Init+0x2fc>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004720:	4b5e      	ldr	r3, [pc, #376]	@ (800489c <HAL_GPIO_Init+0x2fc>)
 8004722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800472c:	4a5c      	ldr	r2, [pc, #368]	@ (80048a0 <HAL_GPIO_Init+0x300>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	3302      	adds	r3, #2
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004756:	d02b      	beq.n	80047b0 <HAL_GPIO_Init+0x210>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a52      	ldr	r2, [pc, #328]	@ (80048a4 <HAL_GPIO_Init+0x304>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d025      	beq.n	80047ac <HAL_GPIO_Init+0x20c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a51      	ldr	r2, [pc, #324]	@ (80048a8 <HAL_GPIO_Init+0x308>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01f      	beq.n	80047a8 <HAL_GPIO_Init+0x208>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a50      	ldr	r2, [pc, #320]	@ (80048ac <HAL_GPIO_Init+0x30c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d019      	beq.n	80047a4 <HAL_GPIO_Init+0x204>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a4f      	ldr	r2, [pc, #316]	@ (80048b0 <HAL_GPIO_Init+0x310>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_GPIO_Init+0x200>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a4e      	ldr	r2, [pc, #312]	@ (80048b4 <HAL_GPIO_Init+0x314>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00d      	beq.n	800479c <HAL_GPIO_Init+0x1fc>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a4d      	ldr	r2, [pc, #308]	@ (80048b8 <HAL_GPIO_Init+0x318>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <HAL_GPIO_Init+0x1f8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a4c      	ldr	r2, [pc, #304]	@ (80048bc <HAL_GPIO_Init+0x31c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_GPIO_Init+0x1f4>
 8004790:	2307      	movs	r3, #7
 8004792:	e00e      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 8004794:	2308      	movs	r3, #8
 8004796:	e00c      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 8004798:	2306      	movs	r3, #6
 800479a:	e00a      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 800479c:	2305      	movs	r3, #5
 800479e:	e008      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e006      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e004      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e002      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_GPIO_Init+0x212>
 80047b0:	2300      	movs	r3, #0
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	f002 0203 	and.w	r2, r2, #3
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	4093      	lsls	r3, r2
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047c2:	4937      	ldr	r1, [pc, #220]	@ (80048a0 <HAL_GPIO_Init+0x300>)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d0:	4b3b      	ldr	r3, [pc, #236]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43db      	mvns	r3, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047f4:	4a32      	ldr	r2, [pc, #200]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047fa:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800481e:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004824:	4b26      	ldr	r3, [pc, #152]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43db      	mvns	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800484e:	4b1c      	ldr	r3, [pc, #112]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <HAL_GPIO_Init+0x320>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f ae91 	bne.w	80045b0 <HAL_GPIO_Init+0x10>
  }
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40021000 	.word	0x40021000
 80048a0:	40010000 	.word	0x40010000
 80048a4:	48000400 	.word	0x48000400
 80048a8:	48000800 	.word	0x48000800
 80048ac:	48000c00 	.word	0x48000c00
 80048b0:	48001000 	.word	0x48001000
 80048b4:	48001400 	.word	0x48001400
 80048b8:	48001800 	.word	0x48001800
 80048bc:	48001c00 	.word	0x48001c00
 80048c0:	40010400 	.word	0x40010400

080048c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048d2:	e0c9      	b.n	8004a68 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048d4:	2201      	movs	r2, #1
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80bc 	beq.w	8004a62 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80048ea:	4a66      	ldr	r2, [pc, #408]	@ (8004a84 <HAL_GPIO_DeInit+0x1c0>)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004912:	d02b      	beq.n	800496c <HAL_GPIO_DeInit+0xa8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a5c      	ldr	r2, [pc, #368]	@ (8004a88 <HAL_GPIO_DeInit+0x1c4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d025      	beq.n	8004968 <HAL_GPIO_DeInit+0xa4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a8c <HAL_GPIO_DeInit+0x1c8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01f      	beq.n	8004964 <HAL_GPIO_DeInit+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a5a      	ldr	r2, [pc, #360]	@ (8004a90 <HAL_GPIO_DeInit+0x1cc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d019      	beq.n	8004960 <HAL_GPIO_DeInit+0x9c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a59      	ldr	r2, [pc, #356]	@ (8004a94 <HAL_GPIO_DeInit+0x1d0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <HAL_GPIO_DeInit+0x98>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a58      	ldr	r2, [pc, #352]	@ (8004a98 <HAL_GPIO_DeInit+0x1d4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00d      	beq.n	8004958 <HAL_GPIO_DeInit+0x94>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a57      	ldr	r2, [pc, #348]	@ (8004a9c <HAL_GPIO_DeInit+0x1d8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <HAL_GPIO_DeInit+0x90>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a56      	ldr	r2, [pc, #344]	@ (8004aa0 <HAL_GPIO_DeInit+0x1dc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_GPIO_DeInit+0x8c>
 800494c:	2307      	movs	r3, #7
 800494e:	e00e      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004950:	2308      	movs	r3, #8
 8004952:	e00c      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004954:	2306      	movs	r3, #6
 8004956:	e00a      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004958:	2305      	movs	r3, #5
 800495a:	e008      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 800495c:	2304      	movs	r3, #4
 800495e:	e006      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004960:	2303      	movs	r3, #3
 8004962:	e004      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004964:	2302      	movs	r3, #2
 8004966:	e002      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_GPIO_DeInit+0xaa>
 800496c:	2300      	movs	r3, #0
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	f002 0203 	and.w	r2, r2, #3
 8004974:	0092      	lsls	r2, r2, #2
 8004976:	4093      	lsls	r3, r2
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	429a      	cmp	r2, r3
 800497c:	d132      	bne.n	80049e4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800497e:	4b49      	ldr	r3, [pc, #292]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	4947      	ldr	r1, [pc, #284]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 8004988:	4013      	ands	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800498c:	4b45      	ldr	r3, [pc, #276]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	43db      	mvns	r3, r3
 8004994:	4943      	ldr	r1, [pc, #268]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 8004996:	4013      	ands	r3, r2
 8004998:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800499a:	4b42      	ldr	r3, [pc, #264]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	4940      	ldr	r1, [pc, #256]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80049a8:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	493c      	ldr	r1, [pc, #240]	@ (8004aa4 <HAL_GPIO_DeInit+0x1e0>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80049c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a84 <HAL_GPIO_DeInit+0x1c0>)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	3302      	adds	r3, #2
 80049ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	43da      	mvns	r2, r3
 80049d6:	482b      	ldr	r0, [pc, #172]	@ (8004a84 <HAL_GPIO_DeInit+0x1c0>)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	400a      	ands	r2, r1
 80049de:	3302      	adds	r3, #2
 80049e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2103      	movs	r1, #3
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	08da      	lsrs	r2, r3, #3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3208      	adds	r2, #8
 8004a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	08d2      	lsrs	r2, r2, #3
 8004a18:	4019      	ands	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	43db      	mvns	r3, r3
 8004a32:	401a      	ands	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	2103      	movs	r1, #3
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	3301      	adds	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af2f 	bne.w	80048d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40010000 	.word	0x40010000
 8004a88:	48000400 	.word	0x48000400
 8004a8c:	48000800 	.word	0x48000800
 8004a90:	48000c00 	.word	0x48000c00
 8004a94:	48001000 	.word	0x48001000
 8004a98:	48001400 	.word	0x48001400
 8004a9c:	48001800 	.word	0x48001800
 8004aa0:	48001c00 	.word	0x48001c00
 8004aa4:	40010400 	.word	0x40010400

08004aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ab2:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d006      	beq.n	8004acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004abe:	4a05      	ldr	r2, [pc, #20]	@ (8004ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc ff72 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e08d      	b.n	8004c06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fd26 	bl	8002550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	@ 0x24
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e006      	b.n	8004b60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d108      	bne.n	8004b7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	e007      	b.n	8004b8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e021      	b.n	8004c64 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	@ 0x24
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fd fce7 	bl	800260c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	817b      	strh	r3, [r7, #10]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	813b      	strh	r3, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	f040 80f9 	bne.w	8004e86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_I2C_Mem_Write+0x34>
 8004c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0ed      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_I2C_Mem_Write+0x4e>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e0e6      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fe fca5 	bl	8003610 <HAL_GetTick>
 8004cc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2319      	movs	r3, #25
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fac3 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0d1      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2221      	movs	r2, #33	@ 0x21
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2240      	movs	r2, #64	@ 0x40
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a3a      	ldr	r2, [r7, #32]
 8004cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d0c:	88f8      	ldrh	r0, [r7, #6]
 8004d0e:	893a      	ldrh	r2, [r7, #8]
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f9d3 	bl	80050c8 <I2C_RequestMemoryWrite>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0a9      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2bff      	cmp	r3, #255	@ 0xff
 8004d3c:	d90e      	bls.n	8004d5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	22ff      	movs	r2, #255	@ 0xff
 8004d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	8979      	ldrh	r1, [r7, #10]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fc47 	bl	80055e8 <I2C_TransferConfig>
 8004d5a:	e00f      	b.n	8004d7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	8979      	ldrh	r1, [r7, #10]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fc36 	bl	80055e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fac6 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e07b      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d034      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x1c8>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d130      	bne.n	8004e34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa3f 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e04d      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2bff      	cmp	r3, #255	@ 0xff
 8004df4:	d90e      	bls.n	8004e14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	22ff      	movs	r2, #255	@ 0xff
 8004dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	8979      	ldrh	r1, [r7, #10]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fbeb 	bl	80055e8 <I2C_TransferConfig>
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	8979      	ldrh	r1, [r7, #10]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fbda 	bl	80055e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d19e      	bne.n	8004d7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 faac 	bl	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e01a      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2220      	movs	r2, #32
 8004e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <HAL_I2C_Mem_Write+0x224>)
 8004e66:	400b      	ands	r3, r1
 8004e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	fe00e800 	.word	0xfe00e800

08004e94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	817b      	strh	r3, [r7, #10]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	813b      	strh	r3, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	f040 80fd 	bne.w	80050b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_I2C_Mem_Read+0x34>
 8004ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0f1      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_I2C_Mem_Read+0x4e>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e0ea      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eea:	f7fe fb91 	bl	8003610 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2319      	movs	r3, #25
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f9af 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0d5      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	@ 0x22
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2240      	movs	r2, #64	@ 0x40
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f34:	88f8      	ldrh	r0, [r7, #6]
 8004f36:	893a      	ldrh	r2, [r7, #8]
 8004f38:	8979      	ldrh	r1, [r7, #10]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4603      	mov	r3, r0
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f913 	bl	8005170 <I2C_RequestMemoryRead>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0ad      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2bff      	cmp	r3, #255	@ 0xff
 8004f64:	d90e      	bls.n	8004f84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	4b52      	ldr	r3, [pc, #328]	@ (80050c0 <HAL_I2C_Mem_Read+0x22c>)
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb33 	bl	80055e8 <I2C_TransferConfig>
 8004f82:	e00f      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	8979      	ldrh	r1, [r7, #10]
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <HAL_I2C_Mem_Read+0x22c>)
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fb22 	bl	80055e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	2200      	movs	r2, #0
 8004fac:	2104      	movs	r1, #4
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f956 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e07c      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d034      	beq.n	8005064 <HAL_I2C_Mem_Read+0x1d0>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d130      	bne.n	8005064 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	2200      	movs	r2, #0
 800500a:	2180      	movs	r1, #128	@ 0x80
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f927 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e04d      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2bff      	cmp	r3, #255	@ 0xff
 8005024:	d90e      	bls.n	8005044 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	2300      	movs	r3, #0
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fad3 	bl	80055e8 <I2C_TransferConfig>
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fac2 	bl	80055e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d19a      	bne.n	8004fa4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f994 	bl	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e01a      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_I2C_Mem_Read+0x230>)
 8005096:	400b      	ands	r3, r1
 8005098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	80002400 	.word	0x80002400
 80050c4:	fe00e800 	.word	0xfe00e800

080050c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	460b      	mov	r3, r1
 80050dc:	813b      	strh	r3, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	4b20      	ldr	r3, [pc, #128]	@ (800516c <I2C_RequestMemoryWrite+0xa4>)
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fa79 	bl	80055e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f909 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e02c      	b.n	8005164 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d105      	bne.n	800511c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005110:	893b      	ldrh	r3, [r7, #8]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	629a      	str	r2, [r3, #40]	@ 0x28
 800511a:	e015      	b.n	8005148 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800511c:	893b      	ldrh	r3, [r7, #8]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	b29b      	uxth	r3, r3
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8ef 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e012      	b.n	8005164 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800513e:	893b      	ldrh	r3, [r7, #8]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f884 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	80002000 	.word	0x80002000

08005170 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	8979      	ldrh	r1, [r7, #10]
 8005190:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <I2C_RequestMemoryRead+0xa4>)
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa26 	bl	80055e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f8b6 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e02c      	b.n	800520a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	893b      	ldrh	r3, [r7, #8]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c0:	e015      	b.n	80051ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051c2:	893b      	ldrh	r3, [r7, #8]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	69b9      	ldr	r1, [r7, #24]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f89c 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e012      	b.n	800520a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051e4:	893b      	ldrh	r3, [r7, #8]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2140      	movs	r1, #64	@ 0x40
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f831 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	80002000 	.word	0x80002000

08005218 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d007      	beq.n	8005254 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	619a      	str	r2, [r3, #24]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005270:	e03b      	b.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f8d6 	bl	8005428 <I2C_IsErrorOccurred>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e041      	b.n	800530a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800528c:	d02d      	beq.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe f9bf 	bl	8003610 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d122      	bne.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d113      	bne.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00f      	b.n	800530a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d0b4      	beq.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800531e:	e033      	b.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f87f 	bl	8005428 <I2C_IsErrorOccurred>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e031      	b.n	8005398 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800533a:	d025      	beq.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533c:	f7fe f968 	bl	8003610 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d11a      	bne.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d013      	beq.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d1c4      	bne.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ac:	e02f      	b.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f838 	bl	8005428 <I2C_IsErrorOccurred>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e02d      	b.n	800541e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fe f925 	bl	8003610 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11a      	bne.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d013      	beq.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d1c8      	bne.n	80053ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	@ 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d068      	beq.n	8005526 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800545c:	e049      	b.n	80054f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005464:	d045      	beq.n	80054f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fe f8d3 	bl	8003610 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <I2C_IsErrorOccurred+0x54>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d13a      	bne.n	80054f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005486:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800548e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800549e:	d121      	bne.n	80054e4 <I2C_IsErrorOccurred+0xbc>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a6:	d01d      	beq.n	80054e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d01a      	beq.n	80054e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054be:	f7fe f8a7 	bl	8003610 <HAL_GetTick>
 80054c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c4:	e00e      	b.n	80054e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054c6:	f7fe f8a3 	bl	8003610 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b19      	cmp	r3, #25
 80054d2:	d907      	bls.n	80054e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	f043 0320 	orr.w	r3, r3, #32
 80054da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80054e2:	e006      	b.n	80054f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d1e9      	bne.n	80054c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d003      	beq.n	8005508 <I2C_IsErrorOccurred+0xe0>
 8005500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0aa      	beq.n	800545e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2220      	movs	r2, #32
 8005516:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f043 0304 	orr.w	r3, r3, #4
 800551e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005548:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f043 0308 	orr.w	r3, r3, #8
 8005560:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800556a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f043 0302 	orr.w	r3, r3, #2
 8005582:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800558c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01c      	beq.n	80055d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff fe3b 	bl	8005218 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6859      	ldr	r1, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <I2C_IsErrorOccurred+0x1bc>)
 80055ae:	400b      	ands	r3, r1
 80055b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80055d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3728      	adds	r7, #40	@ 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	fe00e800 	.word	0xfe00e800

080055e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	460b      	mov	r3, r1
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	4613      	mov	r3, r2
 80055f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005600:	7a7b      	ldrb	r3, [r7, #9]
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005608:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	4313      	orrs	r3, r2
 8005612:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005616:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	0d5b      	lsrs	r3, r3, #21
 8005622:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <I2C_TransferConfig+0x60>)
 8005628:	430b      	orrs	r3, r1
 800562a:	43db      	mvns	r3, r3
 800562c:	ea02 0103 	and.w	r1, r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	03ff63ff 	.word	0x03ff63ff

0800564c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	d138      	bne.n	80056d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800566c:	2302      	movs	r3, #2
 800566e:	e032      	b.n	80056d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	@ 0x24
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800569e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d139      	bne.n	800576c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005702:	2302      	movs	r3, #2
 8005704:	e033      	b.n	800576e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005734:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005780:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578c:	d102      	bne.n	8005794 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800578e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005792:	e00b      	b.n	80057ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a2:	d102      	bne.n	80057aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80057a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057a8:	e000      	b.n	80057ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80057aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40007000 	.word	0x40007000

080057bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d141      	bne.n	800584e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ca:	4b4b      	ldr	r3, [pc, #300]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d6:	d131      	bne.n	800583c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d8:	4b47      	ldr	r3, [pc, #284]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057de:	4a46      	ldr	r2, [pc, #280]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e8:	4b43      	ldr	r3, [pc, #268]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057f0:	4a41      	ldr	r2, [pc, #260]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057f8:	4b40      	ldr	r3, [pc, #256]	@ (80058fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2232      	movs	r2, #50	@ 0x32
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	4a3f      	ldr	r2, [pc, #252]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	0c9b      	lsrs	r3, r3, #18
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580e:	e002      	b.n	8005816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3b01      	subs	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005816:	4b38      	ldr	r3, [pc, #224]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005822:	d102      	bne.n	800582a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f2      	bne.n	8005810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800582a:	4b33      	ldr	r3, [pc, #204]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	d158      	bne.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e057      	b.n	80058ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800583c:	4b2e      	ldr	r3, [pc, #184]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800584c:	e04d      	b.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005854:	d141      	bne.n	80058da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005856:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800585e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005862:	d131      	bne.n	80058c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005864:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586a:	4a23      	ldr	r2, [pc, #140]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005874:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800587c:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2232      	movs	r2, #50	@ 0x32
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	0c9b      	lsrs	r3, r3, #18
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589a:	e002      	b.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a2:	4b15      	ldr	r3, [pc, #84]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ae:	d102      	bne.n	80058b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f2      	bne.n	800589c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b6:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c2:	d112      	bne.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e011      	b.n	80058ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ce:	4a0a      	ldr	r2, [pc, #40]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058d8:	e007      	b.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058e2:	4a05      	ldr	r2, [pc, #20]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40007000 	.word	0x40007000
 80058fc:	20000030 	.word	0x20000030
 8005900:	431bde83 	.word	0x431bde83

08005904 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f000 bc08 	b.w	8006128 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005918:	4b96      	ldr	r3, [pc, #600]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005922:	4b94      	ldr	r3, [pc, #592]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80e4 	beq.w	8005b02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_RCC_OscConfig+0x4c>
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b0c      	cmp	r3, #12
 8005944:	f040 808b 	bne.w	8005a5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b01      	cmp	r3, #1
 800594c:	f040 8087 	bne.w	8005a5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005950:	4b88      	ldr	r3, [pc, #544]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_OscConfig+0x64>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e3df      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	4b81      	ldr	r3, [pc, #516]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <HAL_RCC_OscConfig+0x7e>
 8005978:	4b7e      	ldr	r3, [pc, #504]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005980:	e005      	b.n	800598e <HAL_RCC_OscConfig+0x8a>
 8005982:	4b7c      	ldr	r3, [pc, #496]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800598e:	4293      	cmp	r3, r2
 8005990:	d223      	bcs.n	80059da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fdfe 	bl	8006598 <RCC_SetFlashLatencyFromMSIRange>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e3c0      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a6:	4b73      	ldr	r3, [pc, #460]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a72      	ldr	r2, [pc, #456]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059ac:	f043 0308 	orr.w	r3, r3, #8
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	4b70      	ldr	r3, [pc, #448]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	496d      	ldr	r1, [pc, #436]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	4968      	ldr	r1, [pc, #416]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]
 80059d8:	e025      	b.n	8005a26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059da:	4b66      	ldr	r3, [pc, #408]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a65      	ldr	r2, [pc, #404]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059e0:	f043 0308 	orr.w	r3, r3, #8
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b63      	ldr	r3, [pc, #396]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4960      	ldr	r1, [pc, #384]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f8:	4b5e      	ldr	r3, [pc, #376]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	495b      	ldr	r1, [pc, #364]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fdbe 	bl	8006598 <RCC_SetFlashLatencyFromMSIRange>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e380      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a26:	f000 fcc1 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b51      	ldr	r3, [pc, #324]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	4950      	ldr	r1, [pc, #320]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005a38:	5ccb      	ldrb	r3, [r1, r3]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	4a4e      	ldr	r2, [pc, #312]	@ (8005b7c <HAL_RCC_OscConfig+0x278>)
 8005a44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a46:	4b4e      	ldr	r3, [pc, #312]	@ (8005b80 <HAL_RCC_OscConfig+0x27c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fe84 	bl	8002758 <HAL_InitTick>
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d052      	beq.n	8005b00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	e364      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d032      	beq.n	8005acc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a66:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a42      	ldr	r2, [pc, #264]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a72:	f7fd fdcd 	bl	8003610 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a7a:	f7fd fdc9 	bl	8003610 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e34d      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a8c:	4b39      	ldr	r3, [pc, #228]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a98:	4b36      	ldr	r3, [pc, #216]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a35      	ldr	r2, [pc, #212]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	f043 0308 	orr.w	r3, r3, #8
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	4b33      	ldr	r3, [pc, #204]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4930      	ldr	r1, [pc, #192]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	492b      	ldr	r1, [pc, #172]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
 8005aca:	e01a      	b.n	8005b02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005acc:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a28      	ldr	r2, [pc, #160]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad8:	f7fd fd9a 	bl	8003610 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fd96 	bl	8003610 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e31a      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005af2:	4b20      	ldr	r3, [pc, #128]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1dc>
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d073      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_OscConfig+0x21c>
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d10e      	bne.n	8005b38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d10b      	bne.n	8005b38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	4b14      	ldr	r3, [pc, #80]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d063      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d15f      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e2f7      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d106      	bne.n	8005b50 <HAL_RCC_OscConfig+0x24c>
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a0b      	ldr	r2, [pc, #44]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e025      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b58:	d114      	bne.n	8005b84 <HAL_RCC_OscConfig+0x280>
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a05      	ldr	r2, [pc, #20]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a02      	ldr	r2, [pc, #8]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e013      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b74:	40021000 	.word	0x40021000
 8005b78:	0800e7ac 	.word	0x0800e7ac
 8005b7c:	20000030 	.word	0x20000030
 8005b80:	200000f8 	.word	0x200000f8
 8005b84:	4ba0      	ldr	r3, [pc, #640]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a9f      	ldr	r2, [pc, #636]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b9d      	ldr	r3, [pc, #628]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a9c      	ldr	r2, [pc, #624]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fd fd34 	bl	8003610 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bac:	f7fd fd30 	bl	8003610 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	@ 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e2b4      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbe:	4b92      	ldr	r3, [pc, #584]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x2a8>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fd fd20 	bl	8003610 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fd fd1c 	bl	8003610 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	@ 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e2a0      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be6:	4b88      	ldr	r3, [pc, #544]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x2d0>
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d060      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_OscConfig+0x310>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d119      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d116      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c14:	4b7c      	ldr	r3, [pc, #496]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_OscConfig+0x328>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e27d      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2c:	4b76      	ldr	r3, [pc, #472]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	4973      	ldr	r1, [pc, #460]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c40:	e040      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d023      	beq.n	8005c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fd fcdb 	bl	8003610 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fd fcd7 	bl	8003610 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e25b      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c70:	4b65      	ldr	r3, [pc, #404]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b62      	ldr	r3, [pc, #392]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	495f      	ldr	r1, [pc, #380]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	e018      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c92:	4b5d      	ldr	r3, [pc, #372]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5c      	ldr	r2, [pc, #368]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fd fcb7 	bl	8003610 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fd fcb3 	bl	8003610 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e237      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb8:	4b53      	ldr	r3, [pc, #332]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cde:	4a4a      	ldr	r2, [pc, #296]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fd fc92 	bl	8003610 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf0:	f7fd fc8e 	bl	8003610 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e212      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d02:	4b41      	ldr	r3, [pc, #260]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ef      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x3ec>
 8005d10:	e01b      	b.n	8005d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d12:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d18:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d22:	f7fd fc75 	bl	8003610 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2a:	f7fd fc71 	bl	8003610 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1f5      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d3c:	4b32      	ldr	r3, [pc, #200]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ef      	bne.n	8005d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80a6 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	4b27      	ldr	r3, [pc, #156]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6c:	4a26      	ldr	r2, [pc, #152]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d74:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d80:	2301      	movs	r3, #1
 8005d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d84:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d118      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d90:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fd fc38 	bl	8003610 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fd fc34 	bl	8003610 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e1b8      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db6:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d108      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4d8>
 8005dca:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dda:	e029      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	d115      	bne.n	8005e10 <HAL_RCC_OscConfig+0x50c>
 8005de4:	4b08      	ldr	r3, [pc, #32]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dea:	4a07      	ldr	r2, [pc, #28]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005df4:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfa:	4a03      	ldr	r2, [pc, #12]	@ (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e04:	e014      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	4b9d      	ldr	r3, [pc, #628]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e16:	4a9c      	ldr	r2, [pc, #624]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e20:	4b99      	ldr	r3, [pc, #612]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	4a98      	ldr	r2, [pc, #608]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fd fbea 	bl	8003610 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fd fbe6 	bl	8003610 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e168      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	4b8c      	ldr	r3, [pc, #560]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0ed      	beq.n	8005e40 <HAL_RCC_OscConfig+0x53c>
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e66:	f7fd fbd3 	bl	8003610 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fd fbcf 	bl	8003610 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e151      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e84:	4b80      	ldr	r3, [pc, #512]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ed      	bne.n	8005e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e98:	4b7b      	ldr	r3, [pc, #492]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d03c      	beq.n	8005f2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01c      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb8:	4b73      	ldr	r3, [pc, #460]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ebe:	4a72      	ldr	r2, [pc, #456]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec8:	f7fd fba2 	bl	8003610 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed0:	f7fd fb9e 	bl	8003610 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e122      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ee2:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ef      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x5cc>
 8005ef0:	e01b      	b.n	8005f2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ef2:	4b65      	ldr	r3, [pc, #404]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ef8:	4a63      	ldr	r2, [pc, #396]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fd fb85 	bl	8003610 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f0a:	f7fd fb81 	bl	8003610 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e105      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1ef      	bne.n	8005f0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80f9 	beq.w	8006126 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	f040 80cf 	bne.w	80060dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f3e:	4b52      	ldr	r3, [pc, #328]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0203 	and.w	r2, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d12c      	bne.n	8005fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d123      	bne.n	8005fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d11b      	bne.n	8005fac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d113      	bne.n	8005fac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d109      	bne.n	8005fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d071      	beq.n	8006090 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b0c      	cmp	r3, #12
 8005fb0:	d068      	beq.n	8006084 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fb2:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005fbe:	4b32      	ldr	r3, [pc, #200]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0ac      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fce:	4b2e      	ldr	r3, [pc, #184]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fda:	f7fd fb19 	bl	8003610 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe2:	f7fd fb15 	bl	8003610 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e099      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff4:	4b24      	ldr	r3, [pc, #144]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006000:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	4b21      	ldr	r3, [pc, #132]	@ (800608c <HAL_RCC_OscConfig+0x788>)
 8006006:	4013      	ands	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006010:	3a01      	subs	r2, #1
 8006012:	0112      	lsls	r2, r2, #4
 8006014:	4311      	orrs	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800601a:	0212      	lsls	r2, r2, #8
 800601c:	4311      	orrs	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006022:	0852      	lsrs	r2, r2, #1
 8006024:	3a01      	subs	r2, #1
 8006026:	0552      	lsls	r2, r2, #21
 8006028:	4311      	orrs	r1, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800602e:	0852      	lsrs	r2, r2, #1
 8006030:	3a01      	subs	r2, #1
 8006032:	0652      	lsls	r2, r2, #25
 8006034:	4311      	orrs	r1, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800603a:	06d2      	lsls	r2, r2, #27
 800603c:	430a      	orrs	r2, r1
 800603e:	4912      	ldr	r1, [pc, #72]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006040:	4313      	orrs	r3, r2
 8006042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006044:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a0f      	ldr	r2, [pc, #60]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 800604a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800604e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006050:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4a0c      	ldr	r2, [pc, #48]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800605a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800605c:	f7fd fad8 	bl	8003610 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd fad4 	bl	8003610 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e058      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006076:	4b04      	ldr	r3, [pc, #16]	@ (8006088 <HAL_RCC_OscConfig+0x784>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006082:	e050      	b.n	8006126 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e04f      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
 8006088:	40021000 	.word	0x40021000
 800608c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006090:	4b27      	ldr	r3, [pc, #156]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d144      	bne.n	8006126 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800609c:	4b24      	ldr	r3, [pc, #144]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a23      	ldr	r2, [pc, #140]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a20      	ldr	r2, [pc, #128]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b4:	f7fd faac 	bl	8003610 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fd faa8 	bl	8003610 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e02c      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ce:	4b18      	ldr	r3, [pc, #96]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x7b8>
 80060da:	e024      	b.n	8006126 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b0c      	cmp	r3, #12
 80060e0:	d01f      	beq.n	8006122 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a12      	ldr	r2, [pc, #72]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 80060e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fd fa8f 	bl	8003610 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f6:	f7fd fa8b 	bl	8003610 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e00f      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f0      	bne.n	80060f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	4905      	ldr	r1, [pc, #20]	@ (8006130 <HAL_RCC_OscConfig+0x82c>)
 800611a:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <HAL_RCC_OscConfig+0x830>)
 800611c:	4013      	ands	r3, r2
 800611e:	60cb      	str	r3, [r1, #12]
 8006120:	e001      	b.n	8006126 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021000 	.word	0x40021000
 8006134:	feeefffc 	.word	0xfeeefffc

08006138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e11d      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006150:	4b90      	ldr	r3, [pc, #576]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d910      	bls.n	8006180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615e:	4b8d      	ldr	r3, [pc, #564]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 020f 	bic.w	r2, r3, #15
 8006166:	498b      	ldr	r1, [pc, #556]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b89      	ldr	r3, [pc, #548]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e105      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	4b81      	ldr	r3, [pc, #516]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006198:	429a      	cmp	r2, r3
 800619a:	d908      	bls.n	80061ae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800619c:	4b7e      	ldr	r3, [pc, #504]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	497b      	ldr	r1, [pc, #492]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d079      	beq.n	80062ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d11e      	bne.n	8006200 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c2:	4b75      	ldr	r3, [pc, #468]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0dc      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80061d2:	f000 fa3b 	bl	800664c <RCC_GetSysClockFreqFromPLLSource>
 80061d6:	4603      	mov	r3, r0
 80061d8:	4a70      	ldr	r2, [pc, #448]	@ (800639c <HAL_RCC_ClockConfig+0x264>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d946      	bls.n	800626c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061de:	4b6e      	ldr	r3, [pc, #440]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d140      	bne.n	800626c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061ea:	4b6b      	ldr	r3, [pc, #428]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061f2:	4a69      	ldr	r2, [pc, #420]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80061f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061fa:	2380      	movs	r3, #128	@ 0x80
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e035      	b.n	800626c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d107      	bne.n	8006218 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006208:	4b63      	ldr	r3, [pc, #396]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d115      	bne.n	8006240 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e0b9      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006220:	4b5d      	ldr	r3, [pc, #372]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0ad      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006230:	4b59      	ldr	r3, [pc, #356]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0a5      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006240:	f000 f8b4 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 8006244:	4603      	mov	r3, r0
 8006246:	4a55      	ldr	r2, [pc, #340]	@ (800639c <HAL_RCC_ClockConfig+0x264>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d90f      	bls.n	800626c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800624c:	4b52      	ldr	r3, [pc, #328]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006258:	4b4f      	ldr	r3, [pc, #316]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006260:	4a4d      	ldr	r2, [pc, #308]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006266:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800626c:	4b4a      	ldr	r3, [pc, #296]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 0203 	bic.w	r2, r3, #3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4947      	ldr	r1, [pc, #284]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627e:	f7fd f9c7 	bl	8003610 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006284:	e00a      	b.n	800629c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006286:	f7fd f9c3 	bl	8003610 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e077      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629c:	4b3e      	ldr	r3, [pc, #248]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 020c 	and.w	r2, r3, #12
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d1eb      	bne.n	8006286 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b80      	cmp	r3, #128	@ 0x80
 80062b2:	d105      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062b4:	4b38      	ldr	r3, [pc, #224]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4a37      	ldr	r2, [pc, #220]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062be:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b31      	ldr	r3, [pc, #196]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d8:	429a      	cmp	r2, r3
 80062da:	d208      	bcs.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	492b      	ldr	r1, [pc, #172]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ee:	4b29      	ldr	r3, [pc, #164]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d210      	bcs.n	800631e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fc:	4b25      	ldr	r3, [pc, #148]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 020f 	bic.w	r2, r3, #15
 8006304:	4923      	ldr	r1, [pc, #140]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630c:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <HAL_RCC_ClockConfig+0x25c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e036      	b.n	800638c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800632a:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4918      	ldr	r1, [pc, #96]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006338:	4313      	orrs	r3, r2
 800633a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006348:	4b13      	ldr	r3, [pc, #76]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4910      	ldr	r1, [pc, #64]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006358:	4313      	orrs	r3, r2
 800635a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800635c:	f000 f826 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <HAL_RCC_ClockConfig+0x260>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	490c      	ldr	r1, [pc, #48]	@ (80063a0 <HAL_RCC_ClockConfig+0x268>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	4a0a      	ldr	r2, [pc, #40]	@ (80063a4 <HAL_RCC_ClockConfig+0x26c>)
 800637a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <HAL_RCC_ClockConfig+0x270>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc f9e9 	bl	8002758 <HAL_InitTick>
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]

  return status;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40022000 	.word	0x40022000
 8006398:	40021000 	.word	0x40021000
 800639c:	04c4b400 	.word	0x04c4b400
 80063a0:	0800e7ac 	.word	0x0800e7ac
 80063a4:	20000030 	.word	0x20000030
 80063a8:	200000f8 	.word	0x200000f8

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b089      	sub	sp, #36	@ 0x24
 80063b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ba:	4b3e      	ldr	r3, [pc, #248]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c4:	4b3b      	ldr	r3, [pc, #236]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x34>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d121      	bne.n	800641e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11e      	bne.n	800641e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063e0:	4b34      	ldr	r3, [pc, #208]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063ec:	4b31      	ldr	r3, [pc, #196]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	e005      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063fc:	4b2d      	ldr	r3, [pc, #180]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006408:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006410:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10d      	bne.n	8006434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d102      	bne.n	800642a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006424:	4b25      	ldr	r3, [pc, #148]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x110>)
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e004      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d101      	bne.n	8006434 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006430:	4b23      	ldr	r3, [pc, #140]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006432:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d134      	bne.n	80064a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800643a:	4b1e      	ldr	r3, [pc, #120]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d003      	beq.n	8006452 <HAL_RCC_GetSysClockFreq+0xa6>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d003      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0xac>
 8006450:	e005      	b.n	800645e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006452:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x110>)
 8006454:	617b      	str	r3, [r7, #20]
      break;
 8006456:	e005      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006458:	4b19      	ldr	r3, [pc, #100]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800645a:	617b      	str	r3, [r7, #20]
      break;
 800645c:	e002      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	617b      	str	r3, [r7, #20]
      break;
 8006462:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006464:	4b13      	ldr	r3, [pc, #76]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3301      	adds	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006472:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	fb03 f202 	mul.w	r2, r3, r2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800648a:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	0e5b      	lsrs	r3, r3, #25
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	3301      	adds	r3, #1
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064a4:	69bb      	ldr	r3, [r7, #24]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	@ 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800e7c4 	.word	0x0800e7c4
 80064bc:	00f42400 	.word	0x00f42400
 80064c0:	007a1200 	.word	0x007a1200

080064c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c8:	4b03      	ldr	r3, [pc, #12]	@ (80064d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064ca:	681b      	ldr	r3, [r3, #0]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20000030 	.word	0x20000030

080064dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064e0:	f7ff fff0 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	4904      	ldr	r1, [pc, #16]	@ (8006504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064f2:	5ccb      	ldrb	r3, [r1, r3]
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40021000 	.word	0x40021000
 8006504:	0800e7bc 	.word	0x0800e7bc

08006508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800650c:	f7ff ffda 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006510:	4602      	mov	r2, r0
 8006512:	4b06      	ldr	r3, [pc, #24]	@ (800652c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0adb      	lsrs	r3, r3, #11
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4904      	ldr	r1, [pc, #16]	@ (8006530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800651e:	5ccb      	ldrb	r3, [r1, r3]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006528:	4618      	mov	r0, r3
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40021000 	.word	0x40021000
 8006530:	0800e7bc 	.word	0x0800e7bc

08006534 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	220f      	movs	r2, #15
 8006542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCC_GetClockConfig+0x5c>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0203 	and.w	r2, r3, #3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006550:	4b0f      	ldr	r3, [pc, #60]	@ (8006590 <HAL_RCC_GetClockConfig+0x5c>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800655c:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <HAL_RCC_GetClockConfig+0x5c>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006568:	4b09      	ldr	r3, [pc, #36]	@ (8006590 <HAL_RCC_GetClockConfig+0x5c>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	08db      	lsrs	r3, r3, #3
 800656e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006576:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <HAL_RCC_GetClockConfig+0x60>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000
 8006594:	40022000 	.word	0x40022000

08006598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065a4:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065b0:	f7ff f8e4 	bl	800577c <HAL_PWREx_GetVoltageRange>
 80065b4:	6178      	str	r0, [r7, #20]
 80065b6:	e014      	b.n	80065e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065b8:	4b22      	ldr	r3, [pc, #136]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065bc:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065d0:	f7ff f8d4 	bl	800577c <HAL_PWREx_GetVoltageRange>
 80065d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80065dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e8:	d10b      	bne.n	8006602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b80      	cmp	r3, #128	@ 0x80
 80065ee:	d913      	bls.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80065f4:	d902      	bls.n	80065fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065f6:	2302      	movs	r3, #2
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e00d      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065fc:	2301      	movs	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e00a      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b7f      	cmp	r3, #127	@ 0x7f
 8006606:	d902      	bls.n	800660e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006608:	2302      	movs	r3, #2
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e004      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b70      	cmp	r3, #112	@ 0x70
 8006612:	d101      	bne.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006614:	2301      	movs	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006618:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f023 020f 	bic.w	r2, r3, #15
 8006620:	4909      	ldr	r1, [pc, #36]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006628:	4b07      	ldr	r3, [pc, #28]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d001      	beq.n	800663a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40021000 	.word	0x40021000
 8006648:	40022000 	.word	0x40022000

0800664c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006652:	4b2d      	ldr	r3, [pc, #180]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d00b      	beq.n	800667a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d825      	bhi.n	80066b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d008      	beq.n	8006680 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11f      	bne.n	80066b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006674:	4b25      	ldr	r3, [pc, #148]	@ (800670c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006676:	613b      	str	r3, [r7, #16]
    break;
 8006678:	e01f      	b.n	80066ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800667a:	4b25      	ldr	r3, [pc, #148]	@ (8006710 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800667c:	613b      	str	r3, [r7, #16]
    break;
 800667e:	e01c      	b.n	80066ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006680:	4b21      	ldr	r3, [pc, #132]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800668c:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800668e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e005      	b.n	80066a8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800669c:	4b1a      	ldr	r3, [pc, #104]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80066a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	613b      	str	r3, [r7, #16]
    break;
 80066b2:	e002      	b.n	80066ba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
    break;
 80066b8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066ba:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	3301      	adds	r3, #1
 80066c6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	fb03 f202 	mul.w	r2, r3, r2
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066e0:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	0e5b      	lsrs	r3, r3, #25
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80066fa:	683b      	ldr	r3, [r7, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40021000 	.word	0x40021000
 800670c:	00f42400 	.word	0x00f42400
 8006710:	007a1200 	.word	0x007a1200
 8006714:	0800e7c4 	.word	0x0800e7c4

08006718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006720:	2300      	movs	r3, #0
 8006722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006724:	2300      	movs	r3, #0
 8006726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006730:	2b00      	cmp	r3, #0
 8006732:	d040      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d02a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800673c:	2b80      	cmp	r3, #128	@ 0x80
 800673e:	d825      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006740:	2b60      	cmp	r3, #96	@ 0x60
 8006742:	d026      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006744:	2b60      	cmp	r3, #96	@ 0x60
 8006746:	d821      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d006      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	d81d      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d010      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006758:	e018      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800675a:	4b89      	ldr	r3, [pc, #548]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a88      	ldr	r2, [pc, #544]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006764:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006766:	e015      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fb02 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006778:	e00c      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3320      	adds	r3, #32
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fbed 	bl	8006f60 <RCCEx_PLLSAI2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800678a:	e003      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	74fb      	strb	r3, [r7, #19]
      break;
 8006790:	e000      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006794:	7cfb      	ldrb	r3, [r7, #19]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800679a:	4b79      	ldr	r3, [pc, #484]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800679c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067a0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a8:	4975      	ldr	r1, [pc, #468]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80067b0:	e001      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d047      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ca:	d030      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d0:	d82a      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d6:	d02a      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80067d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067dc:	d824      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80067e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e8:	d81e      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f2:	d010      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067f4:	e018      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067f6:	4b62      	ldr	r3, [pc, #392]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	4a61      	ldr	r2, [pc, #388]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006802:	e015      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fab4 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006814:	e00c      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3320      	adds	r3, #32
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fb9f 	bl	8006f60 <RCCEx_PLLSAI2_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	74fb      	strb	r3, [r7, #19]
      break;
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800682e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006830:	7cfb      	ldrb	r3, [r7, #19]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006836:	4b52      	ldr	r3, [pc, #328]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006838:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800683c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006844:	494e      	ldr	r1, [pc, #312]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 809f 	beq.w	800699e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006860:	2300      	movs	r3, #0
 8006862:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006864:	4b46      	ldr	r3, [pc, #280]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	4b41      	ldr	r3, [pc, #260]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687e:	4a40      	ldr	r2, [pc, #256]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006884:	6593      	str	r3, [r2, #88]	@ 0x58
 8006886:	4b3e      	ldr	r3, [pc, #248]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688e:	60bb      	str	r3, [r7, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006892:	2301      	movs	r3, #1
 8006894:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006896:	4b3b      	ldr	r3, [pc, #236]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a3a      	ldr	r2, [pc, #232]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a2:	f7fc feb5 	bl	8003610 <HAL_GetTick>
 80068a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068a8:	e009      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fc feb1 	bl	8003610 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d902      	bls.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	74fb      	strb	r3, [r7, #19]
        break;
 80068bc:	e005      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0ef      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d15b      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01f      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d019      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068ee:	4b24      	ldr	r3, [pc, #144]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068fa:	4b21      	ldr	r3, [pc, #132]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006900:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800690a:	4b1d      	ldr	r3, [pc, #116]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006910:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800691a:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d016      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc fe70 	bl	8003610 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006932:	e00b      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006934:	f7fc fe6c 	bl	8003610 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d902      	bls.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	74fb      	strb	r3, [r7, #19]
            break;
 800694a:	e006      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800694c:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0ec      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800695a:	7cfb      	ldrb	r3, [r7, #19]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006966:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006970:	4903      	ldr	r1, [pc, #12]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	74bb      	strb	r3, [r7, #18]
 800697e:	e005      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006980:	40021000 	.word	0x40021000
 8006984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	7cfb      	ldrb	r3, [r7, #19]
 800698a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800698c:	7c7b      	ldrb	r3, [r7, #17]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d105      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006992:	4ba0      	ldr	r3, [pc, #640]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006996:	4a9f      	ldr	r2, [pc, #636]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800699c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069aa:	4b9a      	ldr	r3, [pc, #616]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b0:	f023 0203 	bic.w	r2, r3, #3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b8:	4996      	ldr	r1, [pc, #600]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069cc:	4b91      	ldr	r3, [pc, #580]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f023 020c 	bic.w	r2, r3, #12
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	498e      	ldr	r1, [pc, #568]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069ee:	4b89      	ldr	r3, [pc, #548]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fc:	4985      	ldr	r1, [pc, #532]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a10:	4b80      	ldr	r3, [pc, #512]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1e:	497d      	ldr	r1, [pc, #500]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a32:	4b78      	ldr	r3, [pc, #480]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a40:	4974      	ldr	r1, [pc, #464]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a54:	4b6f      	ldr	r3, [pc, #444]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	496c      	ldr	r1, [pc, #432]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a76:	4b67      	ldr	r3, [pc, #412]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a84:	4963      	ldr	r1, [pc, #396]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a98:	4b5e      	ldr	r3, [pc, #376]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aa6:	495b      	ldr	r1, [pc, #364]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aba:	4b56      	ldr	r3, [pc, #344]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	4952      	ldr	r1, [pc, #328]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006adc:	4b4d      	ldr	r3, [pc, #308]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	494a      	ldr	r1, [pc, #296]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006afe:	4b45      	ldr	r3, [pc, #276]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0c:	4941      	ldr	r1, [pc, #260]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b20:	4b3c      	ldr	r3, [pc, #240]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b26:	f023 0203 	bic.w	r2, r3, #3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2e:	4939      	ldr	r1, [pc, #228]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d028      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b42:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b50:	4930      	ldr	r1, [pc, #192]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b60:	d106      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b62:	4b2c      	ldr	r3, [pc, #176]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4a2b      	ldr	r2, [pc, #172]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b6c:	60d3      	str	r3, [r2, #12]
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 f8f9 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b8a:	7cfb      	ldrb	r3, [r7, #19]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d04d      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ba8:	d108      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006baa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bb0:	4a18      	ldr	r2, [pc, #96]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006bba:	e012      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006bbc:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bc2:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006bcc:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bda:	490e      	ldr	r1, [pc, #56]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bea:	d106      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bec:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	60d3      	str	r3, [r2, #12]
 8006bf8:	e020      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c02:	d109      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c04:	4b03      	ldr	r3, [pc, #12]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a02      	ldr	r2, [pc, #8]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c0e:	60d3      	str	r3, [r2, #12]
 8006c10:	e014      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006c12:	bf00      	nop
 8006c14:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f8a5 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c32:	7cfb      	ldrb	r3, [r7, #19]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d028      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c48:	4b4a      	ldr	r3, [pc, #296]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c56:	4947      	ldr	r1, [pc, #284]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c66:	d106      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c68:	4b42      	ldr	r3, [pc, #264]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4a41      	ldr	r2, [pc, #260]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c72:	60d3      	str	r3, [r2, #12]
 8006c74:	e011      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c7e:	d10c      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	2101      	movs	r1, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f876 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006c96:	7cfb      	ldrb	r3, [r7, #19]
 8006c98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01e      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ca6:	4b33      	ldr	r3, [pc, #204]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb6:	492f      	ldr	r1, [pc, #188]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2102      	movs	r1, #2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f851 	bl	8006d78 <RCCEx_PLLSAI1_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cda:	7cfb      	ldrb	r3, [r7, #19]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006ce0:	7cfb      	ldrb	r3, [r7, #19]
 8006ce2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cf0:	4b20      	ldr	r3, [pc, #128]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cf6:	f023 0204 	bic.w	r2, r3, #4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d00:	491c      	ldr	r1, [pc, #112]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006d14:	4b17      	ldr	r3, [pc, #92]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d1a:	f023 0218 	bic.w	r2, r3, #24
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	4913      	ldr	r1, [pc, #76]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006d38:	4b0e      	ldr	r3, [pc, #56]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d48:	490a      	ldr	r1, [pc, #40]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d5a:	d105      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d5c:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a04      	ldr	r2, [pc, #16]	@ (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000

08006d78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d86:	4b72      	ldr	r3, [pc, #456]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00e      	beq.n	8006db0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d92:	4b6f      	ldr	r3, [pc, #444]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0203 	and.w	r2, r3, #3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d103      	bne.n	8006daa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
       ||
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d142      	bne.n	8006e30 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e03f      	b.n	8006e30 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d018      	beq.n	8006dea <RCCEx_PLLSAI1_Config+0x72>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d825      	bhi.n	8006e08 <RCCEx_PLLSAI1_Config+0x90>
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d002      	beq.n	8006dc6 <RCCEx_PLLSAI1_Config+0x4e>
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d009      	beq.n	8006dd8 <RCCEx_PLLSAI1_Config+0x60>
 8006dc4:	e020      	b.n	8006e08 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc6:	4b62      	ldr	r3, [pc, #392]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11d      	bne.n	8006e0e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd6:	e01a      	b.n	8006e0e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e013      	b.n	8006e12 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dea:	4b59      	ldr	r3, [pc, #356]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df6:	4b56      	ldr	r3, [pc, #344]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e06:	e006      	b.n	8006e16 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e004      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 0203 	bic.w	r2, r3, #3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4949      	ldr	r1, [pc, #292]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f040 8086 	bne.w	8006f44 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e38:	4b45      	ldr	r3, [pc, #276]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a44      	ldr	r2, [pc, #272]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e44:	f7fc fbe4 	bl	8003610 <HAL_GetTick>
 8006e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e4a:	e009      	b.n	8006e60 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e4c:	f7fc fbe0 	bl	8003610 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d902      	bls.n	8006e60 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e5e:	e005      	b.n	8006e6c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e60:	4b3b      	ldr	r3, [pc, #236]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1ef      	bne.n	8006e4c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d168      	bne.n	8006f44 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d113      	bne.n	8006ea0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e78:	4b35      	ldr	r3, [pc, #212]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	4b35      	ldr	r3, [pc, #212]	@ (8006f54 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6892      	ldr	r2, [r2, #8]
 8006e84:	0211      	lsls	r1, r2, #8
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68d2      	ldr	r2, [r2, #12]
 8006e8a:	06d2      	lsls	r2, r2, #27
 8006e8c:	4311      	orrs	r1, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6852      	ldr	r2, [r2, #4]
 8006e92:	3a01      	subs	r2, #1
 8006e94:	0112      	lsls	r2, r2, #4
 8006e96:	430a      	orrs	r2, r1
 8006e98:	492d      	ldr	r1, [pc, #180]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]
 8006e9e:	e02d      	b.n	8006efc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d115      	bne.n	8006ed2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6892      	ldr	r2, [r2, #8]
 8006eb2:	0211      	lsls	r1, r2, #8
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6912      	ldr	r2, [r2, #16]
 8006eb8:	0852      	lsrs	r2, r2, #1
 8006eba:	3a01      	subs	r2, #1
 8006ebc:	0552      	lsls	r2, r2, #21
 8006ebe:	4311      	orrs	r1, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6852      	ldr	r2, [r2, #4]
 8006ec4:	3a01      	subs	r2, #1
 8006ec6:	0112      	lsls	r2, r2, #4
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	4921      	ldr	r1, [pc, #132]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	610b      	str	r3, [r1, #16]
 8006ed0:	e014      	b.n	8006efc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	4b21      	ldr	r3, [pc, #132]	@ (8006f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	0211      	lsls	r1, r2, #8
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6952      	ldr	r2, [r2, #20]
 8006ee4:	0852      	lsrs	r2, r2, #1
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	0652      	lsls	r2, r2, #25
 8006eea:	4311      	orrs	r1, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6852      	ldr	r2, [r2, #4]
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	4916      	ldr	r1, [pc, #88]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006efc:	4b14      	ldr	r3, [pc, #80]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a13      	ldr	r2, [pc, #76]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f08:	f7fc fb82 	bl	8003610 <HAL_GetTick>
 8006f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f0e:	e009      	b.n	8006f24 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f10:	f7fc fb7e 	bl	8003610 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d902      	bls.n	8006f24 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	73fb      	strb	r3, [r7, #15]
          break;
 8006f22:	e005      	b.n	8006f30 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0ef      	beq.n	8006f10 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f36:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	4904      	ldr	r1, [pc, #16]	@ (8006f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	07ff800f 	.word	0x07ff800f
 8006f58:	ff9f800f 	.word	0xff9f800f
 8006f5c:	f9ff800f 	.word	0xf9ff800f

08006f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f6e:	4b72      	ldr	r3, [pc, #456]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0203 	and.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d103      	bne.n	8006f92 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d142      	bne.n	8007018 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	e03f      	b.n	8007018 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d018      	beq.n	8006fd2 <RCCEx_PLLSAI2_Config+0x72>
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d825      	bhi.n	8006ff0 <RCCEx_PLLSAI2_Config+0x90>
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d002      	beq.n	8006fae <RCCEx_PLLSAI2_Config+0x4e>
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d009      	beq.n	8006fc0 <RCCEx_PLLSAI2_Config+0x60>
 8006fac:	e020      	b.n	8006ff0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fae:	4b62      	ldr	r3, [pc, #392]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11d      	bne.n	8006ff6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fbe:	e01a      	b.n	8006ff6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d116      	bne.n	8006ffa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd0:	e013      	b.n	8006ffa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fd2:	4b59      	ldr	r3, [pc, #356]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fde:	4b56      	ldr	r3, [pc, #344]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fee:	e006      	b.n	8006ffe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e004      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007006:	4b4c      	ldr	r3, [pc, #304]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f023 0203 	bic.w	r2, r3, #3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4949      	ldr	r1, [pc, #292]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007014:	4313      	orrs	r3, r2
 8007016:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 8086 	bne.w	800712c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007020:	4b45      	ldr	r3, [pc, #276]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a44      	ldr	r2, [pc, #272]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800702a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702c:	f7fc faf0 	bl	8003610 <HAL_GetTick>
 8007030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007032:	e009      	b.n	8007048 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007034:	f7fc faec 	bl	8003610 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d902      	bls.n	8007048 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	73fb      	strb	r3, [r7, #15]
        break;
 8007046:	e005      	b.n	8007054 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007048:	4b3b      	ldr	r3, [pc, #236]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ef      	bne.n	8007034 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d168      	bne.n	800712c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d113      	bne.n	8007088 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007060:	4b35      	ldr	r3, [pc, #212]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	4b35      	ldr	r3, [pc, #212]	@ (800713c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007066:	4013      	ands	r3, r2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6892      	ldr	r2, [r2, #8]
 800706c:	0211      	lsls	r1, r2, #8
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68d2      	ldr	r2, [r2, #12]
 8007072:	06d2      	lsls	r2, r2, #27
 8007074:	4311      	orrs	r1, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6852      	ldr	r2, [r2, #4]
 800707a:	3a01      	subs	r2, #1
 800707c:	0112      	lsls	r2, r2, #4
 800707e:	430a      	orrs	r2, r1
 8007080:	492d      	ldr	r1, [pc, #180]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007082:	4313      	orrs	r3, r2
 8007084:	614b      	str	r3, [r1, #20]
 8007086:	e02d      	b.n	80070e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d115      	bne.n	80070ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800708e:	4b2a      	ldr	r3, [pc, #168]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6892      	ldr	r2, [r2, #8]
 800709a:	0211      	lsls	r1, r2, #8
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6912      	ldr	r2, [r2, #16]
 80070a0:	0852      	lsrs	r2, r2, #1
 80070a2:	3a01      	subs	r2, #1
 80070a4:	0552      	lsls	r2, r2, #21
 80070a6:	4311      	orrs	r1, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6852      	ldr	r2, [r2, #4]
 80070ac:	3a01      	subs	r2, #1
 80070ae:	0112      	lsls	r2, r2, #4
 80070b0:	430a      	orrs	r2, r1
 80070b2:	4921      	ldr	r1, [pc, #132]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	614b      	str	r3, [r1, #20]
 80070b8:	e014      	b.n	80070e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	4b21      	ldr	r3, [pc, #132]	@ (8007144 <RCCEx_PLLSAI2_Config+0x1e4>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6892      	ldr	r2, [r2, #8]
 80070c6:	0211      	lsls	r1, r2, #8
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6952      	ldr	r2, [r2, #20]
 80070cc:	0852      	lsrs	r2, r2, #1
 80070ce:	3a01      	subs	r2, #1
 80070d0:	0652      	lsls	r2, r2, #25
 80070d2:	4311      	orrs	r1, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6852      	ldr	r2, [r2, #4]
 80070d8:	3a01      	subs	r2, #1
 80070da:	0112      	lsls	r2, r2, #4
 80070dc:	430a      	orrs	r2, r1
 80070de:	4916      	ldr	r1, [pc, #88]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070e4:	4b14      	ldr	r3, [pc, #80]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f0:	f7fc fa8e 	bl	8003610 <HAL_GetTick>
 80070f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070f6:	e009      	b.n	800710c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070f8:	f7fc fa8a 	bl	8003610 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d902      	bls.n	800710c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	73fb      	strb	r3, [r7, #15]
          break;
 800710a:	e005      	b.n	8007118 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800710c:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0ef      	beq.n	80070f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800711e:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	4904      	ldr	r1, [pc, #16]	@ (8007138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007128:	4313      	orrs	r3, r2
 800712a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000
 800713c:	07ff800f 	.word	0x07ff800f
 8007140:	ff9f800f 	.word	0xff9f800f
 8007144:	f9ff800f 	.word	0xf9ff800f

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e049      	b.n	80071ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fb fa70 	bl	8002654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 faa8 	bl	80076dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e04f      	b.n	80072b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a23      	ldr	r2, [pc, #140]	@ (80072bc <HAL_TIM_Base_Start_IT+0xc4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	@ (80072c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	@ (80072d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d115      	bne.n	800729a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	4b17      	ldr	r3, [pc, #92]	@ (80072d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007276:	4013      	ands	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b06      	cmp	r3, #6
 800727e:	d015      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007286:	d011      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007298:	e008      	b.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e000      	b.n	80072ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40014000 	.word	0x40014000
 80072d4:	00010007 	.word	0x00010007

080072d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d020      	beq.n	800733c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0202 	mvn.w	r2, #2
 800730c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9bc 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9ae 	bl	800768c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9bf 	bl	80076b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d020      	beq.n	8007388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01b      	beq.n	8007388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0204 	mvn.w	r2, #4
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f996 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f988 	bl	800768c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f999 	bl	80076b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d020      	beq.n	80073d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01b      	beq.n	80073d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0208 	mvn.w	r2, #8
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f970 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f962 	bl	800768c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f973 	bl	80076b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d020      	beq.n	8007420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01b      	beq.n	8007420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0210 	mvn.w	r2, #16
 80073f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2208      	movs	r2, #8
 80073f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f94a 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f93c 	bl	800768c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f94d 	bl	80076b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00c      	beq.n	8007444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0201 	mvn.w	r2, #1
 800743c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f91a 	bl	8007678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00c      	beq.n	8007472 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb07 	bl	8007a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800748e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 faff 	bl	8007a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f907 	bl	80076c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f06f 0220 	mvn.w	r2, #32
 80074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fac7 	bl	8007a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_TIM_ConfigClockSource+0x1c>
 80074fe:	2302      	movs	r3, #2
 8007500:	e0b6      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x18a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007520:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007524:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800752c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800753e:	d03e      	beq.n	80075be <HAL_TIM_ConfigClockSource+0xd8>
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007544:	f200 8087 	bhi.w	8007656 <HAL_TIM_ConfigClockSource+0x170>
 8007548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800754c:	f000 8086 	beq.w	800765c <HAL_TIM_ConfigClockSource+0x176>
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007554:	d87f      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 8007556:	2b70      	cmp	r3, #112	@ 0x70
 8007558:	d01a      	beq.n	8007590 <HAL_TIM_ConfigClockSource+0xaa>
 800755a:	2b70      	cmp	r3, #112	@ 0x70
 800755c:	d87b      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 800755e:	2b60      	cmp	r3, #96	@ 0x60
 8007560:	d050      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0x11e>
 8007562:	2b60      	cmp	r3, #96	@ 0x60
 8007564:	d877      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 8007566:	2b50      	cmp	r3, #80	@ 0x50
 8007568:	d03c      	beq.n	80075e4 <HAL_TIM_ConfigClockSource+0xfe>
 800756a:	2b50      	cmp	r3, #80	@ 0x50
 800756c:	d873      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d058      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0x13e>
 8007572:	2b40      	cmp	r3, #64	@ 0x40
 8007574:	d86f      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 8007576:	2b30      	cmp	r3, #48	@ 0x30
 8007578:	d064      	beq.n	8007644 <HAL_TIM_ConfigClockSource+0x15e>
 800757a:	2b30      	cmp	r3, #48	@ 0x30
 800757c:	d86b      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d060      	beq.n	8007644 <HAL_TIM_ConfigClockSource+0x15e>
 8007582:	2b20      	cmp	r3, #32
 8007584:	d867      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d05c      	beq.n	8007644 <HAL_TIM_ConfigClockSource+0x15e>
 800758a:	2b10      	cmp	r3, #16
 800758c:	d05a      	beq.n	8007644 <HAL_TIM_ConfigClockSource+0x15e>
 800758e:	e062      	b.n	8007656 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075a0:	f000 f9bc 	bl	800791c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	609a      	str	r2, [r3, #8]
      break;
 80075bc:	e04f      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	f000 f9a5 	bl	800791c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075e0:	609a      	str	r2, [r3, #8]
      break;
 80075e2:	e03c      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f0:	461a      	mov	r2, r3
 80075f2:	f000 f919 	bl	8007828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2150      	movs	r1, #80	@ 0x50
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f972 	bl	80078e6 <TIM_ITRx_SetConfig>
      break;
 8007602:	e02c      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007610:	461a      	mov	r2, r3
 8007612:	f000 f938 	bl	8007886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2160      	movs	r1, #96	@ 0x60
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f962 	bl	80078e6 <TIM_ITRx_SetConfig>
      break;
 8007622:	e01c      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007630:	461a      	mov	r2, r3
 8007632:	f000 f8f9 	bl	8007828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2140      	movs	r1, #64	@ 0x40
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f952 	bl	80078e6 <TIM_ITRx_SetConfig>
      break;
 8007642:	e00c      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f000 f949 	bl	80078e6 <TIM_ITRx_SetConfig>
      break;
 8007654:	e003      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	73fb      	strb	r3, [r7, #15]
      break;
 800765a:	e000      	b.n	800765e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800765c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a46      	ldr	r2, [pc, #280]	@ (8007808 <TIM_Base_SetConfig+0x12c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fa:	d00f      	beq.n	800771c <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a43      	ldr	r2, [pc, #268]	@ (800780c <TIM_Base_SetConfig+0x130>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00b      	beq.n	800771c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a42      	ldr	r2, [pc, #264]	@ (8007810 <TIM_Base_SetConfig+0x134>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d007      	beq.n	800771c <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a41      	ldr	r2, [pc, #260]	@ (8007814 <TIM_Base_SetConfig+0x138>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a40      	ldr	r2, [pc, #256]	@ (8007818 <TIM_Base_SetConfig+0x13c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d108      	bne.n	800772e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a35      	ldr	r2, [pc, #212]	@ (8007808 <TIM_Base_SetConfig+0x12c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d01f      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773c:	d01b      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a32      	ldr	r2, [pc, #200]	@ (800780c <TIM_Base_SetConfig+0x130>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d017      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a31      	ldr	r2, [pc, #196]	@ (8007810 <TIM_Base_SetConfig+0x134>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a30      	ldr	r2, [pc, #192]	@ (8007814 <TIM_Base_SetConfig+0x138>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00f      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2f      	ldr	r2, [pc, #188]	@ (8007818 <TIM_Base_SetConfig+0x13c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00b      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2e      	ldr	r2, [pc, #184]	@ (800781c <TIM_Base_SetConfig+0x140>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2d      	ldr	r2, [pc, #180]	@ (8007820 <TIM_Base_SetConfig+0x144>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_Base_SetConfig+0x9a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2c      	ldr	r2, [pc, #176]	@ (8007824 <TIM_Base_SetConfig+0x148>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d108      	bne.n	8007788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <TIM_Base_SetConfig+0x12c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00f      	beq.n	80077d4 <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a18      	ldr	r2, [pc, #96]	@ (8007818 <TIM_Base_SetConfig+0x13c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_Base_SetConfig+0xf8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a17      	ldr	r2, [pc, #92]	@ (800781c <TIM_Base_SetConfig+0x140>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_Base_SetConfig+0xf8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_Base_SetConfig+0x144>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_Base_SetConfig+0xf8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <TIM_Base_SetConfig+0x148>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d103      	bne.n	80077dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d105      	bne.n	80077fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f023 0201 	bic.w	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]
  }
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40013400 	.word	0x40013400
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f023 030a 	bic.w	r3, r3, #10
 8007864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007886:	b480      	push	{r7}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f023 0210 	bic.w	r2, r3, #16
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	f043 0307 	orr.w	r3, r3, #7
 8007908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	609a      	str	r2, [r3, #8]
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	021a      	lsls	r2, r3, #8
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	431a      	orrs	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4313      	orrs	r3, r2
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	609a      	str	r2, [r3, #8]
}
 8007950:	bf00      	nop
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007970:	2302      	movs	r3, #2
 8007972:	e068      	b.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2e      	ldr	r2, [pc, #184]	@ (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d004      	beq.n	80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d108      	bne.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01d      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e6:	d018      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	@ (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00e      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	@ (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a13      	ldr	r2, [pc, #76]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a14      	ldr	r2, [pc, #80]	@ (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d10c      	bne.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40013400 	.word	0x40013400
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40014000 	.word	0x40014000

08007a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e042      	b.n	8007b40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fa fde5 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	@ 0x24
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fbb2 	bl	800825c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8b3 	bl	8007c64 <UART_SetConfig>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e01b      	b.n	8007b40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fc31 	bl	80083a0 <UART_CheckIdleState>
 8007b3e:	4603      	mov	r3, r0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	@ 0x28
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d17b      	bne.n	8007c5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <HAL_UART_Transmit+0x26>
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e074      	b.n	8007c5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2221      	movs	r2, #33	@ 0x21
 8007b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b82:	f7fb fd45 	bl	8003610 <HAL_GetTick>
 8007b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ba0:	d108      	bne.n	8007bb4 <HAL_UART_Transmit+0x6c>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	e003      	b.n	8007bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bbc:	e030      	b.n	8007c20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2180      	movs	r1, #128	@ 0x80
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 fc93 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e03d      	b.n	8007c5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	e007      	b.n	8007c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1c8      	bne.n	8007bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2200      	movs	r2, #0
 8007c34:	2140      	movs	r1, #64	@ 0x40
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fc5c 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e006      	b.n	8007c5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c68:	b08c      	sub	sp, #48	@ 0x30
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4baa      	ldr	r3, [pc, #680]	@ (8007f3c <UART_SetConfig+0x2d8>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a9f      	ldr	r2, [pc, #636]	@ (8007f40 <UART_SetConfig+0x2dc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007cda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	f023 010f 	bic.w	r1, r3, #15
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a90      	ldr	r2, [pc, #576]	@ (8007f44 <UART_SetConfig+0x2e0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d125      	bne.n	8007d54 <UART_SetConfig+0xf0>
 8007d08:	4b8f      	ldr	r3, [pc, #572]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d81a      	bhi.n	8007d4c <UART_SetConfig+0xe8>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0xb8>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d3d 	.word	0x08007d3d
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d45 	.word	0x08007d45
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d32:	e116      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007d34:	2302      	movs	r3, #2
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3a:	e112      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d42:	e10e      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4a:	e10a      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d52:	e106      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7c      	ldr	r2, [pc, #496]	@ (8007f4c <UART_SetConfig+0x2e8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d138      	bne.n	8007dd0 <UART_SetConfig+0x16c>
 8007d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d64:	f003 030c 	and.w	r3, r3, #12
 8007d68:	2b0c      	cmp	r3, #12
 8007d6a:	d82d      	bhi.n	8007dc8 <UART_SetConfig+0x164>
 8007d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x110>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007da9 	.word	0x08007da9
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007dc9 	.word	0x08007dc9
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dae:	e0d8      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007db0:	2302      	movs	r3, #2
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db6:	e0d4      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007db8:	2304      	movs	r3, #4
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbe:	e0d0      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc6:	e0cc      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dce:	e0c8      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f50 <UART_SetConfig+0x2ec>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d125      	bne.n	8007e26 <UART_SetConfig+0x1c2>
 8007dda:	4b5b      	ldr	r3, [pc, #364]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007de4:	2b30      	cmp	r3, #48	@ 0x30
 8007de6:	d016      	beq.n	8007e16 <UART_SetConfig+0x1b2>
 8007de8:	2b30      	cmp	r3, #48	@ 0x30
 8007dea:	d818      	bhi.n	8007e1e <UART_SetConfig+0x1ba>
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d00a      	beq.n	8007e06 <UART_SetConfig+0x1a2>
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d814      	bhi.n	8007e1e <UART_SetConfig+0x1ba>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <UART_SetConfig+0x19a>
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d008      	beq.n	8007e0e <UART_SetConfig+0x1aa>
 8007dfc:	e00f      	b.n	8007e1e <UART_SetConfig+0x1ba>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e04:	e0ad      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e06:	2302      	movs	r3, #2
 8007e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0c:	e0a9      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e0e:	2304      	movs	r3, #4
 8007e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e14:	e0a5      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e16:	2308      	movs	r3, #8
 8007e18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1c:	e0a1      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e1e:	2310      	movs	r3, #16
 8007e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e24:	e09d      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007f54 <UART_SetConfig+0x2f0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d125      	bne.n	8007e7c <UART_SetConfig+0x218>
 8007e30:	4b45      	ldr	r3, [pc, #276]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e3c:	d016      	beq.n	8007e6c <UART_SetConfig+0x208>
 8007e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e40:	d818      	bhi.n	8007e74 <UART_SetConfig+0x210>
 8007e42:	2b80      	cmp	r3, #128	@ 0x80
 8007e44:	d00a      	beq.n	8007e5c <UART_SetConfig+0x1f8>
 8007e46:	2b80      	cmp	r3, #128	@ 0x80
 8007e48:	d814      	bhi.n	8007e74 <UART_SetConfig+0x210>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <UART_SetConfig+0x1f0>
 8007e4e:	2b40      	cmp	r3, #64	@ 0x40
 8007e50:	d008      	beq.n	8007e64 <UART_SetConfig+0x200>
 8007e52:	e00f      	b.n	8007e74 <UART_SetConfig+0x210>
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5a:	e082      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	e07e      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e07a      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e076      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	e072      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a35      	ldr	r2, [pc, #212]	@ (8007f58 <UART_SetConfig+0x2f4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d12a      	bne.n	8007edc <UART_SetConfig+0x278>
 8007e86:	4b30      	ldr	r3, [pc, #192]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e94:	d01a      	beq.n	8007ecc <UART_SetConfig+0x268>
 8007e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e9a:	d81b      	bhi.n	8007ed4 <UART_SetConfig+0x270>
 8007e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea0:	d00c      	beq.n	8007ebc <UART_SetConfig+0x258>
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea6:	d815      	bhi.n	8007ed4 <UART_SetConfig+0x270>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <UART_SetConfig+0x250>
 8007eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb0:	d008      	beq.n	8007ec4 <UART_SetConfig+0x260>
 8007eb2:	e00f      	b.n	8007ed4 <UART_SetConfig+0x270>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eba:	e052      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec2:	e04e      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eca:	e04a      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed2:	e046      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eda:	e042      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <UART_SetConfig+0x2dc>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d13a      	bne.n	8007f5c <UART_SetConfig+0x2f8>
 8007ee6:	4b18      	ldr	r3, [pc, #96]	@ (8007f48 <UART_SetConfig+0x2e4>)
 8007ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ef4:	d01a      	beq.n	8007f2c <UART_SetConfig+0x2c8>
 8007ef6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007efa:	d81b      	bhi.n	8007f34 <UART_SetConfig+0x2d0>
 8007efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f00:	d00c      	beq.n	8007f1c <UART_SetConfig+0x2b8>
 8007f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f06:	d815      	bhi.n	8007f34 <UART_SetConfig+0x2d0>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <UART_SetConfig+0x2b0>
 8007f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f10:	d008      	beq.n	8007f24 <UART_SetConfig+0x2c0>
 8007f12:	e00f      	b.n	8007f34 <UART_SetConfig+0x2d0>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1a:	e022      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f22:	e01e      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007f24:	2304      	movs	r3, #4
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2a:	e01a      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f32:	e016      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007f34:	2310      	movs	r3, #16
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f3a:	e012      	b.n	8007f62 <UART_SetConfig+0x2fe>
 8007f3c:	cfff69f3 	.word	0xcfff69f3
 8007f40:	40008000 	.word	0x40008000
 8007f44:	40013800 	.word	0x40013800
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	40004400 	.word	0x40004400
 8007f50:	40004800 	.word	0x40004800
 8007f54:	40004c00 	.word	0x40004c00
 8007f58:	40005000 	.word	0x40005000
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4aae      	ldr	r2, [pc, #696]	@ (8008220 <UART_SetConfig+0x5bc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	f040 8097 	bne.w	800809c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d823      	bhi.n	8007fbe <UART_SetConfig+0x35a>
 8007f76:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <UART_SetConfig+0x318>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007fa1 	.word	0x08007fa1
 8007f80:	08007fbf 	.word	0x08007fbf
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fbf 	.word	0x08007fbf
 8007f8c:	08007faf 	.word	0x08007faf
 8007f90:	08007fbf 	.word	0x08007fbf
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	08007fbf 	.word	0x08007fbf
 8007f9c:	08007fb7 	.word	0x08007fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7fe fa9c 	bl	80064dc <HAL_RCC_GetPCLK1Freq>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fa6:	e010      	b.n	8007fca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8008224 <UART_SetConfig+0x5c0>)
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fac:	e00d      	b.n	8007fca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fae:	f7fe f9fd 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 8007fb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fb4:	e009      	b.n	8007fca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fbc:	e005      	b.n	8007fca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8130 	beq.w	8008232 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	4a94      	ldr	r2, [pc, #592]	@ (8008228 <UART_SetConfig+0x5c4>)
 8007fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	4413      	add	r3, r2
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d305      	bcc.n	8008002 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d903      	bls.n	800800a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008008:	e113      	b.n	8008232 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	2200      	movs	r2, #0
 800800e:	60bb      	str	r3, [r7, #8]
 8008010:	60fa      	str	r2, [r7, #12]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	4a84      	ldr	r2, [pc, #528]	@ (8008228 <UART_SetConfig+0x5c4>)
 8008018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801c:	b29b      	uxth	r3, r3
 800801e:	2200      	movs	r2, #0
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008028:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800802c:	f7f8 fe44 	bl	8000cb8 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4610      	mov	r0, r2
 8008036:	4619      	mov	r1, r3
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	020b      	lsls	r3, r1, #8
 8008042:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008046:	0202      	lsls	r2, r0, #8
 8008048:	6979      	ldr	r1, [r7, #20]
 800804a:	6849      	ldr	r1, [r1, #4]
 800804c:	0849      	lsrs	r1, r1, #1
 800804e:	2000      	movs	r0, #0
 8008050:	460c      	mov	r4, r1
 8008052:	4605      	mov	r5, r0
 8008054:	eb12 0804 	adds.w	r8, r2, r4
 8008058:	eb43 0905 	adc.w	r9, r3, r5
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	469a      	mov	sl, r3
 8008064:	4693      	mov	fp, r2
 8008066:	4652      	mov	r2, sl
 8008068:	465b      	mov	r3, fp
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 fe23 	bl	8000cb8 <__aeabi_uldivmod>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4613      	mov	r3, r2
 8008078:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008080:	d308      	bcc.n	8008094 <UART_SetConfig+0x430>
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008088:	d204      	bcs.n	8008094 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6a3a      	ldr	r2, [r7, #32]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	e0ce      	b.n	8008232 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800809a:	e0ca      	b.n	8008232 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a4:	d166      	bne.n	8008174 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80080a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d827      	bhi.n	80080fe <UART_SetConfig+0x49a>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <UART_SetConfig+0x450>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080e1 	.word	0x080080e1
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	080080ff 	.word	0x080080ff
 80080c4:	080080ef 	.word	0x080080ef
 80080c8:	080080ff 	.word	0x080080ff
 80080cc:	080080ff 	.word	0x080080ff
 80080d0:	080080ff 	.word	0x080080ff
 80080d4:	080080f7 	.word	0x080080f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d8:	f7fe fa00 	bl	80064dc <HAL_RCC_GetPCLK1Freq>
 80080dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080de:	e014      	b.n	800810a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e0:	f7fe fa12 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080e6:	e010      	b.n	800810a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008224 <UART_SetConfig+0x5c0>)
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080ec:	e00d      	b.n	800810a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ee:	f7fe f95d 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 80080f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080f4:	e009      	b.n	800810a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080fc:	e005      	b.n	800810a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8090 	beq.w	8008232 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008116:	4a44      	ldr	r2, [pc, #272]	@ (8008228 <UART_SetConfig+0x5c4>)
 8008118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800811c:	461a      	mov	r2, r3
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	fbb3 f3f2 	udiv	r3, r3, r2
 8008124:	005a      	lsls	r2, r3, #1
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	441a      	add	r2, r3
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	2b0f      	cmp	r3, #15
 800813c:	d916      	bls.n	800816c <UART_SetConfig+0x508>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008144:	d212      	bcs.n	800816c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f023 030f 	bic.w	r3, r3, #15
 800814e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	b29a      	uxth	r2, r3
 800815c:	8bfb      	ldrh	r3, [r7, #30]
 800815e:	4313      	orrs	r3, r2
 8008160:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	8bfa      	ldrh	r2, [r7, #30]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e062      	b.n	8008232 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008172:	e05e      	b.n	8008232 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008174:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008178:	2b08      	cmp	r3, #8
 800817a:	d828      	bhi.n	80081ce <UART_SetConfig+0x56a>
 800817c:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <UART_SetConfig+0x520>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081b1 	.word	0x080081b1
 800818c:	080081b9 	.word	0x080081b9
 8008190:	080081cf 	.word	0x080081cf
 8008194:	080081bf 	.word	0x080081bf
 8008198:	080081cf 	.word	0x080081cf
 800819c:	080081cf 	.word	0x080081cf
 80081a0:	080081cf 	.word	0x080081cf
 80081a4:	080081c7 	.word	0x080081c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a8:	f7fe f998 	bl	80064dc <HAL_RCC_GetPCLK1Freq>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ae:	e014      	b.n	80081da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe f9aa 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 80081b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081b6:	e010      	b.n	80081da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <UART_SetConfig+0x5c0>)
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081bc:	e00d      	b.n	80081da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081be:	f7fe f8f5 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 80081c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081c4:	e009      	b.n	80081da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081cc:	e005      	b.n	80081da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081d8:	bf00      	nop
    }

    if (pclk != 0U)
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d028      	beq.n	8008232 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e4:	4a10      	ldr	r2, [pc, #64]	@ (8008228 <UART_SetConfig+0x5c4>)
 80081e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ea:	461a      	mov	r2, r3
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	441a      	add	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008202:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d910      	bls.n	800822c <UART_SetConfig+0x5c8>
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008210:	d20c      	bcs.n	800822c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	b29a      	uxth	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e009      	b.n	8008232 <UART_SetConfig+0x5ce>
 800821e:	bf00      	nop
 8008220:	40008000 	.word	0x40008000
 8008224:	00f42400 	.word	0x00f42400
 8008228:	0800e7f4 	.word	0x0800e7f4
      }
      else
      {
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2201      	movs	r2, #1
 8008236:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2201      	movs	r2, #1
 800823e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2200      	movs	r2, #0
 800824c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800824e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008252:	4618      	mov	r0, r3
 8008254:	3730      	adds	r7, #48	@ 0x30
 8008256:	46bd      	mov	sp, r7
 8008258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800825c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01a      	beq.n	8008372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800835a:	d10a      	bne.n	8008372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]
  }
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b098      	sub	sp, #96	@ 0x60
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083b0:	f7fb f92e 	bl	8003610 <HAL_GetTick>
 80083b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d12f      	bne.n	8008424 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083cc:	2200      	movs	r2, #0
 80083ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f88e 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d022      	beq.n	8008424 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800840a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e063      	b.n	80084ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b04      	cmp	r3, #4
 8008430:	d149      	bne.n	80084c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008432:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800843a:	2200      	movs	r2, #0
 800843c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f857 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d03c      	beq.n	80084c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	623b      	str	r3, [r7, #32]
   return(result);
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846a:	633b      	str	r3, [r7, #48]	@ 0x30
 800846c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	60fb      	str	r3, [r7, #12]
   return(result);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800849e:	61fa      	str	r2, [r7, #28]
 80084a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	69b9      	ldr	r1, [r7, #24]
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	617b      	str	r3, [r7, #20]
   return(result);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e012      	b.n	80084ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3758      	adds	r7, #88	@ 0x58
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008504:	e04f      	b.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800850c:	d04b      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850e:	f7fb f87f 	bl	8003610 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <UART_WaitOnFlagUntilTimeout+0x30>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e04e      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d037      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b80      	cmp	r3, #128	@ 0x80
 800853a:	d034      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b40      	cmp	r3, #64	@ 0x40
 8008540:	d031      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b08      	cmp	r3, #8
 800854e:	d110      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2208      	movs	r2, #8
 8008556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f838 	bl	80085ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2208      	movs	r2, #8
 8008562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e029      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008580:	d111      	bne.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800858a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f81e 	bl	80085ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e00f      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	bf0c      	ite	eq
 80085b6:	2301      	moveq	r3, #1
 80085b8:	2300      	movne	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d0a0      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b095      	sub	sp, #84	@ 0x54
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	61fb      	str	r3, [r7, #28]
   return(result);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800861e:	f023 0301 	bic.w	r3, r3, #1
 8008622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800862c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800862e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e3      	bne.n	8008608 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d118      	bne.n	800867a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	60bb      	str	r3, [r7, #8]
   return(result);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f023 0310 	bic.w	r3, r3, #16
 800865c:	647b      	str	r3, [r7, #68]	@ 0x44
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	613b      	str	r3, [r7, #16]
   return(result);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e6      	bne.n	8008648 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800868e:	bf00      	nop
 8008690:	3754      	adds	r7, #84	@ 0x54
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e027      	b.n	8008700 <HAL_UARTEx_DisableFifoMode+0x66>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2224      	movs	r2, #36	@ 0x24
 80086bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0201 	bic.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80086de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008720:	2302      	movs	r3, #2
 8008722:	e02d      	b.n	8008780 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2224      	movs	r2, #36	@ 0x24
 8008730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0201 	bic.w	r2, r2, #1
 800874a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f84f 	bl	8008804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800879c:	2302      	movs	r3, #2
 800879e:	e02d      	b.n	80087fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2224      	movs	r2, #36	@ 0x24
 80087ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f811 	bl	8008804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008810:	2b00      	cmp	r3, #0
 8008812:	d108      	bne.n	8008826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008824:	e031      	b.n	800888a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008826:	2308      	movs	r3, #8
 8008828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800882a:	2308      	movs	r3, #8
 800882c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	0e5b      	lsrs	r3, r3, #25
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	0f5b      	lsrs	r3, r3, #29
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	7b3a      	ldrb	r2, [r7, #12]
 8008852:	4911      	ldr	r1, [pc, #68]	@ (8008898 <UARTEx_SetNbDataToProcess+0x94>)
 8008854:	5c8a      	ldrb	r2, [r1, r2]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800885a:	7b3a      	ldrb	r2, [r7, #12]
 800885c:	490f      	ldr	r1, [pc, #60]	@ (800889c <UARTEx_SetNbDataToProcess+0x98>)
 800885e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008860:	fb93 f3f2 	sdiv	r3, r3, r2
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	7b7a      	ldrb	r2, [r7, #13]
 8008870:	4909      	ldr	r1, [pc, #36]	@ (8008898 <UARTEx_SetNbDataToProcess+0x94>)
 8008872:	5c8a      	ldrb	r2, [r1, r2]
 8008874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008878:	7b7a      	ldrb	r2, [r7, #13]
 800887a:	4908      	ldr	r1, [pc, #32]	@ (800889c <UARTEx_SetNbDataToProcess+0x98>)
 800887c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800887e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	0800e80c 	.word	0x0800e80c
 800889c:	0800e814 	.word	0x0800e814

080088a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80088ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088b2:	2b84      	cmp	r3, #132	@ 0x84
 80088b4:	d005      	beq.n	80088c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80088b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	3303      	adds	r3, #3
 80088c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80088c2:	68fb      	ldr	r3, [r7, #12]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80088d4:	f000 fae4 	bl	8008ea0 <vTaskStartScheduler>
  
  return osOK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	bd80      	pop	{r7, pc}

080088de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80088de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e0:	b089      	sub	sp, #36	@ 0x24
 80088e2:	af04      	add	r7, sp, #16
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d020      	beq.n	8008932 <osThreadCreate+0x54>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01c      	beq.n	8008932 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685c      	ldr	r4, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691e      	ldr	r6, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ffc8 	bl	80088a0 <makeFreeRtosPriority>
 8008910:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800891a:	9202      	str	r2, [sp, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	9100      	str	r1, [sp, #0]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	4632      	mov	r2, r6
 8008924:	4629      	mov	r1, r5
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f8ed 	bl	8008b06 <xTaskCreateStatic>
 800892c:	4603      	mov	r3, r0
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e01c      	b.n	800896c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685c      	ldr	r4, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800893e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff ffaa 	bl	80088a0 <makeFreeRtosPriority>
 800894c:	4602      	mov	r2, r0
 800894e:	f107 030c 	add.w	r3, r7, #12
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	9200      	str	r2, [sp, #0]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	4632      	mov	r2, r6
 800895a:	4629      	mov	r1, r5
 800895c:	4620      	mov	r0, r4
 800895e:	f000 f932 	bl	8008bc6 <xTaskCreate>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d001      	beq.n	800896c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	e000      	b.n	800896e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800896c:	68fb      	ldr	r3, [r7, #12]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008976 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <osDelay+0x16>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	e000      	b.n	800898e <osDelay+0x18>
 800898c:	2301      	movs	r3, #1
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fa50 	bl	8008e34 <vTaskDelay>
  
  return osOK;
 8008994:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f103 0208 	add.w	r2, r3, #8
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f103 0208 	add.w	r2, r3, #8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f103 0208 	add.w	r2, r3, #8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a56:	d103      	bne.n	8008a60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	e00c      	b.n	8008a7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3308      	adds	r3, #8
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e002      	b.n	8008a6e <vListInsert+0x2e>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d2f6      	bcs.n	8008a68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6892      	ldr	r2, [r2, #8]
 8008ac8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6852      	ldr	r2, [r2, #4]
 8008ad2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d103      	bne.n	8008ae6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	1e5a      	subs	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b08e      	sub	sp, #56	@ 0x38
 8008b0a:	af04      	add	r7, sp, #16
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	e7fd      	b.n	8008b2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	61fb      	str	r3, [r7, #28]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b50:	2354      	movs	r3, #84	@ 0x54
 8008b52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b54      	cmp	r3, #84	@ 0x54
 8008b58:	d00b      	beq.n	8008b72 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	61bb      	str	r3, [r7, #24]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01e      	beq.n	8008bb8 <xTaskCreateStatic+0xb2>
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01b      	beq.n	8008bb8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b88:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b92:	2300      	movs	r3, #0
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	f107 0314 	add.w	r3, r7, #20
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f850 	bl	8008c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bb2:	f000 f8d5 	bl	8008d60 <prvAddNewTaskToReadyList>
 8008bb6:	e001      	b.n	8008bbc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bbc:	697b      	ldr	r3, [r7, #20]
	}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3728      	adds	r7, #40	@ 0x28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b08c      	sub	sp, #48	@ 0x30
 8008bca:	af04      	add	r7, sp, #16
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fed4 	bl	8009988 <pvPortMalloc>
 8008be0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008be8:	2054      	movs	r0, #84	@ 0x54
 8008bea:	f000 fecd 	bl	8009988 <pvPortMalloc>
 8008bee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bfc:	e005      	b.n	8008c0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bfe:	6978      	ldr	r0, [r7, #20]
 8008c00:	f000 ff90 	bl	8009b24 <vPortFree>
 8008c04:	e001      	b.n	8008c0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d017      	beq.n	8008c40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9303      	str	r3, [sp, #12]
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	9302      	str	r3, [sp, #8]
 8008c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f80e 	bl	8008c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c34:	69f8      	ldr	r0, [r7, #28]
 8008c36:	f000 f893 	bl	8008d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	e002      	b.n	8008c46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c46:	69bb      	ldr	r3, [r7, #24]
	}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f023 0307 	bic.w	r3, r3, #7
 8008c76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01f      	beq.n	8008ce0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e012      	b.n	8008ccc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	7819      	ldrb	r1, [r3, #0]
 8008cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3334      	adds	r3, #52	@ 0x34
 8008cb6:	460a      	mov	r2, r1
 8008cb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d006      	beq.n	8008cd4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d9e9      	bls.n	8008ca6 <prvInitialiseNewTask+0x56>
 8008cd2:	e000      	b.n	8008cd6 <prvInitialiseNewTask+0x86>
			{
				break;
 8008cd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cde:	e003      	b.n	8008ce8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d901      	bls.n	8008cf2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cee:	2306      	movs	r3, #6
 8008cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cfc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	2200      	movs	r2, #0
 8008d02:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	3304      	adds	r3, #4
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fe68 	bl	80089de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	3318      	adds	r3, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fe63 	bl	80089de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	f1c3 0207 	rsb	r2, r3, #7
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	2200      	movs	r2, #0
 8008d32:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	69b8      	ldr	r0, [r7, #24]
 8008d42:	f000 fc0d 	bl	8009560 <pxPortInitialiseStack>
 8008d46:	4602      	mov	r2, r0
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d58:	bf00      	nop
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d68:	f000 fd2e 	bl	80097c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e18 <prvAddNewTaskToReadyList+0xb8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	4a29      	ldr	r2, [pc, #164]	@ (8008e18 <prvAddNewTaskToReadyList+0xb8>)
 8008d74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d76:	4b29      	ldr	r3, [pc, #164]	@ (8008e1c <prvAddNewTaskToReadyList+0xbc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d7e:	4a27      	ldr	r2, [pc, #156]	@ (8008e1c <prvAddNewTaskToReadyList+0xbc>)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d84:	4b24      	ldr	r3, [pc, #144]	@ (8008e18 <prvAddNewTaskToReadyList+0xb8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d110      	bne.n	8008dae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d8c:	f000 fac4 	bl	8009318 <prvInitialiseTaskLists>
 8008d90:	e00d      	b.n	8008dae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d92:	4b23      	ldr	r3, [pc, #140]	@ (8008e20 <prvAddNewTaskToReadyList+0xc0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d9a:	4b20      	ldr	r3, [pc, #128]	@ (8008e1c <prvAddNewTaskToReadyList+0xbc>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d802      	bhi.n	8008dae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008da8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e1c <prvAddNewTaskToReadyList+0xbc>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dae:	4b1d      	ldr	r3, [pc, #116]	@ (8008e24 <prvAddNewTaskToReadyList+0xc4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e24 <prvAddNewTaskToReadyList+0xc4>)
 8008db6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	409a      	lsls	r2, r3
 8008dc0:	4b19      	ldr	r3, [pc, #100]	@ (8008e28 <prvAddNewTaskToReadyList+0xc8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	4a18      	ldr	r2, [pc, #96]	@ (8008e28 <prvAddNewTaskToReadyList+0xc8>)
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4a15      	ldr	r2, [pc, #84]	@ (8008e2c <prvAddNewTaskToReadyList+0xcc>)
 8008dd8:	441a      	add	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f7ff fe09 	bl	80089f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008de6:	f000 fd21 	bl	800982c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dea:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <prvAddNewTaskToReadyList+0xc0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00e      	beq.n	8008e10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <prvAddNewTaskToReadyList+0xbc>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d207      	bcs.n	8008e10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <prvAddNewTaskToReadyList+0xd0>)
 8008e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000be4 	.word	0x20000be4
 8008e1c:	20000ae4 	.word	0x20000ae4
 8008e20:	20000bf0 	.word	0x20000bf0
 8008e24:	20000c00 	.word	0x20000c00
 8008e28:	20000bec 	.word	0x20000bec
 8008e2c:	20000ae8 	.word	0x20000ae8
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d018      	beq.n	8008e78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e46:	4b14      	ldr	r3, [pc, #80]	@ (8008e98 <vTaskDelay+0x64>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00b      	beq.n	8008e66 <vTaskDelay+0x32>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	60bb      	str	r3, [r7, #8]
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	e7fd      	b.n	8008e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e66:	f000 f87d 	bl	8008f64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb11 	bl	8009494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e72:	f000 f885 	bl	8008f80 <xTaskResumeAll>
 8008e76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d107      	bne.n	8008e8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e7e:	4b07      	ldr	r3, [pc, #28]	@ (8008e9c <vTaskDelay+0x68>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000c0c 	.word	0x20000c0c
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	@ 0x28
 8008ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008eae:	463a      	mov	r2, r7
 8008eb0:	1d39      	adds	r1, r7, #4
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f8 f8ac 	bl	8001014 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	9202      	str	r2, [sp, #8]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	460a      	mov	r2, r1
 8008ece:	491f      	ldr	r1, [pc, #124]	@ (8008f4c <vTaskStartScheduler+0xac>)
 8008ed0:	481f      	ldr	r0, [pc, #124]	@ (8008f50 <vTaskStartScheduler+0xb0>)
 8008ed2:	f7ff fe18 	bl	8008b06 <xTaskCreateStatic>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f54 <vTaskStartScheduler+0xb4>)
 8008eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008edc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <vTaskStartScheduler+0xb4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	e001      	b.n	8008eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d116      	bne.n	8008f22 <vTaskStartScheduler+0x82>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	613b      	str	r3, [r7, #16]
}
 8008f06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f08:	4b13      	ldr	r3, [pc, #76]	@ (8008f58 <vTaskStartScheduler+0xb8>)
 8008f0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f10:	4b12      	ldr	r3, [pc, #72]	@ (8008f5c <vTaskStartScheduler+0xbc>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f16:	4b12      	ldr	r3, [pc, #72]	@ (8008f60 <vTaskStartScheduler+0xc0>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f1c:	f000 fbb0 	bl	8009680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f20:	e00f      	b.n	8008f42 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f28:	d10b      	bne.n	8008f42 <vTaskStartScheduler+0xa2>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	60fb      	str	r3, [r7, #12]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <vTaskStartScheduler+0x9e>
}
 8008f42:	bf00      	nop
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800e7a4 	.word	0x0800e7a4
 8008f50:	080092e9 	.word	0x080092e9
 8008f54:	20000c08 	.word	0x20000c08
 8008f58:	20000c04 	.word	0x20000c04
 8008f5c:	20000bf0 	.word	0x20000bf0
 8008f60:	20000be8 	.word	0x20000be8

08008f64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f68:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <vTaskSuspendAll+0x18>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	4a03      	ldr	r2, [pc, #12]	@ (8008f7c <vTaskSuspendAll+0x18>)
 8008f70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f72:	bf00      	nop
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20000c0c 	.word	0x20000c0c

08008f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f8e:	4b42      	ldr	r3, [pc, #264]	@ (8009098 <xTaskResumeAll+0x118>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <xTaskResumeAll+0x2e>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	603b      	str	r3, [r7, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fae:	f000 fc0b 	bl	80097c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fb2:	4b39      	ldr	r3, [pc, #228]	@ (8009098 <xTaskResumeAll+0x118>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a37      	ldr	r2, [pc, #220]	@ (8009098 <xTaskResumeAll+0x118>)
 8008fba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fbc:	4b36      	ldr	r3, [pc, #216]	@ (8009098 <xTaskResumeAll+0x118>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d161      	bne.n	8009088 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fc4:	4b35      	ldr	r3, [pc, #212]	@ (800909c <xTaskResumeAll+0x11c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d05d      	beq.n	8009088 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fcc:	e02e      	b.n	800902c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fce:	4b34      	ldr	r3, [pc, #208]	@ (80090a0 <xTaskResumeAll+0x120>)
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3318      	adds	r3, #24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fd69 	bl	8008ab2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fd64 	bl	8008ab2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	2201      	movs	r2, #1
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80090a4 <xTaskResumeAll+0x124>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80090a4 <xTaskResumeAll+0x124>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a27      	ldr	r2, [pc, #156]	@ (80090a8 <xTaskResumeAll+0x128>)
 800900a:	441a      	add	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7ff fcf0 	bl	80089f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901c:	4b23      	ldr	r3, [pc, #140]	@ (80090ac <xTaskResumeAll+0x12c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009026:	4b22      	ldr	r3, [pc, #136]	@ (80090b0 <xTaskResumeAll+0x130>)
 8009028:	2201      	movs	r2, #1
 800902a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800902c:	4b1c      	ldr	r3, [pc, #112]	@ (80090a0 <xTaskResumeAll+0x120>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1cc      	bne.n	8008fce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800903a:	f000 fa0b 	bl	8009454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800903e:	4b1d      	ldr	r3, [pc, #116]	@ (80090b4 <xTaskResumeAll+0x134>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d010      	beq.n	800906c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800904a:	f000 f837 	bl	80090bc <xTaskIncrementTick>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009054:	4b16      	ldr	r3, [pc, #88]	@ (80090b0 <xTaskResumeAll+0x130>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f1      	bne.n	800904a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <xTaskResumeAll+0x134>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800906c:	4b10      	ldr	r3, [pc, #64]	@ (80090b0 <xTaskResumeAll+0x130>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d009      	beq.n	8009088 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009078:	4b0f      	ldr	r3, [pc, #60]	@ (80090b8 <xTaskResumeAll+0x138>)
 800907a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009088:	f000 fbd0 	bl	800982c <vPortExitCritical>

	return xAlreadyYielded;
 800908c:	68bb      	ldr	r3, [r7, #8]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000c0c 	.word	0x20000c0c
 800909c:	20000be4 	.word	0x20000be4
 80090a0:	20000ba4 	.word	0x20000ba4
 80090a4:	20000bec 	.word	0x20000bec
 80090a8:	20000ae8 	.word	0x20000ae8
 80090ac:	20000ae4 	.word	0x20000ae4
 80090b0:	20000bf8 	.word	0x20000bf8
 80090b4:	20000bf4 	.word	0x20000bf4
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009204 <xTaskIncrementTick+0x148>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 808f 	bne.w	80091ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009208 <xTaskIncrementTick+0x14c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3301      	adds	r3, #1
 80090d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090d8:	4a4b      	ldr	r2, [pc, #300]	@ (8009208 <xTaskIncrementTick+0x14c>)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d121      	bne.n	8009128 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80090e4:	4b49      	ldr	r3, [pc, #292]	@ (800920c <xTaskIncrementTick+0x150>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <xTaskIncrementTick+0x4a>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	603b      	str	r3, [r7, #0]
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	e7fd      	b.n	8009102 <xTaskIncrementTick+0x46>
 8009106:	4b41      	ldr	r3, [pc, #260]	@ (800920c <xTaskIncrementTick+0x150>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	4b40      	ldr	r3, [pc, #256]	@ (8009210 <xTaskIncrementTick+0x154>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a3e      	ldr	r2, [pc, #248]	@ (800920c <xTaskIncrementTick+0x150>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	4a3e      	ldr	r2, [pc, #248]	@ (8009210 <xTaskIncrementTick+0x154>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	4b3e      	ldr	r3, [pc, #248]	@ (8009214 <xTaskIncrementTick+0x158>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3301      	adds	r3, #1
 8009120:	4a3c      	ldr	r2, [pc, #240]	@ (8009214 <xTaskIncrementTick+0x158>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	f000 f996 	bl	8009454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009128:	4b3b      	ldr	r3, [pc, #236]	@ (8009218 <xTaskIncrementTick+0x15c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	429a      	cmp	r2, r3
 8009130:	d348      	bcc.n	80091c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009132:	4b36      	ldr	r3, [pc, #216]	@ (800920c <xTaskIncrementTick+0x150>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913c:	4b36      	ldr	r3, [pc, #216]	@ (8009218 <xTaskIncrementTick+0x15c>)
 800913e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009142:	601a      	str	r2, [r3, #0]
					break;
 8009144:	e03e      	b.n	80091c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009146:	4b31      	ldr	r3, [pc, #196]	@ (800920c <xTaskIncrementTick+0x150>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d203      	bcs.n	8009166 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800915e:	4a2e      	ldr	r2, [pc, #184]	@ (8009218 <xTaskIncrementTick+0x15c>)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009164:	e02e      	b.n	80091c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fca1 	bl	8008ab2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3318      	adds	r3, #24
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fc98 	bl	8008ab2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009186:	2201      	movs	r2, #1
 8009188:	409a      	lsls	r2, r3
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <xTaskIncrementTick+0x160>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4313      	orrs	r3, r2
 8009190:	4a22      	ldr	r2, [pc, #136]	@ (800921c <xTaskIncrementTick+0x160>)
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <xTaskIncrementTick+0x164>)
 80091a2:	441a      	add	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f7ff fc24 	bl	80089f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009224 <xTaskIncrementTick+0x168>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3b9      	bcc.n	8009132 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80091be:	2301      	movs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c2:	e7b6      	b.n	8009132 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091c4:	4b17      	ldr	r3, [pc, #92]	@ (8009224 <xTaskIncrementTick+0x168>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ca:	4915      	ldr	r1, [pc, #84]	@ (8009220 <xTaskIncrementTick+0x164>)
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	440b      	add	r3, r1
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d901      	bls.n	80091e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091e0:	4b11      	ldr	r3, [pc, #68]	@ (8009228 <xTaskIncrementTick+0x16c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	e004      	b.n	80091f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	@ (800922c <xTaskIncrementTick+0x170>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a0d      	ldr	r2, [pc, #52]	@ (800922c <xTaskIncrementTick+0x170>)
 80091f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091f8:	697b      	ldr	r3, [r7, #20]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000c0c 	.word	0x20000c0c
 8009208:	20000be8 	.word	0x20000be8
 800920c:	20000b9c 	.word	0x20000b9c
 8009210:	20000ba0 	.word	0x20000ba0
 8009214:	20000bfc 	.word	0x20000bfc
 8009218:	20000c04 	.word	0x20000c04
 800921c:	20000bec 	.word	0x20000bec
 8009220:	20000ae8 	.word	0x20000ae8
 8009224:	20000ae4 	.word	0x20000ae4
 8009228:	20000bf8 	.word	0x20000bf8
 800922c:	20000bf4 	.word	0x20000bf4

08009230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009236:	4b27      	ldr	r3, [pc, #156]	@ (80092d4 <vTaskSwitchContext+0xa4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800923e:	4b26      	ldr	r3, [pc, #152]	@ (80092d8 <vTaskSwitchContext+0xa8>)
 8009240:	2201      	movs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009244:	e040      	b.n	80092c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009246:	4b24      	ldr	r3, [pc, #144]	@ (80092d8 <vTaskSwitchContext+0xa8>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924c:	4b23      	ldr	r3, [pc, #140]	@ (80092dc <vTaskSwitchContext+0xac>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	fab3 f383 	clz	r3, r3
 8009258:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	f1c3 031f 	rsb	r3, r3, #31
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	491f      	ldr	r1, [pc, #124]	@ (80092e0 <vTaskSwitchContext+0xb0>)
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10b      	bne.n	800928e <vTaskSwitchContext+0x5e>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	607b      	str	r3, [r7, #4]
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <vTaskSwitchContext+0x5a>
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4a11      	ldr	r2, [pc, #68]	@ (80092e0 <vTaskSwitchContext+0xb0>)
 800929a:	4413      	add	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	3308      	adds	r3, #8
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d104      	bne.n	80092be <vTaskSwitchContext+0x8e>
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	605a      	str	r2, [r3, #4]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	4a07      	ldr	r2, [pc, #28]	@ (80092e4 <vTaskSwitchContext+0xb4>)
 80092c6:	6013      	str	r3, [r2, #0]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	20000c0c 	.word	0x20000c0c
 80092d8:	20000bf8 	.word	0x20000bf8
 80092dc:	20000bec 	.word	0x20000bec
 80092e0:	20000ae8 	.word	0x20000ae8
 80092e4:	20000ae4 	.word	0x20000ae4

080092e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092f0:	f000 f852 	bl	8009398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092f4:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <prvIdleTask+0x28>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d9f9      	bls.n	80092f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092fc:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <prvIdleTask+0x2c>)
 80092fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800930c:	e7f0      	b.n	80092f0 <prvIdleTask+0x8>
 800930e:	bf00      	nop
 8009310:	20000ae8 	.word	0x20000ae8
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	e00c      	b.n	800933e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4a12      	ldr	r2, [pc, #72]	@ (8009378 <prvInitialiseTaskLists+0x60>)
 8009330:	4413      	add	r3, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff fb33 	bl	800899e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3301      	adds	r3, #1
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b06      	cmp	r3, #6
 8009342:	d9ef      	bls.n	8009324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009344:	480d      	ldr	r0, [pc, #52]	@ (800937c <prvInitialiseTaskLists+0x64>)
 8009346:	f7ff fb2a 	bl	800899e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800934a:	480d      	ldr	r0, [pc, #52]	@ (8009380 <prvInitialiseTaskLists+0x68>)
 800934c:	f7ff fb27 	bl	800899e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009350:	480c      	ldr	r0, [pc, #48]	@ (8009384 <prvInitialiseTaskLists+0x6c>)
 8009352:	f7ff fb24 	bl	800899e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009356:	480c      	ldr	r0, [pc, #48]	@ (8009388 <prvInitialiseTaskLists+0x70>)
 8009358:	f7ff fb21 	bl	800899e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800935c:	480b      	ldr	r0, [pc, #44]	@ (800938c <prvInitialiseTaskLists+0x74>)
 800935e:	f7ff fb1e 	bl	800899e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009362:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <prvInitialiseTaskLists+0x78>)
 8009364:	4a05      	ldr	r2, [pc, #20]	@ (800937c <prvInitialiseTaskLists+0x64>)
 8009366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009368:	4b0a      	ldr	r3, [pc, #40]	@ (8009394 <prvInitialiseTaskLists+0x7c>)
 800936a:	4a05      	ldr	r2, [pc, #20]	@ (8009380 <prvInitialiseTaskLists+0x68>)
 800936c:	601a      	str	r2, [r3, #0]
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000ae8 	.word	0x20000ae8
 800937c:	20000b74 	.word	0x20000b74
 8009380:	20000b88 	.word	0x20000b88
 8009384:	20000ba4 	.word	0x20000ba4
 8009388:	20000bb8 	.word	0x20000bb8
 800938c:	20000bd0 	.word	0x20000bd0
 8009390:	20000b9c 	.word	0x20000b9c
 8009394:	20000ba0 	.word	0x20000ba0

08009398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800939e:	e019      	b.n	80093d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093a0:	f000 fa12 	bl	80097c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a4:	4b10      	ldr	r3, [pc, #64]	@ (80093e8 <prvCheckTasksWaitingTermination+0x50>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fb7e 	bl	8008ab2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <prvCheckTasksWaitingTermination+0x54>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	4a0b      	ldr	r2, [pc, #44]	@ (80093ec <prvCheckTasksWaitingTermination+0x54>)
 80093be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093c0:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <prvCheckTasksWaitingTermination+0x58>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	4a0a      	ldr	r2, [pc, #40]	@ (80093f0 <prvCheckTasksWaitingTermination+0x58>)
 80093c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093ca:	f000 fa2f 	bl	800982c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f810 	bl	80093f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <prvCheckTasksWaitingTermination+0x58>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e1      	bne.n	80093a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000bb8 	.word	0x20000bb8
 80093ec:	20000be4 	.word	0x20000be4
 80093f0:	20000bcc 	.word	0x20000bcc

080093f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009402:	2b00      	cmp	r3, #0
 8009404:	d108      	bne.n	8009418 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb8a 	bl	8009b24 <vPortFree>
				vPortFree( pxTCB );
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fb87 	bl	8009b24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009416:	e019      	b.n	800944c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800941e:	2b01      	cmp	r3, #1
 8009420:	d103      	bne.n	800942a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fb7e 	bl	8009b24 <vPortFree>
	}
 8009428:	e010      	b.n	800944c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009430:	2b02      	cmp	r3, #2
 8009432:	d00b      	beq.n	800944c <prvDeleteTCB+0x58>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
}
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	e7fd      	b.n	8009448 <prvDeleteTCB+0x54>
	}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800945a:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <prvResetNextTaskUnblockTime+0x38>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d104      	bne.n	800946e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009464:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <prvResetNextTaskUnblockTime+0x3c>)
 8009466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800946c:	e008      	b.n	8009480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b07      	ldr	r3, [pc, #28]	@ (800948c <prvResetNextTaskUnblockTime+0x38>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4a04      	ldr	r2, [pc, #16]	@ (8009490 <prvResetNextTaskUnblockTime+0x3c>)
 800947e:	6013      	str	r3, [r2, #0]
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20000b9c 	.word	0x20000b9c
 8009490:	20000c04 	.word	0x20000c04

08009494 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800949e:	4b29      	ldr	r3, [pc, #164]	@ (8009544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a4:	4b28      	ldr	r3, [pc, #160]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff fb01 	bl	8008ab2 <uxListRemove>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80094b6:	4b24      	ldr	r3, [pc, #144]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	2201      	movs	r2, #1
 80094be:	fa02 f303 	lsl.w	r3, r2, r3
 80094c2:	43da      	mvns	r2, r3
 80094c4:	4b21      	ldr	r3, [pc, #132]	@ (800954c <prvAddCurrentTaskToDelayedList+0xb8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4013      	ands	r3, r2
 80094ca:	4a20      	ldr	r2, [pc, #128]	@ (800954c <prvAddCurrentTaskToDelayedList+0xb8>)
 80094cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094d4:	d10a      	bne.n	80094ec <prvAddCurrentTaskToDelayedList+0x58>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d007      	beq.n	80094ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	481a      	ldr	r0, [pc, #104]	@ (8009550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80094e6:	f7ff fa87 	bl	80089f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094ea:	e026      	b.n	800953a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4413      	add	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094f4:	4b14      	ldr	r3, [pc, #80]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	429a      	cmp	r2, r3
 8009502:	d209      	bcs.n	8009518 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009504:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3304      	adds	r3, #4
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7ff fa95 	bl	8008a40 <vListInsert>
}
 8009516:	e010      	b.n	800953a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009518:	4b0f      	ldr	r3, [pc, #60]	@ (8009558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7ff fa8b 	bl	8008a40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800952a:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <prvAddCurrentTaskToDelayedList+0xc8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	d202      	bcs.n	800953a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009534:	4a09      	ldr	r2, [pc, #36]	@ (800955c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6013      	str	r3, [r2, #0]
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000be8 	.word	0x20000be8
 8009548:	20000ae4 	.word	0x20000ae4
 800954c:	20000bec 	.word	0x20000bec
 8009550:	20000bd0 	.word	0x20000bd0
 8009554:	20000ba0 	.word	0x20000ba0
 8009558:	20000b9c 	.word	0x20000b9c
 800955c:	20000c04 	.word	0x20000c04

08009560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3b04      	subs	r3, #4
 8009570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3b04      	subs	r3, #4
 800957e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f023 0201 	bic.w	r2, r3, #1
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3b04      	subs	r3, #4
 800958e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009590:	4a0c      	ldr	r2, [pc, #48]	@ (80095c4 <pxPortInitialiseStack+0x64>)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3b14      	subs	r3, #20
 800959a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3b04      	subs	r3, #4
 80095a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f06f 0202 	mvn.w	r2, #2
 80095ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3b20      	subs	r3, #32
 80095b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095b6:	68fb      	ldr	r3, [r7, #12]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	080095c9 	.word	0x080095c9

080095c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095d2:	4b13      	ldr	r3, [pc, #76]	@ (8009620 <prvTaskExitError+0x58>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095da:	d00b      	beq.n	80095f4 <prvTaskExitError+0x2c>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	60fb      	str	r3, [r7, #12]
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <prvTaskExitError+0x28>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	60bb      	str	r3, [r7, #8]
}
 8009606:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009608:	bf00      	nop
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0fc      	beq.n	800960a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000100 	.word	0x20000100
	...

08009630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009630:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <pxCurrentTCBConst2>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f380 8809 	msr	PSP, r0
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8811 	msr	BASEPRI, r0
 800964a:	4770      	bx	lr
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst2>:
 8009650:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009658:	4808      	ldr	r0, [pc, #32]	@ (800967c <prvPortStartFirstTask+0x24>)
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	6800      	ldr	r0, [r0, #0]
 800965e:	f380 8808 	msr	MSP, r0
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f380 8814 	msr	CONTROL, r0
 800966a:	b662      	cpsie	i
 800966c:	b661      	cpsie	f
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	df00      	svc	0
 8009678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800967a:	bf00      	nop
 800967c:	e000ed08 	.word	0xe000ed08

08009680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009686:	4b47      	ldr	r3, [pc, #284]	@ (80097a4 <xPortStartScheduler+0x124>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a47      	ldr	r2, [pc, #284]	@ (80097a8 <xPortStartScheduler+0x128>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10b      	bne.n	80096a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	613b      	str	r3, [r7, #16]
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096a8:	4b3e      	ldr	r3, [pc, #248]	@ (80097a4 <xPortStartScheduler+0x124>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a3f      	ldr	r2, [pc, #252]	@ (80097ac <xPortStartScheduler+0x12c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10b      	bne.n	80096ca <xPortStartScheduler+0x4a>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60fb      	str	r3, [r7, #12]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096ca:	4b39      	ldr	r3, [pc, #228]	@ (80097b0 <xPortStartScheduler+0x130>)
 80096cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	22ff      	movs	r2, #255	@ 0xff
 80096da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4b31      	ldr	r3, [pc, #196]	@ (80097b4 <xPortStartScheduler+0x134>)
 80096f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096f2:	4b31      	ldr	r3, [pc, #196]	@ (80097b8 <xPortStartScheduler+0x138>)
 80096f4:	2207      	movs	r2, #7
 80096f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096f8:	e009      	b.n	800970e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80096fa:	4b2f      	ldr	r3, [pc, #188]	@ (80097b8 <xPortStartScheduler+0x138>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3b01      	subs	r3, #1
 8009700:	4a2d      	ldr	r2, [pc, #180]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	b2db      	uxtb	r3, r3
 800970c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009716:	2b80      	cmp	r3, #128	@ 0x80
 8009718:	d0ef      	beq.n	80096fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800971a:	4b27      	ldr	r3, [pc, #156]	@ (80097b8 <xPortStartScheduler+0x138>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f1c3 0307 	rsb	r3, r3, #7
 8009722:	2b04      	cmp	r3, #4
 8009724:	d00b      	beq.n	800973e <xPortStartScheduler+0xbe>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60bb      	str	r3, [r7, #8]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800973e:	4b1e      	ldr	r3, [pc, #120]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	4a1c      	ldr	r2, [pc, #112]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009748:	4b1b      	ldr	r3, [pc, #108]	@ (80097b8 <xPortStartScheduler+0x138>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009750:	4a19      	ldr	r2, [pc, #100]	@ (80097b8 <xPortStartScheduler+0x138>)
 8009752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800975c:	4b17      	ldr	r3, [pc, #92]	@ (80097bc <xPortStartScheduler+0x13c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a16      	ldr	r2, [pc, #88]	@ (80097bc <xPortStartScheduler+0x13c>)
 8009762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009768:	4b14      	ldr	r3, [pc, #80]	@ (80097bc <xPortStartScheduler+0x13c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a13      	ldr	r2, [pc, #76]	@ (80097bc <xPortStartScheduler+0x13c>)
 800976e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009774:	f000 f8da 	bl	800992c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009778:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <xPortStartScheduler+0x140>)
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800977e:	f000 f8f9 	bl	8009974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009782:	4b10      	ldr	r3, [pc, #64]	@ (80097c4 <xPortStartScheduler+0x144>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a0f      	ldr	r2, [pc, #60]	@ (80097c4 <xPortStartScheduler+0x144>)
 8009788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800978c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800978e:	f7ff ff63 	bl	8009658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009792:	f7ff fd4d 	bl	8009230 <vTaskSwitchContext>
	prvTaskExitError();
 8009796:	f7ff ff17 	bl	80095c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	e000ed00 	.word	0xe000ed00
 80097a8:	410fc271 	.word	0x410fc271
 80097ac:	410fc270 	.word	0x410fc270
 80097b0:	e000e400 	.word	0xe000e400
 80097b4:	20000c10 	.word	0x20000c10
 80097b8:	20000c14 	.word	0x20000c14
 80097bc:	e000ed20 	.word	0xe000ed20
 80097c0:	20000100 	.word	0x20000100
 80097c4:	e000ef34 	.word	0xe000ef34

080097c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	607b      	str	r3, [r7, #4]
}
 80097e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3301      	adds	r3, #1
 80097e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <vPortEnterCritical+0x5c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <vPortEnterCritical+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <vPortEnterCritical+0x4e>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	603b      	str	r3, [r7, #0]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <vPortEnterCritical+0x4a>
	}
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000100 	.word	0x20000100
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <vPortExitCritical+0x50>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10b      	bne.n	8009852 <vPortExitCritical+0x26>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	607b      	str	r3, [r7, #4]
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	e7fd      	b.n	800984e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009852:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <vPortExitCritical+0x50>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3b01      	subs	r3, #1
 8009858:	4a08      	ldr	r2, [pc, #32]	@ (800987c <vPortExitCritical+0x50>)
 800985a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800985c:	4b07      	ldr	r3, [pc, #28]	@ (800987c <vPortExitCritical+0x50>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d105      	bne.n	8009870 <vPortExitCritical+0x44>
 8009864:	2300      	movs	r3, #0
 8009866:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800986e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20000100 	.word	0x20000100

08009880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009880:	f3ef 8009 	mrs	r0, PSP
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	4b15      	ldr	r3, [pc, #84]	@ (80098e0 <pxCurrentTCBConst>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	f01e 0f10 	tst.w	lr, #16
 8009890:	bf08      	it	eq
 8009892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	6010      	str	r0, [r2, #0]
 800989c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098a4:	f380 8811 	msr	BASEPRI, r0
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f7ff fcbe 	bl	8009230 <vTaskSwitchContext>
 80098b4:	f04f 0000 	mov.w	r0, #0
 80098b8:	f380 8811 	msr	BASEPRI, r0
 80098bc:	bc09      	pop	{r0, r3}
 80098be:	6819      	ldr	r1, [r3, #0]
 80098c0:	6808      	ldr	r0, [r1, #0]
 80098c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c6:	f01e 0f10 	tst.w	lr, #16
 80098ca:	bf08      	it	eq
 80098cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098d0:	f380 8809 	msr	PSP, r0
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w

080098e0 <pxCurrentTCBConst>:
 80098e0:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	607b      	str	r3, [r7, #4]
}
 8009900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009902:	f7ff fbdb 	bl	80090bc <xTaskIncrementTick>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800990c:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <SysTick_Handler+0x40>)
 800990e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f383 8811 	msr	BASEPRI, r3
}
 800991e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009930:	4b0b      	ldr	r3, [pc, #44]	@ (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <vPortSetupTimerInterrupt+0x38>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <vPortSetupTimerInterrupt+0x3c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a0a      	ldr	r2, [pc, #40]	@ (800996c <vPortSetupTimerInterrupt+0x40>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	099b      	lsrs	r3, r3, #6
 8009948:	4a09      	ldr	r2, [pc, #36]	@ (8009970 <vPortSetupTimerInterrupt+0x44>)
 800994a:	3b01      	subs	r3, #1
 800994c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800994e:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
}
 8009954:	bf00      	nop
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	e000e010 	.word	0xe000e010
 8009964:	e000e018 	.word	0xe000e018
 8009968:	20000030 	.word	0x20000030
 800996c:	10624dd3 	.word	0x10624dd3
 8009970:	e000e014 	.word	0xe000e014

08009974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009984 <vPortEnableVFP+0x10>
 8009978:	6801      	ldr	r1, [r0, #0]
 800997a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800997e:	6001      	str	r1, [r0, #0]
 8009980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009982:	bf00      	nop
 8009984:	e000ed88 	.word	0xe000ed88

08009988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	@ 0x28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009994:	f7ff fae6 	bl	8008f64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009998:	4b5c      	ldr	r3, [pc, #368]	@ (8009b0c <pvPortMalloc+0x184>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099a0:	f000 f924 	bl	8009bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099a4:	4b5a      	ldr	r3, [pc, #360]	@ (8009b10 <pvPortMalloc+0x188>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 8095 	bne.w	8009adc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01e      	beq.n	80099f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80099b8:	2208      	movs	r2, #8
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4413      	add	r3, r2
 80099be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d015      	beq.n	80099f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f023 0307 	bic.w	r3, r3, #7
 80099d0:	3308      	adds	r3, #8
 80099d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <pvPortMalloc+0x6e>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	617b      	str	r3, [r7, #20]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d06f      	beq.n	8009adc <pvPortMalloc+0x154>
 80099fc:	4b45      	ldr	r3, [pc, #276]	@ (8009b14 <pvPortMalloc+0x18c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d86a      	bhi.n	8009adc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a06:	4b44      	ldr	r3, [pc, #272]	@ (8009b18 <pvPortMalloc+0x190>)
 8009a08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a0a:	4b43      	ldr	r3, [pc, #268]	@ (8009b18 <pvPortMalloc+0x190>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a10:	e004      	b.n	8009a1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d903      	bls.n	8009a2e <pvPortMalloc+0xa6>
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1f1      	bne.n	8009a12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a2e:	4b37      	ldr	r3, [pc, #220]	@ (8009b0c <pvPortMalloc+0x184>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d051      	beq.n	8009adc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	4413      	add	r3, r2
 8009a40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	2308      	movs	r3, #8
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d920      	bls.n	8009a9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4413      	add	r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00b      	beq.n	8009a84 <pvPortMalloc+0xfc>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	613b      	str	r3, [r7, #16]
}
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	e7fd      	b.n	8009a80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a96:	69b8      	ldr	r0, [r7, #24]
 8009a98:	f000 f90a 	bl	8009cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <pvPortMalloc+0x18c>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8009b14 <pvPortMalloc+0x18c>)
 8009aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <pvPortMalloc+0x18c>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b1b      	ldr	r3, [pc, #108]	@ (8009b1c <pvPortMalloc+0x194>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d203      	bcs.n	8009abe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ab6:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <pvPortMalloc+0x18c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a18      	ldr	r2, [pc, #96]	@ (8009b1c <pvPortMalloc+0x194>)
 8009abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	4b13      	ldr	r3, [pc, #76]	@ (8009b10 <pvPortMalloc+0x188>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ad2:	4b13      	ldr	r3, [pc, #76]	@ (8009b20 <pvPortMalloc+0x198>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	4a11      	ldr	r2, [pc, #68]	@ (8009b20 <pvPortMalloc+0x198>)
 8009ada:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009adc:	f7ff fa50 	bl	8008f80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00b      	beq.n	8009b02 <pvPortMalloc+0x17a>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60fb      	str	r3, [r7, #12]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <pvPortMalloc+0x176>
	return pvReturn;
 8009b02:	69fb      	ldr	r3, [r7, #28]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3728      	adds	r7, #40	@ 0x28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20001fa8 	.word	0x20001fa8
 8009b10:	20001fbc 	.word	0x20001fbc
 8009b14:	20001fac 	.word	0x20001fac
 8009b18:	20001fa0 	.word	0x20001fa0
 8009b1c:	20001fb0 	.word	0x20001fb0
 8009b20:	20001fb4 	.word	0x20001fb4

08009b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d04f      	beq.n	8009bd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b36:	2308      	movs	r3, #8
 8009b38:	425b      	negs	r3, r3
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	4b25      	ldr	r3, [pc, #148]	@ (8009be0 <vPortFree+0xbc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <vPortFree+0x46>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	60fb      	str	r3, [r7, #12]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00b      	beq.n	8009b8a <vPortFree+0x66>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	60bb      	str	r3, [r7, #8]
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	e7fd      	b.n	8009b86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	4b14      	ldr	r3, [pc, #80]	@ (8009be0 <vPortFree+0xbc>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4013      	ands	r3, r2
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d01e      	beq.n	8009bd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d11a      	bne.n	8009bd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8009be0 <vPortFree+0xbc>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	401a      	ands	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bb0:	f7ff f9d8 	bl	8008f64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <vPortFree+0xc0>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	4a09      	ldr	r2, [pc, #36]	@ (8009be4 <vPortFree+0xc0>)
 8009bc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bc2:	6938      	ldr	r0, [r7, #16]
 8009bc4:	f000 f874 	bl	8009cb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bc8:	4b07      	ldr	r3, [pc, #28]	@ (8009be8 <vPortFree+0xc4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	4a06      	ldr	r2, [pc, #24]	@ (8009be8 <vPortFree+0xc4>)
 8009bd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bd2:	f7ff f9d5 	bl	8008f80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20001fbc 	.word	0x20001fbc
 8009be4:	20001fac 	.word	0x20001fac
 8009be8:	20001fb8 	.word	0x20001fb8

08009bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bf2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bf8:	4b27      	ldr	r3, [pc, #156]	@ (8009c98 <prvHeapInit+0xac>)
 8009bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3307      	adds	r3, #7
 8009c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f023 0307 	bic.w	r3, r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c98 <prvHeapInit+0xac>)
 8009c1c:	4413      	add	r3, r2
 8009c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c24:	4a1d      	ldr	r2, [pc, #116]	@ (8009c9c <prvHeapInit+0xb0>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8009c9c <prvHeapInit+0xb0>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	4413      	add	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c38:	2208      	movs	r2, #8
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 0307 	bic.w	r3, r3, #7
 8009c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4a15      	ldr	r2, [pc, #84]	@ (8009ca0 <prvHeapInit+0xb4>)
 8009c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ca0 <prvHeapInit+0xb4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c56:	4b12      	ldr	r3, [pc, #72]	@ (8009ca0 <prvHeapInit+0xb4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <prvHeapInit+0xb4>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca4 <prvHeapInit+0xb8>)
 8009c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a09      	ldr	r2, [pc, #36]	@ (8009ca8 <prvHeapInit+0xbc>)
 8009c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c84:	4b09      	ldr	r3, [pc, #36]	@ (8009cac <prvHeapInit+0xc0>)
 8009c86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c8a:	601a      	str	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	20000c18 	.word	0x20000c18
 8009c9c:	20001fa0 	.word	0x20001fa0
 8009ca0:	20001fa8 	.word	0x20001fa8
 8009ca4:	20001fb0 	.word	0x20001fb0
 8009ca8:	20001fac 	.word	0x20001fac
 8009cac:	20001fbc 	.word	0x20001fbc

08009cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cb8:	4b28      	ldr	r3, [pc, #160]	@ (8009d5c <prvInsertBlockIntoFreeList+0xac>)
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e002      	b.n	8009cc4 <prvInsertBlockIntoFreeList+0x14>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d8f7      	bhi.n	8009cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4413      	add	r3, r2
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d108      	bne.n	8009cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	441a      	add	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	441a      	add	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d118      	bne.n	8009d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b15      	ldr	r3, [pc, #84]	@ (8009d60 <prvInsertBlockIntoFreeList+0xb0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d00d      	beq.n	8009d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	441a      	add	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	e008      	b.n	8009d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d60 <prvInsertBlockIntoFreeList+0xb0>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	e003      	b.n	8009d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d002      	beq.n	8009d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	20001fa0 	.word	0x20001fa0
 8009d60:	20001fa8 	.word	0x20001fa8

08009d64 <arm_sin_f32>:
 8009d64:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8009de4 <arm_sin_f32+0x80>
 8009d68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009d78:	d504      	bpl.n	8009d84 <arm_sin_f32+0x20>
 8009d7a:	ee17 3a90 	vmov	r3, s15
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d88:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009de8 <arm_sin_f32+0x84>
 8009d8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009d94:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009d98:	ee17 3a90 	vmov	r3, s15
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da2:	d21a      	bcs.n	8009dda <arm_sin_f32+0x76>
 8009da4:	ee07 3a90 	vmov	s15, r3
 8009da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dac:	1c59      	adds	r1, r3, #1
 8009dae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009db2:	4a0e      	ldr	r2, [pc, #56]	@ (8009dec <arm_sin_f32+0x88>)
 8009db4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009dc0:	ed93 7a00 	vldr	s14, [r3]
 8009dc4:	edd2 6a00 	vldr	s13, [r2]
 8009dc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009dcc:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dd4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009dd8:	4770      	bx	lr
 8009dda:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009dde:	2101      	movs	r1, #1
 8009de0:	2300      	movs	r3, #0
 8009de2:	e7e6      	b.n	8009db2 <arm_sin_f32+0x4e>
 8009de4:	3e22f983 	.word	0x3e22f983
 8009de8:	44000000 	.word	0x44000000
 8009dec:	0800e81c 	.word	0x0800e81c

08009df0 <__cvt>:
 8009df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	ec57 6b10 	vmov	r6, r7, d0
 8009df8:	2f00      	cmp	r7, #0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	463b      	mov	r3, r7
 8009e00:	bfbb      	ittet	lt
 8009e02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e06:	461f      	movlt	r7, r3
 8009e08:	2300      	movge	r3, #0
 8009e0a:	232d      	movlt	r3, #45	@ 0x2d
 8009e0c:	700b      	strb	r3, [r1, #0]
 8009e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e14:	4691      	mov	r9, r2
 8009e16:	f023 0820 	bic.w	r8, r3, #32
 8009e1a:	bfbc      	itt	lt
 8009e1c:	4632      	movlt	r2, r6
 8009e1e:	4616      	movlt	r6, r2
 8009e20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e24:	d005      	beq.n	8009e32 <__cvt+0x42>
 8009e26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e2a:	d100      	bne.n	8009e2e <__cvt+0x3e>
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	2102      	movs	r1, #2
 8009e30:	e000      	b.n	8009e34 <__cvt+0x44>
 8009e32:	2103      	movs	r1, #3
 8009e34:	ab03      	add	r3, sp, #12
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	ab02      	add	r3, sp, #8
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	ec47 6b10 	vmov	d0, r6, r7
 8009e40:	4653      	mov	r3, sl
 8009e42:	4622      	mov	r2, r4
 8009e44:	f001 fef8 	bl	800bc38 <_dtoa_r>
 8009e48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	d119      	bne.n	8009e84 <__cvt+0x94>
 8009e50:	f019 0f01 	tst.w	r9, #1
 8009e54:	d00e      	beq.n	8009e74 <__cvt+0x84>
 8009e56:	eb00 0904 	add.w	r9, r0, r4
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7f6 fe49 	bl	8000af8 <__aeabi_dcmpeq>
 8009e66:	b108      	cbz	r0, 8009e6c <__cvt+0x7c>
 8009e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e6c:	2230      	movs	r2, #48	@ 0x30
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	454b      	cmp	r3, r9
 8009e72:	d31e      	bcc.n	8009eb2 <__cvt+0xc2>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e78:	1b5b      	subs	r3, r3, r5
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	b004      	add	sp, #16
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e88:	eb00 0904 	add.w	r9, r0, r4
 8009e8c:	d1e5      	bne.n	8009e5a <__cvt+0x6a>
 8009e8e:	7803      	ldrb	r3, [r0, #0]
 8009e90:	2b30      	cmp	r3, #48	@ 0x30
 8009e92:	d10a      	bne.n	8009eaa <__cvt+0xba>
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fe2c 	bl	8000af8 <__aeabi_dcmpeq>
 8009ea0:	b918      	cbnz	r0, 8009eaa <__cvt+0xba>
 8009ea2:	f1c4 0401 	rsb	r4, r4, #1
 8009ea6:	f8ca 4000 	str.w	r4, [sl]
 8009eaa:	f8da 3000 	ldr.w	r3, [sl]
 8009eae:	4499      	add	r9, r3
 8009eb0:	e7d3      	b.n	8009e5a <__cvt+0x6a>
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e7d9      	b.n	8009e6e <__cvt+0x7e>

08009eba <__exponent>:
 8009eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	bfba      	itte	lt
 8009ec0:	4249      	neglt	r1, r1
 8009ec2:	232d      	movlt	r3, #45	@ 0x2d
 8009ec4:	232b      	movge	r3, #43	@ 0x2b
 8009ec6:	2909      	cmp	r1, #9
 8009ec8:	7002      	strb	r2, [r0, #0]
 8009eca:	7043      	strb	r3, [r0, #1]
 8009ecc:	dd29      	ble.n	8009f22 <__exponent+0x68>
 8009ece:	f10d 0307 	add.w	r3, sp, #7
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	270a      	movs	r7, #10
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009edc:	fb07 1416 	mls	r4, r7, r6, r1
 8009ee0:	3430      	adds	r4, #48	@ 0x30
 8009ee2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	2c63      	cmp	r4, #99	@ 0x63
 8009eea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009eee:	4631      	mov	r1, r6
 8009ef0:	dcf1      	bgt.n	8009ed6 <__exponent+0x1c>
 8009ef2:	3130      	adds	r1, #48	@ 0x30
 8009ef4:	1e94      	subs	r4, r2, #2
 8009ef6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009efa:	1c41      	adds	r1, r0, #1
 8009efc:	4623      	mov	r3, r4
 8009efe:	42ab      	cmp	r3, r5
 8009f00:	d30a      	bcc.n	8009f18 <__exponent+0x5e>
 8009f02:	f10d 0309 	add.w	r3, sp, #9
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	42ac      	cmp	r4, r5
 8009f0a:	bf88      	it	hi
 8009f0c:	2300      	movhi	r3, #0
 8009f0e:	3302      	adds	r3, #2
 8009f10:	4403      	add	r3, r0
 8009f12:	1a18      	subs	r0, r3, r0
 8009f14:	b003      	add	sp, #12
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f20:	e7ed      	b.n	8009efe <__exponent+0x44>
 8009f22:	2330      	movs	r3, #48	@ 0x30
 8009f24:	3130      	adds	r1, #48	@ 0x30
 8009f26:	7083      	strb	r3, [r0, #2]
 8009f28:	70c1      	strb	r1, [r0, #3]
 8009f2a:	1d03      	adds	r3, r0, #4
 8009f2c:	e7f1      	b.n	8009f12 <__exponent+0x58>
	...

08009f30 <_printf_float>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	b08d      	sub	sp, #52	@ 0x34
 8009f36:	460c      	mov	r4, r1
 8009f38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	461f      	mov	r7, r3
 8009f40:	4605      	mov	r5, r0
 8009f42:	f001 fda1 	bl	800ba88 <_localeconv_r>
 8009f46:	6803      	ldr	r3, [r0, #0]
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7f6 f9a8 	bl	80002a0 <strlen>
 8009f50:	2300      	movs	r3, #0
 8009f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f54:	f8d8 3000 	ldr.w	r3, [r8]
 8009f58:	9005      	str	r0, [sp, #20]
 8009f5a:	3307      	adds	r3, #7
 8009f5c:	f023 0307 	bic.w	r3, r3, #7
 8009f60:	f103 0208 	add.w	r2, r3, #8
 8009f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f68:	f8d4 b000 	ldr.w	fp, [r4]
 8009f6c:	f8c8 2000 	str.w	r2, [r8]
 8009f70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f86:	4b9c      	ldr	r3, [pc, #624]	@ (800a1f8 <_printf_float+0x2c8>)
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f8c:	f7f6 fde6 	bl	8000b5c <__aeabi_dcmpun>
 8009f90:	bb70      	cbnz	r0, 8009ff0 <_printf_float+0xc0>
 8009f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f96:	4b98      	ldr	r3, [pc, #608]	@ (800a1f8 <_printf_float+0x2c8>)
 8009f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f9c:	f7f6 fdc0 	bl	8000b20 <__aeabi_dcmple>
 8009fa0:	bb30      	cbnz	r0, 8009ff0 <_printf_float+0xc0>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8009fae:	b110      	cbz	r0, 8009fb6 <_printf_float+0x86>
 8009fb0:	232d      	movs	r3, #45	@ 0x2d
 8009fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb6:	4a91      	ldr	r2, [pc, #580]	@ (800a1fc <_printf_float+0x2cc>)
 8009fb8:	4b91      	ldr	r3, [pc, #580]	@ (800a200 <_printf_float+0x2d0>)
 8009fba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009fbe:	bf94      	ite	ls
 8009fc0:	4690      	movls	r8, r2
 8009fc2:	4698      	movhi	r8, r3
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	f02b 0304 	bic.w	r3, fp, #4
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	f04f 0900 	mov.w	r9, #0
 8009fd2:	9700      	str	r7, [sp, #0]
 8009fd4:	4633      	mov	r3, r6
 8009fd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 f9d2 	bl	800a384 <_printf_common>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	f040 808d 	bne.w	800a100 <_printf_float+0x1d0>
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fea:	b00d      	add	sp, #52	@ 0x34
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	f7f6 fdb0 	bl	8000b5c <__aeabi_dcmpun>
 8009ffc:	b140      	cbz	r0, 800a010 <_printf_float+0xe0>
 8009ffe:	464b      	mov	r3, r9
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfbc      	itt	lt
 800a004:	232d      	movlt	r3, #45	@ 0x2d
 800a006:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a00a:	4a7e      	ldr	r2, [pc, #504]	@ (800a204 <_printf_float+0x2d4>)
 800a00c:	4b7e      	ldr	r3, [pc, #504]	@ (800a208 <_printf_float+0x2d8>)
 800a00e:	e7d4      	b.n	8009fba <_printf_float+0x8a>
 800a010:	6863      	ldr	r3, [r4, #4]
 800a012:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a016:	9206      	str	r2, [sp, #24]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	d13b      	bne.n	800a094 <_printf_float+0x164>
 800a01c:	2306      	movs	r3, #6
 800a01e:	6063      	str	r3, [r4, #4]
 800a020:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a024:	2300      	movs	r3, #0
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	9303      	str	r3, [sp, #12]
 800a02a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a02c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a030:	ab09      	add	r3, sp, #36	@ 0x24
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	6861      	ldr	r1, [r4, #4]
 800a036:	ec49 8b10 	vmov	d0, r8, r9
 800a03a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a03e:	4628      	mov	r0, r5
 800a040:	f7ff fed6 	bl	8009df0 <__cvt>
 800a044:	9b06      	ldr	r3, [sp, #24]
 800a046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a048:	2b47      	cmp	r3, #71	@ 0x47
 800a04a:	4680      	mov	r8, r0
 800a04c:	d129      	bne.n	800a0a2 <_printf_float+0x172>
 800a04e:	1cc8      	adds	r0, r1, #3
 800a050:	db02      	blt.n	800a058 <_printf_float+0x128>
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	4299      	cmp	r1, r3
 800a056:	dd41      	ble.n	800a0dc <_printf_float+0x1ac>
 800a058:	f1aa 0a02 	sub.w	sl, sl, #2
 800a05c:	fa5f fa8a 	uxtb.w	sl, sl
 800a060:	3901      	subs	r1, #1
 800a062:	4652      	mov	r2, sl
 800a064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a068:	9109      	str	r1, [sp, #36]	@ 0x24
 800a06a:	f7ff ff26 	bl	8009eba <__exponent>
 800a06e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a070:	1813      	adds	r3, r2, r0
 800a072:	2a01      	cmp	r2, #1
 800a074:	4681      	mov	r9, r0
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	dc02      	bgt.n	800a080 <_printf_float+0x150>
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	07d2      	lsls	r2, r2, #31
 800a07e:	d501      	bpl.n	800a084 <_printf_float+0x154>
 800a080:	3301      	adds	r3, #1
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d0a2      	beq.n	8009fd2 <_printf_float+0xa2>
 800a08c:	232d      	movs	r3, #45	@ 0x2d
 800a08e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a092:	e79e      	b.n	8009fd2 <_printf_float+0xa2>
 800a094:	9a06      	ldr	r2, [sp, #24]
 800a096:	2a47      	cmp	r2, #71	@ 0x47
 800a098:	d1c2      	bne.n	800a020 <_printf_float+0xf0>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1c0      	bne.n	800a020 <_printf_float+0xf0>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7bd      	b.n	800a01e <_printf_float+0xee>
 800a0a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0a6:	d9db      	bls.n	800a060 <_printf_float+0x130>
 800a0a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0ac:	d118      	bne.n	800a0e0 <_printf_float+0x1b0>
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	dd0b      	ble.n	800a0cc <_printf_float+0x19c>
 800a0b4:	6121      	str	r1, [r4, #16]
 800a0b6:	b913      	cbnz	r3, 800a0be <_printf_float+0x18e>
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	07d0      	lsls	r0, r2, #31
 800a0bc:	d502      	bpl.n	800a0c4 <_printf_float+0x194>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	440b      	add	r3, r1
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	e7db      	b.n	800a084 <_printf_float+0x154>
 800a0cc:	b913      	cbnz	r3, 800a0d4 <_printf_float+0x1a4>
 800a0ce:	6822      	ldr	r2, [r4, #0]
 800a0d0:	07d2      	lsls	r2, r2, #31
 800a0d2:	d501      	bpl.n	800a0d8 <_printf_float+0x1a8>
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	e7f4      	b.n	800a0c2 <_printf_float+0x192>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e7f2      	b.n	800a0c2 <_printf_float+0x192>
 800a0dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	db05      	blt.n	800a0f2 <_printf_float+0x1c2>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	6121      	str	r1, [r4, #16]
 800a0ea:	07d8      	lsls	r0, r3, #31
 800a0ec:	d5ea      	bpl.n	800a0c4 <_printf_float+0x194>
 800a0ee:	1c4b      	adds	r3, r1, #1
 800a0f0:	e7e7      	b.n	800a0c2 <_printf_float+0x192>
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	bfd4      	ite	le
 800a0f6:	f1c1 0202 	rsble	r2, r1, #2
 800a0fa:	2201      	movgt	r2, #1
 800a0fc:	4413      	add	r3, r2
 800a0fe:	e7e0      	b.n	800a0c2 <_printf_float+0x192>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	055a      	lsls	r2, r3, #21
 800a104:	d407      	bmi.n	800a116 <_printf_float+0x1e6>
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	4642      	mov	r2, r8
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	d12b      	bne.n	800a16c <_printf_float+0x23c>
 800a114:	e767      	b.n	8009fe6 <_printf_float+0xb6>
 800a116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a11a:	f240 80dd 	bls.w	800a2d8 <_printf_float+0x3a8>
 800a11e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a122:	2200      	movs	r2, #0
 800a124:	2300      	movs	r3, #0
 800a126:	f7f6 fce7 	bl	8000af8 <__aeabi_dcmpeq>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d033      	beq.n	800a196 <_printf_float+0x266>
 800a12e:	4a37      	ldr	r2, [pc, #220]	@ (800a20c <_printf_float+0x2dc>)
 800a130:	2301      	movs	r3, #1
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f af54 	beq.w	8009fe6 <_printf_float+0xb6>
 800a13e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a142:	4543      	cmp	r3, r8
 800a144:	db02      	blt.n	800a14c <_printf_float+0x21c>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	07d8      	lsls	r0, r3, #31
 800a14a:	d50f      	bpl.n	800a16c <_printf_float+0x23c>
 800a14c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a150:	4631      	mov	r1, r6
 800a152:	4628      	mov	r0, r5
 800a154:	47b8      	blx	r7
 800a156:	3001      	adds	r0, #1
 800a158:	f43f af45 	beq.w	8009fe6 <_printf_float+0xb6>
 800a15c:	f04f 0900 	mov.w	r9, #0
 800a160:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a164:	f104 0a1a 	add.w	sl, r4, #26
 800a168:	45c8      	cmp	r8, r9
 800a16a:	dc09      	bgt.n	800a180 <_printf_float+0x250>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	079b      	lsls	r3, r3, #30
 800a170:	f100 8103 	bmi.w	800a37a <_printf_float+0x44a>
 800a174:	68e0      	ldr	r0, [r4, #12]
 800a176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a178:	4298      	cmp	r0, r3
 800a17a:	bfb8      	it	lt
 800a17c:	4618      	movlt	r0, r3
 800a17e:	e734      	b.n	8009fea <_printf_float+0xba>
 800a180:	2301      	movs	r3, #1
 800a182:	4652      	mov	r2, sl
 800a184:	4631      	mov	r1, r6
 800a186:	4628      	mov	r0, r5
 800a188:	47b8      	blx	r7
 800a18a:	3001      	adds	r0, #1
 800a18c:	f43f af2b 	beq.w	8009fe6 <_printf_float+0xb6>
 800a190:	f109 0901 	add.w	r9, r9, #1
 800a194:	e7e8      	b.n	800a168 <_printf_float+0x238>
 800a196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dc39      	bgt.n	800a210 <_printf_float+0x2e0>
 800a19c:	4a1b      	ldr	r2, [pc, #108]	@ (800a20c <_printf_float+0x2dc>)
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f af1d 	beq.w	8009fe6 <_printf_float+0xb6>
 800a1ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1b0:	ea59 0303 	orrs.w	r3, r9, r3
 800a1b4:	d102      	bne.n	800a1bc <_printf_float+0x28c>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	07d9      	lsls	r1, r3, #31
 800a1ba:	d5d7      	bpl.n	800a16c <_printf_float+0x23c>
 800a1bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47b8      	blx	r7
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f43f af0d 	beq.w	8009fe6 <_printf_float+0xb6>
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	f104 0b1a 	add.w	fp, r4, #26
 800a1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d6:	425b      	negs	r3, r3
 800a1d8:	4553      	cmp	r3, sl
 800a1da:	dc01      	bgt.n	800a1e0 <_printf_float+0x2b0>
 800a1dc:	464b      	mov	r3, r9
 800a1de:	e793      	b.n	800a108 <_printf_float+0x1d8>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	465a      	mov	r2, fp
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f aefb 	beq.w	8009fe6 <_printf_float+0xb6>
 800a1f0:	f10a 0a01 	add.w	sl, sl, #1
 800a1f4:	e7ee      	b.n	800a1d4 <_printf_float+0x2a4>
 800a1f6:	bf00      	nop
 800a1f8:	7fefffff 	.word	0x7fefffff
 800a1fc:	0800f020 	.word	0x0800f020
 800a200:	0800f024 	.word	0x0800f024
 800a204:	0800f028 	.word	0x0800f028
 800a208:	0800f02c 	.word	0x0800f02c
 800a20c:	0800f030 	.word	0x0800f030
 800a210:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a212:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a216:	4553      	cmp	r3, sl
 800a218:	bfa8      	it	ge
 800a21a:	4653      	movge	r3, sl
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	4699      	mov	r9, r3
 800a220:	dc36      	bgt.n	800a290 <_printf_float+0x360>
 800a222:	f04f 0b00 	mov.w	fp, #0
 800a226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a22a:	f104 021a 	add.w	r2, r4, #26
 800a22e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a230:	9306      	str	r3, [sp, #24]
 800a232:	eba3 0309 	sub.w	r3, r3, r9
 800a236:	455b      	cmp	r3, fp
 800a238:	dc31      	bgt.n	800a29e <_printf_float+0x36e>
 800a23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23c:	459a      	cmp	sl, r3
 800a23e:	dc3a      	bgt.n	800a2b6 <_printf_float+0x386>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	07da      	lsls	r2, r3, #31
 800a244:	d437      	bmi.n	800a2b6 <_printf_float+0x386>
 800a246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a248:	ebaa 0903 	sub.w	r9, sl, r3
 800a24c:	9b06      	ldr	r3, [sp, #24]
 800a24e:	ebaa 0303 	sub.w	r3, sl, r3
 800a252:	4599      	cmp	r9, r3
 800a254:	bfa8      	it	ge
 800a256:	4699      	movge	r9, r3
 800a258:	f1b9 0f00 	cmp.w	r9, #0
 800a25c:	dc33      	bgt.n	800a2c6 <_printf_float+0x396>
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a266:	f104 0b1a 	add.w	fp, r4, #26
 800a26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26c:	ebaa 0303 	sub.w	r3, sl, r3
 800a270:	eba3 0309 	sub.w	r3, r3, r9
 800a274:	4543      	cmp	r3, r8
 800a276:	f77f af79 	ble.w	800a16c <_printf_float+0x23c>
 800a27a:	2301      	movs	r3, #1
 800a27c:	465a      	mov	r2, fp
 800a27e:	4631      	mov	r1, r6
 800a280:	4628      	mov	r0, r5
 800a282:	47b8      	blx	r7
 800a284:	3001      	adds	r0, #1
 800a286:	f43f aeae 	beq.w	8009fe6 <_printf_float+0xb6>
 800a28a:	f108 0801 	add.w	r8, r8, #1
 800a28e:	e7ec      	b.n	800a26a <_printf_float+0x33a>
 800a290:	4642      	mov	r2, r8
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	d1c2      	bne.n	800a222 <_printf_float+0x2f2>
 800a29c:	e6a3      	b.n	8009fe6 <_printf_float+0xb6>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	9206      	str	r2, [sp, #24]
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae9c 	beq.w	8009fe6 <_printf_float+0xb6>
 800a2ae:	9a06      	ldr	r2, [sp, #24]
 800a2b0:	f10b 0b01 	add.w	fp, fp, #1
 800a2b4:	e7bb      	b.n	800a22e <_printf_float+0x2fe>
 800a2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b8      	blx	r7
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d1c0      	bne.n	800a246 <_printf_float+0x316>
 800a2c4:	e68f      	b.n	8009fe6 <_printf_float+0xb6>
 800a2c6:	9a06      	ldr	r2, [sp, #24]
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	4442      	add	r2, r8
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d1c3      	bne.n	800a25e <_printf_float+0x32e>
 800a2d6:	e686      	b.n	8009fe6 <_printf_float+0xb6>
 800a2d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2dc:	f1ba 0f01 	cmp.w	sl, #1
 800a2e0:	dc01      	bgt.n	800a2e6 <_printf_float+0x3b6>
 800a2e2:	07db      	lsls	r3, r3, #31
 800a2e4:	d536      	bpl.n	800a354 <_printf_float+0x424>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f ae78 	beq.w	8009fe6 <_printf_float+0xb6>
 800a2f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	47b8      	blx	r7
 800a300:	3001      	adds	r0, #1
 800a302:	f43f ae70 	beq.w	8009fe6 <_printf_float+0xb6>
 800a306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a30a:	2200      	movs	r2, #0
 800a30c:	2300      	movs	r3, #0
 800a30e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a312:	f7f6 fbf1 	bl	8000af8 <__aeabi_dcmpeq>
 800a316:	b9c0      	cbnz	r0, 800a34a <_printf_float+0x41a>
 800a318:	4653      	mov	r3, sl
 800a31a:	f108 0201 	add.w	r2, r8, #1
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	47b8      	blx	r7
 800a324:	3001      	adds	r0, #1
 800a326:	d10c      	bne.n	800a342 <_printf_float+0x412>
 800a328:	e65d      	b.n	8009fe6 <_printf_float+0xb6>
 800a32a:	2301      	movs	r3, #1
 800a32c:	465a      	mov	r2, fp
 800a32e:	4631      	mov	r1, r6
 800a330:	4628      	mov	r0, r5
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	f43f ae56 	beq.w	8009fe6 <_printf_float+0xb6>
 800a33a:	f108 0801 	add.w	r8, r8, #1
 800a33e:	45d0      	cmp	r8, sl
 800a340:	dbf3      	blt.n	800a32a <_printf_float+0x3fa>
 800a342:	464b      	mov	r3, r9
 800a344:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a348:	e6df      	b.n	800a10a <_printf_float+0x1da>
 800a34a:	f04f 0800 	mov.w	r8, #0
 800a34e:	f104 0b1a 	add.w	fp, r4, #26
 800a352:	e7f4      	b.n	800a33e <_printf_float+0x40e>
 800a354:	2301      	movs	r3, #1
 800a356:	4642      	mov	r2, r8
 800a358:	e7e1      	b.n	800a31e <_printf_float+0x3ee>
 800a35a:	2301      	movs	r3, #1
 800a35c:	464a      	mov	r2, r9
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	47b8      	blx	r7
 800a364:	3001      	adds	r0, #1
 800a366:	f43f ae3e 	beq.w	8009fe6 <_printf_float+0xb6>
 800a36a:	f108 0801 	add.w	r8, r8, #1
 800a36e:	68e3      	ldr	r3, [r4, #12]
 800a370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a372:	1a5b      	subs	r3, r3, r1
 800a374:	4543      	cmp	r3, r8
 800a376:	dcf0      	bgt.n	800a35a <_printf_float+0x42a>
 800a378:	e6fc      	b.n	800a174 <_printf_float+0x244>
 800a37a:	f04f 0800 	mov.w	r8, #0
 800a37e:	f104 0919 	add.w	r9, r4, #25
 800a382:	e7f4      	b.n	800a36e <_printf_float+0x43e>

0800a384 <_printf_common>:
 800a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	4616      	mov	r6, r2
 800a38a:	4698      	mov	r8, r3
 800a38c:	688a      	ldr	r2, [r1, #8]
 800a38e:	690b      	ldr	r3, [r1, #16]
 800a390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a394:	4293      	cmp	r3, r2
 800a396:	bfb8      	it	lt
 800a398:	4613      	movlt	r3, r2
 800a39a:	6033      	str	r3, [r6, #0]
 800a39c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	b10a      	cbz	r2, 800a3aa <_printf_common+0x26>
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	0699      	lsls	r1, r3, #26
 800a3ae:	bf42      	ittt	mi
 800a3b0:	6833      	ldrmi	r3, [r6, #0]
 800a3b2:	3302      	addmi	r3, #2
 800a3b4:	6033      	strmi	r3, [r6, #0]
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	f015 0506 	ands.w	r5, r5, #6
 800a3bc:	d106      	bne.n	800a3cc <_printf_common+0x48>
 800a3be:	f104 0a19 	add.w	sl, r4, #25
 800a3c2:	68e3      	ldr	r3, [r4, #12]
 800a3c4:	6832      	ldr	r2, [r6, #0]
 800a3c6:	1a9b      	subs	r3, r3, r2
 800a3c8:	42ab      	cmp	r3, r5
 800a3ca:	dc26      	bgt.n	800a41a <_printf_common+0x96>
 800a3cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3d0:	6822      	ldr	r2, [r4, #0]
 800a3d2:	3b00      	subs	r3, #0
 800a3d4:	bf18      	it	ne
 800a3d6:	2301      	movne	r3, #1
 800a3d8:	0692      	lsls	r2, r2, #26
 800a3da:	d42b      	bmi.n	800a434 <_printf_common+0xb0>
 800a3dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3e0:	4641      	mov	r1, r8
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	47c8      	blx	r9
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d01e      	beq.n	800a428 <_printf_common+0xa4>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	6922      	ldr	r2, [r4, #16]
 800a3ee:	f003 0306 	and.w	r3, r3, #6
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	bf02      	ittt	eq
 800a3f6:	68e5      	ldreq	r5, [r4, #12]
 800a3f8:	6833      	ldreq	r3, [r6, #0]
 800a3fa:	1aed      	subeq	r5, r5, r3
 800a3fc:	68a3      	ldr	r3, [r4, #8]
 800a3fe:	bf0c      	ite	eq
 800a400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a404:	2500      	movne	r5, #0
 800a406:	4293      	cmp	r3, r2
 800a408:	bfc4      	itt	gt
 800a40a:	1a9b      	subgt	r3, r3, r2
 800a40c:	18ed      	addgt	r5, r5, r3
 800a40e:	2600      	movs	r6, #0
 800a410:	341a      	adds	r4, #26
 800a412:	42b5      	cmp	r5, r6
 800a414:	d11a      	bne.n	800a44c <_printf_common+0xc8>
 800a416:	2000      	movs	r0, #0
 800a418:	e008      	b.n	800a42c <_printf_common+0xa8>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4652      	mov	r2, sl
 800a41e:	4641      	mov	r1, r8
 800a420:	4638      	mov	r0, r7
 800a422:	47c8      	blx	r9
 800a424:	3001      	adds	r0, #1
 800a426:	d103      	bne.n	800a430 <_printf_common+0xac>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a430:	3501      	adds	r5, #1
 800a432:	e7c6      	b.n	800a3c2 <_printf_common+0x3e>
 800a434:	18e1      	adds	r1, r4, r3
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	2030      	movs	r0, #48	@ 0x30
 800a43a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a43e:	4422      	add	r2, r4
 800a440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a448:	3302      	adds	r3, #2
 800a44a:	e7c7      	b.n	800a3dc <_printf_common+0x58>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4622      	mov	r2, r4
 800a450:	4641      	mov	r1, r8
 800a452:	4638      	mov	r0, r7
 800a454:	47c8      	blx	r9
 800a456:	3001      	adds	r0, #1
 800a458:	d0e6      	beq.n	800a428 <_printf_common+0xa4>
 800a45a:	3601      	adds	r6, #1
 800a45c:	e7d9      	b.n	800a412 <_printf_common+0x8e>
	...

0800a460 <_printf_i>:
 800a460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	7e0f      	ldrb	r7, [r1, #24]
 800a466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a468:	2f78      	cmp	r7, #120	@ 0x78
 800a46a:	4691      	mov	r9, r2
 800a46c:	4680      	mov	r8, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	469a      	mov	sl, r3
 800a472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a476:	d807      	bhi.n	800a488 <_printf_i+0x28>
 800a478:	2f62      	cmp	r7, #98	@ 0x62
 800a47a:	d80a      	bhi.n	800a492 <_printf_i+0x32>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	f000 80d2 	beq.w	800a626 <_printf_i+0x1c6>
 800a482:	2f58      	cmp	r7, #88	@ 0x58
 800a484:	f000 80b9 	beq.w	800a5fa <_printf_i+0x19a>
 800a488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a48c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a490:	e03a      	b.n	800a508 <_printf_i+0xa8>
 800a492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a496:	2b15      	cmp	r3, #21
 800a498:	d8f6      	bhi.n	800a488 <_printf_i+0x28>
 800a49a:	a101      	add	r1, pc, #4	@ (adr r1, 800a4a0 <_printf_i+0x40>)
 800a49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a50d 	.word	0x0800a50d
 800a4a8:	0800a489 	.word	0x0800a489
 800a4ac:	0800a489 	.word	0x0800a489
 800a4b0:	0800a489 	.word	0x0800a489
 800a4b4:	0800a489 	.word	0x0800a489
 800a4b8:	0800a50d 	.word	0x0800a50d
 800a4bc:	0800a489 	.word	0x0800a489
 800a4c0:	0800a489 	.word	0x0800a489
 800a4c4:	0800a489 	.word	0x0800a489
 800a4c8:	0800a489 	.word	0x0800a489
 800a4cc:	0800a60d 	.word	0x0800a60d
 800a4d0:	0800a537 	.word	0x0800a537
 800a4d4:	0800a5c7 	.word	0x0800a5c7
 800a4d8:	0800a489 	.word	0x0800a489
 800a4dc:	0800a489 	.word	0x0800a489
 800a4e0:	0800a62f 	.word	0x0800a62f
 800a4e4:	0800a489 	.word	0x0800a489
 800a4e8:	0800a537 	.word	0x0800a537
 800a4ec:	0800a489 	.word	0x0800a489
 800a4f0:	0800a489 	.word	0x0800a489
 800a4f4:	0800a5cf 	.word	0x0800a5cf
 800a4f8:	6833      	ldr	r3, [r6, #0]
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6032      	str	r2, [r6, #0]
 800a500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a508:	2301      	movs	r3, #1
 800a50a:	e09d      	b.n	800a648 <_printf_i+0x1e8>
 800a50c:	6833      	ldr	r3, [r6, #0]
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	1d19      	adds	r1, r3, #4
 800a512:	6031      	str	r1, [r6, #0]
 800a514:	0606      	lsls	r6, r0, #24
 800a516:	d501      	bpl.n	800a51c <_printf_i+0xbc>
 800a518:	681d      	ldr	r5, [r3, #0]
 800a51a:	e003      	b.n	800a524 <_printf_i+0xc4>
 800a51c:	0645      	lsls	r5, r0, #25
 800a51e:	d5fb      	bpl.n	800a518 <_printf_i+0xb8>
 800a520:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a524:	2d00      	cmp	r5, #0
 800a526:	da03      	bge.n	800a530 <_printf_i+0xd0>
 800a528:	232d      	movs	r3, #45	@ 0x2d
 800a52a:	426d      	negs	r5, r5
 800a52c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a530:	4859      	ldr	r0, [pc, #356]	@ (800a698 <_printf_i+0x238>)
 800a532:	230a      	movs	r3, #10
 800a534:	e011      	b.n	800a55a <_printf_i+0xfa>
 800a536:	6821      	ldr	r1, [r4, #0]
 800a538:	6833      	ldr	r3, [r6, #0]
 800a53a:	0608      	lsls	r0, r1, #24
 800a53c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a540:	d402      	bmi.n	800a548 <_printf_i+0xe8>
 800a542:	0649      	lsls	r1, r1, #25
 800a544:	bf48      	it	mi
 800a546:	b2ad      	uxthmi	r5, r5
 800a548:	2f6f      	cmp	r7, #111	@ 0x6f
 800a54a:	4853      	ldr	r0, [pc, #332]	@ (800a698 <_printf_i+0x238>)
 800a54c:	6033      	str	r3, [r6, #0]
 800a54e:	bf14      	ite	ne
 800a550:	230a      	movne	r3, #10
 800a552:	2308      	moveq	r3, #8
 800a554:	2100      	movs	r1, #0
 800a556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a55a:	6866      	ldr	r6, [r4, #4]
 800a55c:	60a6      	str	r6, [r4, #8]
 800a55e:	2e00      	cmp	r6, #0
 800a560:	bfa2      	ittt	ge
 800a562:	6821      	ldrge	r1, [r4, #0]
 800a564:	f021 0104 	bicge.w	r1, r1, #4
 800a568:	6021      	strge	r1, [r4, #0]
 800a56a:	b90d      	cbnz	r5, 800a570 <_printf_i+0x110>
 800a56c:	2e00      	cmp	r6, #0
 800a56e:	d04b      	beq.n	800a608 <_printf_i+0x1a8>
 800a570:	4616      	mov	r6, r2
 800a572:	fbb5 f1f3 	udiv	r1, r5, r3
 800a576:	fb03 5711 	mls	r7, r3, r1, r5
 800a57a:	5dc7      	ldrb	r7, [r0, r7]
 800a57c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a580:	462f      	mov	r7, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	460d      	mov	r5, r1
 800a586:	d9f4      	bls.n	800a572 <_printf_i+0x112>
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d10b      	bne.n	800a5a4 <_printf_i+0x144>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	07df      	lsls	r7, r3, #31
 800a590:	d508      	bpl.n	800a5a4 <_printf_i+0x144>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6861      	ldr	r1, [r4, #4]
 800a596:	4299      	cmp	r1, r3
 800a598:	bfde      	ittt	le
 800a59a:	2330      	movle	r3, #48	@ 0x30
 800a59c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a5a4:	1b92      	subs	r2, r2, r6
 800a5a6:	6122      	str	r2, [r4, #16]
 800a5a8:	f8cd a000 	str.w	sl, [sp]
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	aa03      	add	r2, sp, #12
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7ff fee6 	bl	800a384 <_printf_common>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	d14a      	bne.n	800a652 <_printf_i+0x1f2>
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5c0:	b004      	add	sp, #16
 800a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	f043 0320 	orr.w	r3, r3, #32
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	4833      	ldr	r0, [pc, #204]	@ (800a69c <_printf_i+0x23c>)
 800a5d0:	2778      	movs	r7, #120	@ 0x78
 800a5d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	6831      	ldr	r1, [r6, #0]
 800a5da:	061f      	lsls	r7, r3, #24
 800a5dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5e0:	d402      	bmi.n	800a5e8 <_printf_i+0x188>
 800a5e2:	065f      	lsls	r7, r3, #25
 800a5e4:	bf48      	it	mi
 800a5e6:	b2ad      	uxthmi	r5, r5
 800a5e8:	6031      	str	r1, [r6, #0]
 800a5ea:	07d9      	lsls	r1, r3, #31
 800a5ec:	bf44      	itt	mi
 800a5ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a5f2:	6023      	strmi	r3, [r4, #0]
 800a5f4:	b11d      	cbz	r5, 800a5fe <_printf_i+0x19e>
 800a5f6:	2310      	movs	r3, #16
 800a5f8:	e7ac      	b.n	800a554 <_printf_i+0xf4>
 800a5fa:	4827      	ldr	r0, [pc, #156]	@ (800a698 <_printf_i+0x238>)
 800a5fc:	e7e9      	b.n	800a5d2 <_printf_i+0x172>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	f023 0320 	bic.w	r3, r3, #32
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	e7f6      	b.n	800a5f6 <_printf_i+0x196>
 800a608:	4616      	mov	r6, r2
 800a60a:	e7bd      	b.n	800a588 <_printf_i+0x128>
 800a60c:	6833      	ldr	r3, [r6, #0]
 800a60e:	6825      	ldr	r5, [r4, #0]
 800a610:	6961      	ldr	r1, [r4, #20]
 800a612:	1d18      	adds	r0, r3, #4
 800a614:	6030      	str	r0, [r6, #0]
 800a616:	062e      	lsls	r6, r5, #24
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	d501      	bpl.n	800a620 <_printf_i+0x1c0>
 800a61c:	6019      	str	r1, [r3, #0]
 800a61e:	e002      	b.n	800a626 <_printf_i+0x1c6>
 800a620:	0668      	lsls	r0, r5, #25
 800a622:	d5fb      	bpl.n	800a61c <_printf_i+0x1bc>
 800a624:	8019      	strh	r1, [r3, #0]
 800a626:	2300      	movs	r3, #0
 800a628:	6123      	str	r3, [r4, #16]
 800a62a:	4616      	mov	r6, r2
 800a62c:	e7bc      	b.n	800a5a8 <_printf_i+0x148>
 800a62e:	6833      	ldr	r3, [r6, #0]
 800a630:	1d1a      	adds	r2, r3, #4
 800a632:	6032      	str	r2, [r6, #0]
 800a634:	681e      	ldr	r6, [r3, #0]
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	2100      	movs	r1, #0
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7f5 fde0 	bl	8000200 <memchr>
 800a640:	b108      	cbz	r0, 800a646 <_printf_i+0x1e6>
 800a642:	1b80      	subs	r0, r0, r6
 800a644:	6060      	str	r0, [r4, #4]
 800a646:	6863      	ldr	r3, [r4, #4]
 800a648:	6123      	str	r3, [r4, #16]
 800a64a:	2300      	movs	r3, #0
 800a64c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a650:	e7aa      	b.n	800a5a8 <_printf_i+0x148>
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	4632      	mov	r2, r6
 800a656:	4649      	mov	r1, r9
 800a658:	4640      	mov	r0, r8
 800a65a:	47d0      	blx	sl
 800a65c:	3001      	adds	r0, #1
 800a65e:	d0ad      	beq.n	800a5bc <_printf_i+0x15c>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	079b      	lsls	r3, r3, #30
 800a664:	d413      	bmi.n	800a68e <_printf_i+0x22e>
 800a666:	68e0      	ldr	r0, [r4, #12]
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	4298      	cmp	r0, r3
 800a66c:	bfb8      	it	lt
 800a66e:	4618      	movlt	r0, r3
 800a670:	e7a6      	b.n	800a5c0 <_printf_i+0x160>
 800a672:	2301      	movs	r3, #1
 800a674:	4632      	mov	r2, r6
 800a676:	4649      	mov	r1, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	47d0      	blx	sl
 800a67c:	3001      	adds	r0, #1
 800a67e:	d09d      	beq.n	800a5bc <_printf_i+0x15c>
 800a680:	3501      	adds	r5, #1
 800a682:	68e3      	ldr	r3, [r4, #12]
 800a684:	9903      	ldr	r1, [sp, #12]
 800a686:	1a5b      	subs	r3, r3, r1
 800a688:	42ab      	cmp	r3, r5
 800a68a:	dcf2      	bgt.n	800a672 <_printf_i+0x212>
 800a68c:	e7eb      	b.n	800a666 <_printf_i+0x206>
 800a68e:	2500      	movs	r5, #0
 800a690:	f104 0619 	add.w	r6, r4, #25
 800a694:	e7f5      	b.n	800a682 <_printf_i+0x222>
 800a696:	bf00      	nop
 800a698:	0800f032 	.word	0x0800f032
 800a69c:	0800f043 	.word	0x0800f043

0800a6a0 <_scanf_float>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	b087      	sub	sp, #28
 800a6a6:	4617      	mov	r7, r2
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	688b      	ldr	r3, [r1, #8]
 800a6ac:	1e5a      	subs	r2, r3, #1
 800a6ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6b2:	bf81      	itttt	hi
 800a6b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6b8:	eb03 0b05 	addhi.w	fp, r3, r5
 800a6bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6c0:	608b      	strhi	r3, [r1, #8]
 800a6c2:	680b      	ldr	r3, [r1, #0]
 800a6c4:	460a      	mov	r2, r1
 800a6c6:	f04f 0500 	mov.w	r5, #0
 800a6ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a6ce:	f842 3b1c 	str.w	r3, [r2], #28
 800a6d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	460c      	mov	r4, r1
 800a6da:	bf98      	it	ls
 800a6dc:	f04f 0b00 	movls.w	fp, #0
 800a6e0:	9201      	str	r2, [sp, #4]
 800a6e2:	4616      	mov	r6, r2
 800a6e4:	46aa      	mov	sl, r5
 800a6e6:	46a9      	mov	r9, r5
 800a6e8:	9502      	str	r5, [sp, #8]
 800a6ea:	68a2      	ldr	r2, [r4, #8]
 800a6ec:	b152      	cbz	r2, 800a704 <_scanf_float+0x64>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b4e      	cmp	r3, #78	@ 0x4e
 800a6f4:	d864      	bhi.n	800a7c0 <_scanf_float+0x120>
 800a6f6:	2b40      	cmp	r3, #64	@ 0x40
 800a6f8:	d83c      	bhi.n	800a774 <_scanf_float+0xd4>
 800a6fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a6fe:	b2c8      	uxtb	r0, r1
 800a700:	280e      	cmp	r0, #14
 800a702:	d93a      	bls.n	800a77a <_scanf_float+0xda>
 800a704:	f1b9 0f00 	cmp.w	r9, #0
 800a708:	d003      	beq.n	800a712 <_scanf_float+0x72>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a716:	f1ba 0f01 	cmp.w	sl, #1
 800a71a:	f200 8117 	bhi.w	800a94c <_scanf_float+0x2ac>
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	429e      	cmp	r6, r3
 800a722:	f200 8108 	bhi.w	800a936 <_scanf_float+0x296>
 800a726:	2001      	movs	r0, #1
 800a728:	b007      	add	sp, #28
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a732:	2a0d      	cmp	r2, #13
 800a734:	d8e6      	bhi.n	800a704 <_scanf_float+0x64>
 800a736:	a101      	add	r1, pc, #4	@ (adr r1, 800a73c <_scanf_float+0x9c>)
 800a738:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a73c:	0800a883 	.word	0x0800a883
 800a740:	0800a705 	.word	0x0800a705
 800a744:	0800a705 	.word	0x0800a705
 800a748:	0800a705 	.word	0x0800a705
 800a74c:	0800a8e3 	.word	0x0800a8e3
 800a750:	0800a8bb 	.word	0x0800a8bb
 800a754:	0800a705 	.word	0x0800a705
 800a758:	0800a705 	.word	0x0800a705
 800a75c:	0800a891 	.word	0x0800a891
 800a760:	0800a705 	.word	0x0800a705
 800a764:	0800a705 	.word	0x0800a705
 800a768:	0800a705 	.word	0x0800a705
 800a76c:	0800a705 	.word	0x0800a705
 800a770:	0800a849 	.word	0x0800a849
 800a774:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a778:	e7db      	b.n	800a732 <_scanf_float+0x92>
 800a77a:	290e      	cmp	r1, #14
 800a77c:	d8c2      	bhi.n	800a704 <_scanf_float+0x64>
 800a77e:	a001      	add	r0, pc, #4	@ (adr r0, 800a784 <_scanf_float+0xe4>)
 800a780:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a784:	0800a839 	.word	0x0800a839
 800a788:	0800a705 	.word	0x0800a705
 800a78c:	0800a839 	.word	0x0800a839
 800a790:	0800a8cf 	.word	0x0800a8cf
 800a794:	0800a705 	.word	0x0800a705
 800a798:	0800a7e1 	.word	0x0800a7e1
 800a79c:	0800a81f 	.word	0x0800a81f
 800a7a0:	0800a81f 	.word	0x0800a81f
 800a7a4:	0800a81f 	.word	0x0800a81f
 800a7a8:	0800a81f 	.word	0x0800a81f
 800a7ac:	0800a81f 	.word	0x0800a81f
 800a7b0:	0800a81f 	.word	0x0800a81f
 800a7b4:	0800a81f 	.word	0x0800a81f
 800a7b8:	0800a81f 	.word	0x0800a81f
 800a7bc:	0800a81f 	.word	0x0800a81f
 800a7c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800a7c2:	d809      	bhi.n	800a7d8 <_scanf_float+0x138>
 800a7c4:	2b60      	cmp	r3, #96	@ 0x60
 800a7c6:	d8b2      	bhi.n	800a72e <_scanf_float+0x8e>
 800a7c8:	2b54      	cmp	r3, #84	@ 0x54
 800a7ca:	d07b      	beq.n	800a8c4 <_scanf_float+0x224>
 800a7cc:	2b59      	cmp	r3, #89	@ 0x59
 800a7ce:	d199      	bne.n	800a704 <_scanf_float+0x64>
 800a7d0:	2d07      	cmp	r5, #7
 800a7d2:	d197      	bne.n	800a704 <_scanf_float+0x64>
 800a7d4:	2508      	movs	r5, #8
 800a7d6:	e02c      	b.n	800a832 <_scanf_float+0x192>
 800a7d8:	2b74      	cmp	r3, #116	@ 0x74
 800a7da:	d073      	beq.n	800a8c4 <_scanf_float+0x224>
 800a7dc:	2b79      	cmp	r3, #121	@ 0x79
 800a7de:	e7f6      	b.n	800a7ce <_scanf_float+0x12e>
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	05c8      	lsls	r0, r1, #23
 800a7e4:	d51b      	bpl.n	800a81e <_scanf_float+0x17e>
 800a7e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a7ea:	6021      	str	r1, [r4, #0]
 800a7ec:	f109 0901 	add.w	r9, r9, #1
 800a7f0:	f1bb 0f00 	cmp.w	fp, #0
 800a7f4:	d003      	beq.n	800a7fe <_scanf_float+0x15e>
 800a7f6:	3201      	adds	r2, #1
 800a7f8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a7fc:	60a2      	str	r2, [r4, #8]
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	3b01      	subs	r3, #1
 800a802:	60a3      	str	r3, [r4, #8]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	3301      	adds	r3, #1
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	607b      	str	r3, [r7, #4]
 800a812:	f340 8087 	ble.w	800a924 <_scanf_float+0x284>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	e765      	b.n	800a6ea <_scanf_float+0x4a>
 800a81e:	eb1a 0105 	adds.w	r1, sl, r5
 800a822:	f47f af6f 	bne.w	800a704 <_scanf_float+0x64>
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	460d      	mov	r5, r1
 800a830:	468a      	mov	sl, r1
 800a832:	f806 3b01 	strb.w	r3, [r6], #1
 800a836:	e7e2      	b.n	800a7fe <_scanf_float+0x15e>
 800a838:	6822      	ldr	r2, [r4, #0]
 800a83a:	0610      	lsls	r0, r2, #24
 800a83c:	f57f af62 	bpl.w	800a704 <_scanf_float+0x64>
 800a840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a844:	6022      	str	r2, [r4, #0]
 800a846:	e7f4      	b.n	800a832 <_scanf_float+0x192>
 800a848:	f1ba 0f00 	cmp.w	sl, #0
 800a84c:	d10e      	bne.n	800a86c <_scanf_float+0x1cc>
 800a84e:	f1b9 0f00 	cmp.w	r9, #0
 800a852:	d10e      	bne.n	800a872 <_scanf_float+0x1d2>
 800a854:	6822      	ldr	r2, [r4, #0]
 800a856:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a85a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a85e:	d108      	bne.n	800a872 <_scanf_float+0x1d2>
 800a860:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a864:	6022      	str	r2, [r4, #0]
 800a866:	f04f 0a01 	mov.w	sl, #1
 800a86a:	e7e2      	b.n	800a832 <_scanf_float+0x192>
 800a86c:	f1ba 0f02 	cmp.w	sl, #2
 800a870:	d055      	beq.n	800a91e <_scanf_float+0x27e>
 800a872:	2d01      	cmp	r5, #1
 800a874:	d002      	beq.n	800a87c <_scanf_float+0x1dc>
 800a876:	2d04      	cmp	r5, #4
 800a878:	f47f af44 	bne.w	800a704 <_scanf_float+0x64>
 800a87c:	3501      	adds	r5, #1
 800a87e:	b2ed      	uxtb	r5, r5
 800a880:	e7d7      	b.n	800a832 <_scanf_float+0x192>
 800a882:	f1ba 0f01 	cmp.w	sl, #1
 800a886:	f47f af3d 	bne.w	800a704 <_scanf_float+0x64>
 800a88a:	f04f 0a02 	mov.w	sl, #2
 800a88e:	e7d0      	b.n	800a832 <_scanf_float+0x192>
 800a890:	b97d      	cbnz	r5, 800a8b2 <_scanf_float+0x212>
 800a892:	f1b9 0f00 	cmp.w	r9, #0
 800a896:	f47f af38 	bne.w	800a70a <_scanf_float+0x6a>
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8a4:	f040 8108 	bne.w	800aab8 <_scanf_float+0x418>
 800a8a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8ac:	6022      	str	r2, [r4, #0]
 800a8ae:	2501      	movs	r5, #1
 800a8b0:	e7bf      	b.n	800a832 <_scanf_float+0x192>
 800a8b2:	2d03      	cmp	r5, #3
 800a8b4:	d0e2      	beq.n	800a87c <_scanf_float+0x1dc>
 800a8b6:	2d05      	cmp	r5, #5
 800a8b8:	e7de      	b.n	800a878 <_scanf_float+0x1d8>
 800a8ba:	2d02      	cmp	r5, #2
 800a8bc:	f47f af22 	bne.w	800a704 <_scanf_float+0x64>
 800a8c0:	2503      	movs	r5, #3
 800a8c2:	e7b6      	b.n	800a832 <_scanf_float+0x192>
 800a8c4:	2d06      	cmp	r5, #6
 800a8c6:	f47f af1d 	bne.w	800a704 <_scanf_float+0x64>
 800a8ca:	2507      	movs	r5, #7
 800a8cc:	e7b1      	b.n	800a832 <_scanf_float+0x192>
 800a8ce:	6822      	ldr	r2, [r4, #0]
 800a8d0:	0591      	lsls	r1, r2, #22
 800a8d2:	f57f af17 	bpl.w	800a704 <_scanf_float+0x64>
 800a8d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a8da:	6022      	str	r2, [r4, #0]
 800a8dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8e0:	e7a7      	b.n	800a832 <_scanf_float+0x192>
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a8e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a8ec:	d006      	beq.n	800a8fc <_scanf_float+0x25c>
 800a8ee:	0550      	lsls	r0, r2, #21
 800a8f0:	f57f af08 	bpl.w	800a704 <_scanf_float+0x64>
 800a8f4:	f1b9 0f00 	cmp.w	r9, #0
 800a8f8:	f000 80de 	beq.w	800aab8 <_scanf_float+0x418>
 800a8fc:	0591      	lsls	r1, r2, #22
 800a8fe:	bf58      	it	pl
 800a900:	9902      	ldrpl	r1, [sp, #8]
 800a902:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a906:	bf58      	it	pl
 800a908:	eba9 0101 	subpl.w	r1, r9, r1
 800a90c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a910:	bf58      	it	pl
 800a912:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	f04f 0900 	mov.w	r9, #0
 800a91c:	e789      	b.n	800a832 <_scanf_float+0x192>
 800a91e:	f04f 0a03 	mov.w	sl, #3
 800a922:	e786      	b.n	800a832 <_scanf_float+0x192>
 800a924:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a928:	4639      	mov	r1, r7
 800a92a:	4640      	mov	r0, r8
 800a92c:	4798      	blx	r3
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f aedb 	beq.w	800a6ea <_scanf_float+0x4a>
 800a934:	e6e6      	b.n	800a704 <_scanf_float+0x64>
 800a936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a93a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a93e:	463a      	mov	r2, r7
 800a940:	4640      	mov	r0, r8
 800a942:	4798      	blx	r3
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	3b01      	subs	r3, #1
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	e6e8      	b.n	800a71e <_scanf_float+0x7e>
 800a94c:	1e6b      	subs	r3, r5, #1
 800a94e:	2b06      	cmp	r3, #6
 800a950:	d824      	bhi.n	800a99c <_scanf_float+0x2fc>
 800a952:	2d02      	cmp	r5, #2
 800a954:	d836      	bhi.n	800a9c4 <_scanf_float+0x324>
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	429e      	cmp	r6, r3
 800a95a:	f67f aee4 	bls.w	800a726 <_scanf_float+0x86>
 800a95e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a966:	463a      	mov	r2, r7
 800a968:	4640      	mov	r0, r8
 800a96a:	4798      	blx	r3
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	3b01      	subs	r3, #1
 800a970:	6123      	str	r3, [r4, #16]
 800a972:	e7f0      	b.n	800a956 <_scanf_float+0x2b6>
 800a974:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a978:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a97c:	463a      	mov	r2, r7
 800a97e:	4640      	mov	r0, r8
 800a980:	4798      	blx	r3
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	3b01      	subs	r3, #1
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a98c:	fa5f fa8a 	uxtb.w	sl, sl
 800a990:	f1ba 0f02 	cmp.w	sl, #2
 800a994:	d1ee      	bne.n	800a974 <_scanf_float+0x2d4>
 800a996:	3d03      	subs	r5, #3
 800a998:	b2ed      	uxtb	r5, r5
 800a99a:	1b76      	subs	r6, r6, r5
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	05da      	lsls	r2, r3, #23
 800a9a0:	d530      	bpl.n	800aa04 <_scanf_float+0x364>
 800a9a2:	055b      	lsls	r3, r3, #21
 800a9a4:	d511      	bpl.n	800a9ca <_scanf_float+0x32a>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	429e      	cmp	r6, r3
 800a9aa:	f67f aebc 	bls.w	800a726 <_scanf_float+0x86>
 800a9ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4798      	blx	r3
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	e7f0      	b.n	800a9a6 <_scanf_float+0x306>
 800a9c4:	46aa      	mov	sl, r5
 800a9c6:	46b3      	mov	fp, r6
 800a9c8:	e7de      	b.n	800a988 <_scanf_float+0x2e8>
 800a9ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	2965      	cmp	r1, #101	@ 0x65
 800a9d2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a9d6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a9da:	6123      	str	r3, [r4, #16]
 800a9dc:	d00c      	beq.n	800a9f8 <_scanf_float+0x358>
 800a9de:	2945      	cmp	r1, #69	@ 0x45
 800a9e0:	d00a      	beq.n	800a9f8 <_scanf_float+0x358>
 800a9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9e6:	463a      	mov	r2, r7
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	4798      	blx	r3
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	1eb5      	subs	r5, r6, #2
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9fc:	463a      	mov	r2, r7
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4798      	blx	r3
 800aa02:	462e      	mov	r6, r5
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	f012 0210 	ands.w	r2, r2, #16
 800aa0a:	d001      	beq.n	800aa10 <_scanf_float+0x370>
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e68b      	b.n	800a728 <_scanf_float+0x88>
 800aa10:	7032      	strb	r2, [r6, #0]
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa1c:	d11c      	bne.n	800aa58 <_scanf_float+0x3b8>
 800aa1e:	9b02      	ldr	r3, [sp, #8]
 800aa20:	454b      	cmp	r3, r9
 800aa22:	eba3 0209 	sub.w	r2, r3, r9
 800aa26:	d123      	bne.n	800aa70 <_scanf_float+0x3d0>
 800aa28:	9901      	ldr	r1, [sp, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f000 ff13 	bl	800b858 <_strtod_r>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	6821      	ldr	r1, [r4, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f011 0f02 	tst.w	r1, #2
 800aa3c:	ec57 6b10 	vmov	r6, r7, d0
 800aa40:	f103 0204 	add.w	r2, r3, #4
 800aa44:	d01f      	beq.n	800aa86 <_scanf_float+0x3e6>
 800aa46:	9903      	ldr	r1, [sp, #12]
 800aa48:	600a      	str	r2, [r1, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	e9c3 6700 	strd	r6, r7, [r3]
 800aa50:	68e3      	ldr	r3, [r4, #12]
 800aa52:	3301      	adds	r3, #1
 800aa54:	60e3      	str	r3, [r4, #12]
 800aa56:	e7d9      	b.n	800aa0c <_scanf_float+0x36c>
 800aa58:	9b04      	ldr	r3, [sp, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0e4      	beq.n	800aa28 <_scanf_float+0x388>
 800aa5e:	9905      	ldr	r1, [sp, #20]
 800aa60:	230a      	movs	r3, #10
 800aa62:	3101      	adds	r1, #1
 800aa64:	4640      	mov	r0, r8
 800aa66:	f000 ff77 	bl	800b958 <_strtol_r>
 800aa6a:	9b04      	ldr	r3, [sp, #16]
 800aa6c:	9e05      	ldr	r6, [sp, #20]
 800aa6e:	1ac2      	subs	r2, r0, r3
 800aa70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa74:	429e      	cmp	r6, r3
 800aa76:	bf28      	it	cs
 800aa78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa7c:	4910      	ldr	r1, [pc, #64]	@ (800aac0 <_scanf_float+0x420>)
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 f822 	bl	800aac8 <siprintf>
 800aa84:	e7d0      	b.n	800aa28 <_scanf_float+0x388>
 800aa86:	f011 0f04 	tst.w	r1, #4
 800aa8a:	9903      	ldr	r1, [sp, #12]
 800aa8c:	600a      	str	r2, [r1, #0]
 800aa8e:	d1dc      	bne.n	800aa4a <_scanf_float+0x3aa>
 800aa90:	681d      	ldr	r5, [r3, #0]
 800aa92:	4632      	mov	r2, r6
 800aa94:	463b      	mov	r3, r7
 800aa96:	4630      	mov	r0, r6
 800aa98:	4639      	mov	r1, r7
 800aa9a:	f7f6 f85f 	bl	8000b5c <__aeabi_dcmpun>
 800aa9e:	b128      	cbz	r0, 800aaac <_scanf_float+0x40c>
 800aaa0:	4808      	ldr	r0, [pc, #32]	@ (800aac4 <_scanf_float+0x424>)
 800aaa2:	f001 f839 	bl	800bb18 <nanf>
 800aaa6:	ed85 0a00 	vstr	s0, [r5]
 800aaaa:	e7d1      	b.n	800aa50 <_scanf_float+0x3b0>
 800aaac:	4630      	mov	r0, r6
 800aaae:	4639      	mov	r1, r7
 800aab0:	f7f6 f8b2 	bl	8000c18 <__aeabi_d2f>
 800aab4:	6028      	str	r0, [r5, #0]
 800aab6:	e7cb      	b.n	800aa50 <_scanf_float+0x3b0>
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	e629      	b.n	800a712 <_scanf_float+0x72>
 800aabe:	bf00      	nop
 800aac0:	0800f054 	.word	0x0800f054
 800aac4:	0800f44b 	.word	0x0800f44b

0800aac8 <siprintf>:
 800aac8:	b40e      	push	{r1, r2, r3}
 800aaca:	b500      	push	{lr}
 800aacc:	b09c      	sub	sp, #112	@ 0x70
 800aace:	ab1d      	add	r3, sp, #116	@ 0x74
 800aad0:	9002      	str	r0, [sp, #8]
 800aad2:	9006      	str	r0, [sp, #24]
 800aad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aad8:	4809      	ldr	r0, [pc, #36]	@ (800ab00 <siprintf+0x38>)
 800aada:	9107      	str	r1, [sp, #28]
 800aadc:	9104      	str	r1, [sp, #16]
 800aade:	4909      	ldr	r1, [pc, #36]	@ (800ab04 <siprintf+0x3c>)
 800aae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae4:	9105      	str	r1, [sp, #20]
 800aae6:	6800      	ldr	r0, [r0, #0]
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	a902      	add	r1, sp, #8
 800aaec:	f002 f9fc 	bl	800cee8 <_svfiprintf_r>
 800aaf0:	9b02      	ldr	r3, [sp, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	b01c      	add	sp, #112	@ 0x70
 800aaf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aafc:	b003      	add	sp, #12
 800aafe:	4770      	bx	lr
 800ab00:	2000027c 	.word	0x2000027c
 800ab04:	ffff0208 	.word	0xffff0208

0800ab08 <std>:
 800ab08:	2300      	movs	r3, #0
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab16:	6083      	str	r3, [r0, #8]
 800ab18:	8181      	strh	r1, [r0, #12]
 800ab1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab1c:	81c2      	strh	r2, [r0, #14]
 800ab1e:	6183      	str	r3, [r0, #24]
 800ab20:	4619      	mov	r1, r3
 800ab22:	2208      	movs	r2, #8
 800ab24:	305c      	adds	r0, #92	@ 0x5c
 800ab26:	f000 ffa7 	bl	800ba78 <memset>
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <std+0x58>)
 800ab2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x5c>)
 800ab30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x60>)
 800ab34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x64>)
 800ab38:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x68>)
 800ab3c:	6224      	str	r4, [r4, #32]
 800ab3e:	429c      	cmp	r4, r3
 800ab40:	d006      	beq.n	800ab50 <std+0x48>
 800ab42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab46:	4294      	cmp	r4, r2
 800ab48:	d002      	beq.n	800ab50 <std+0x48>
 800ab4a:	33d0      	adds	r3, #208	@ 0xd0
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	d105      	bne.n	800ab5c <std+0x54>
 800ab50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab58:	f000 bfc4 	b.w	800bae4 <__retarget_lock_init_recursive>
 800ab5c:	bd10      	pop	{r4, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800dd2d 	.word	0x0800dd2d
 800ab64:	0800dd4f 	.word	0x0800dd4f
 800ab68:	0800dd87 	.word	0x0800dd87
 800ab6c:	0800ddab 	.word	0x0800ddab
 800ab70:	20001fc0 	.word	0x20001fc0

0800ab74 <stdio_exit_handler>:
 800ab74:	4a02      	ldr	r2, [pc, #8]	@ (800ab80 <stdio_exit_handler+0xc>)
 800ab76:	4903      	ldr	r1, [pc, #12]	@ (800ab84 <stdio_exit_handler+0x10>)
 800ab78:	4803      	ldr	r0, [pc, #12]	@ (800ab88 <stdio_exit_handler+0x14>)
 800ab7a:	f000 beef 	b.w	800b95c <_fwalk_sglue>
 800ab7e:	bf00      	nop
 800ab80:	20000104 	.word	0x20000104
 800ab84:	0800d361 	.word	0x0800d361
 800ab88:	20000280 	.word	0x20000280

0800ab8c <cleanup_stdio>:
 800ab8c:	6841      	ldr	r1, [r0, #4]
 800ab8e:	4b0c      	ldr	r3, [pc, #48]	@ (800abc0 <cleanup_stdio+0x34>)
 800ab90:	4299      	cmp	r1, r3
 800ab92:	b510      	push	{r4, lr}
 800ab94:	4604      	mov	r4, r0
 800ab96:	d001      	beq.n	800ab9c <cleanup_stdio+0x10>
 800ab98:	f002 fbe2 	bl	800d360 <_fflush_r>
 800ab9c:	68a1      	ldr	r1, [r4, #8]
 800ab9e:	4b09      	ldr	r3, [pc, #36]	@ (800abc4 <cleanup_stdio+0x38>)
 800aba0:	4299      	cmp	r1, r3
 800aba2:	d002      	beq.n	800abaa <cleanup_stdio+0x1e>
 800aba4:	4620      	mov	r0, r4
 800aba6:	f002 fbdb 	bl	800d360 <_fflush_r>
 800abaa:	68e1      	ldr	r1, [r4, #12]
 800abac:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <cleanup_stdio+0x3c>)
 800abae:	4299      	cmp	r1, r3
 800abb0:	d004      	beq.n	800abbc <cleanup_stdio+0x30>
 800abb2:	4620      	mov	r0, r4
 800abb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb8:	f002 bbd2 	b.w	800d360 <_fflush_r>
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	bf00      	nop
 800abc0:	20001fc0 	.word	0x20001fc0
 800abc4:	20002028 	.word	0x20002028
 800abc8:	20002090 	.word	0x20002090

0800abcc <global_stdio_init.part.0>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	4b0b      	ldr	r3, [pc, #44]	@ (800abfc <global_stdio_init.part.0+0x30>)
 800abd0:	4c0b      	ldr	r4, [pc, #44]	@ (800ac00 <global_stdio_init.part.0+0x34>)
 800abd2:	4a0c      	ldr	r2, [pc, #48]	@ (800ac04 <global_stdio_init.part.0+0x38>)
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	4620      	mov	r0, r4
 800abd8:	2200      	movs	r2, #0
 800abda:	2104      	movs	r1, #4
 800abdc:	f7ff ff94 	bl	800ab08 <std>
 800abe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abe4:	2201      	movs	r2, #1
 800abe6:	2109      	movs	r1, #9
 800abe8:	f7ff ff8e 	bl	800ab08 <std>
 800abec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abf0:	2202      	movs	r2, #2
 800abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf6:	2112      	movs	r1, #18
 800abf8:	f7ff bf86 	b.w	800ab08 <std>
 800abfc:	200020f8 	.word	0x200020f8
 800ac00:	20001fc0 	.word	0x20001fc0
 800ac04:	0800ab75 	.word	0x0800ab75

0800ac08 <__sfp_lock_acquire>:
 800ac08:	4801      	ldr	r0, [pc, #4]	@ (800ac10 <__sfp_lock_acquire+0x8>)
 800ac0a:	f000 bf6c 	b.w	800bae6 <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	200020fd 	.word	0x200020fd

0800ac14 <__sfp_lock_release>:
 800ac14:	4801      	ldr	r0, [pc, #4]	@ (800ac1c <__sfp_lock_release+0x8>)
 800ac16:	f000 bf67 	b.w	800bae8 <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	200020fd 	.word	0x200020fd

0800ac20 <__sinit>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	4604      	mov	r4, r0
 800ac24:	f7ff fff0 	bl	800ac08 <__sfp_lock_acquire>
 800ac28:	6a23      	ldr	r3, [r4, #32]
 800ac2a:	b11b      	cbz	r3, 800ac34 <__sinit+0x14>
 800ac2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac30:	f7ff bff0 	b.w	800ac14 <__sfp_lock_release>
 800ac34:	4b04      	ldr	r3, [pc, #16]	@ (800ac48 <__sinit+0x28>)
 800ac36:	6223      	str	r3, [r4, #32]
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <__sinit+0x2c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1f5      	bne.n	800ac2c <__sinit+0xc>
 800ac40:	f7ff ffc4 	bl	800abcc <global_stdio_init.part.0>
 800ac44:	e7f2      	b.n	800ac2c <__sinit+0xc>
 800ac46:	bf00      	nop
 800ac48:	0800ab8d 	.word	0x0800ab8d
 800ac4c:	200020f8 	.word	0x200020f8

0800ac50 <sulp>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	4604      	mov	r4, r0
 800ac54:	460d      	mov	r5, r1
 800ac56:	ec45 4b10 	vmov	d0, r4, r5
 800ac5a:	4616      	mov	r6, r2
 800ac5c:	f002 ff28 	bl	800dab0 <__ulp>
 800ac60:	ec51 0b10 	vmov	r0, r1, d0
 800ac64:	b17e      	cbz	r6, 800ac86 <sulp+0x36>
 800ac66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd09      	ble.n	800ac86 <sulp+0x36>
 800ac72:	051b      	lsls	r3, r3, #20
 800ac74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac78:	2400      	movs	r4, #0
 800ac7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac7e:	4622      	mov	r2, r4
 800ac80:	462b      	mov	r3, r5
 800ac82:	f7f5 fcd1 	bl	8000628 <__aeabi_dmul>
 800ac86:	ec41 0b10 	vmov	d0, r0, r1
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	0000      	movs	r0, r0
	...

0800ac90 <_strtod_l>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	b09f      	sub	sp, #124	@ 0x7c
 800ac96:	460c      	mov	r4, r1
 800ac98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ac9e:	9005      	str	r0, [sp, #20]
 800aca0:	f04f 0a00 	mov.w	sl, #0
 800aca4:	f04f 0b00 	mov.w	fp, #0
 800aca8:	460a      	mov	r2, r1
 800acaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800acac:	7811      	ldrb	r1, [r2, #0]
 800acae:	292b      	cmp	r1, #43	@ 0x2b
 800acb0:	d04a      	beq.n	800ad48 <_strtod_l+0xb8>
 800acb2:	d838      	bhi.n	800ad26 <_strtod_l+0x96>
 800acb4:	290d      	cmp	r1, #13
 800acb6:	d832      	bhi.n	800ad1e <_strtod_l+0x8e>
 800acb8:	2908      	cmp	r1, #8
 800acba:	d832      	bhi.n	800ad22 <_strtod_l+0x92>
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d03b      	beq.n	800ad38 <_strtod_l+0xa8>
 800acc0:	2200      	movs	r2, #0
 800acc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800acc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800acc6:	782a      	ldrb	r2, [r5, #0]
 800acc8:	2a30      	cmp	r2, #48	@ 0x30
 800acca:	f040 80b3 	bne.w	800ae34 <_strtod_l+0x1a4>
 800acce:	786a      	ldrb	r2, [r5, #1]
 800acd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acd4:	2a58      	cmp	r2, #88	@ 0x58
 800acd6:	d16e      	bne.n	800adb6 <_strtod_l+0x126>
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	ab1a      	add	r3, sp, #104	@ 0x68
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	4a8e      	ldr	r2, [pc, #568]	@ (800af1c <_strtod_l+0x28c>)
 800ace4:	9805      	ldr	r0, [sp, #20]
 800ace6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ace8:	a919      	add	r1, sp, #100	@ 0x64
 800acea:	f001 fdd1 	bl	800c890 <__gethex>
 800acee:	f010 060f 	ands.w	r6, r0, #15
 800acf2:	4604      	mov	r4, r0
 800acf4:	d005      	beq.n	800ad02 <_strtod_l+0x72>
 800acf6:	2e06      	cmp	r6, #6
 800acf8:	d128      	bne.n	800ad4c <_strtod_l+0xbc>
 800acfa:	3501      	adds	r5, #1
 800acfc:	2300      	movs	r3, #0
 800acfe:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f040 858e 	bne.w	800b826 <_strtod_l+0xb96>
 800ad0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad0c:	b1cb      	cbz	r3, 800ad42 <_strtod_l+0xb2>
 800ad0e:	4652      	mov	r2, sl
 800ad10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad14:	ec43 2b10 	vmov	d0, r2, r3
 800ad18:	b01f      	add	sp, #124	@ 0x7c
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	2920      	cmp	r1, #32
 800ad20:	d1ce      	bne.n	800acc0 <_strtod_l+0x30>
 800ad22:	3201      	adds	r2, #1
 800ad24:	e7c1      	b.n	800acaa <_strtod_l+0x1a>
 800ad26:	292d      	cmp	r1, #45	@ 0x2d
 800ad28:	d1ca      	bne.n	800acc0 <_strtod_l+0x30>
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad2e:	1c51      	adds	r1, r2, #1
 800ad30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad32:	7852      	ldrb	r2, [r2, #1]
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d1c5      	bne.n	800acc4 <_strtod_l+0x34>
 800ad38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 8570 	bne.w	800b822 <_strtod_l+0xb92>
 800ad42:	4652      	mov	r2, sl
 800ad44:	465b      	mov	r3, fp
 800ad46:	e7e5      	b.n	800ad14 <_strtod_l+0x84>
 800ad48:	2100      	movs	r1, #0
 800ad4a:	e7ef      	b.n	800ad2c <_strtod_l+0x9c>
 800ad4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad4e:	b13a      	cbz	r2, 800ad60 <_strtod_l+0xd0>
 800ad50:	2135      	movs	r1, #53	@ 0x35
 800ad52:	a81c      	add	r0, sp, #112	@ 0x70
 800ad54:	f002 ffa6 	bl	800dca4 <__copybits>
 800ad58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad5a:	9805      	ldr	r0, [sp, #20]
 800ad5c:	f002 fb74 	bl	800d448 <_Bfree>
 800ad60:	3e01      	subs	r6, #1
 800ad62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad64:	2e04      	cmp	r6, #4
 800ad66:	d806      	bhi.n	800ad76 <_strtod_l+0xe6>
 800ad68:	e8df f006 	tbb	[pc, r6]
 800ad6c:	201d0314 	.word	0x201d0314
 800ad70:	14          	.byte	0x14
 800ad71:	00          	.byte	0x00
 800ad72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad76:	05e1      	lsls	r1, r4, #23
 800ad78:	bf48      	it	mi
 800ad7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad82:	0d1b      	lsrs	r3, r3, #20
 800ad84:	051b      	lsls	r3, r3, #20
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1bb      	bne.n	800ad02 <_strtod_l+0x72>
 800ad8a:	f000 fe81 	bl	800ba90 <__errno>
 800ad8e:	2322      	movs	r3, #34	@ 0x22
 800ad90:	6003      	str	r3, [r0, #0]
 800ad92:	e7b6      	b.n	800ad02 <_strtod_l+0x72>
 800ad94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ad98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ada0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ada4:	e7e7      	b.n	800ad76 <_strtod_l+0xe6>
 800ada6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800af24 <_strtod_l+0x294>
 800adaa:	e7e4      	b.n	800ad76 <_strtod_l+0xe6>
 800adac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800adb0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800adb4:	e7df      	b.n	800ad76 <_strtod_l+0xe6>
 800adb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	9219      	str	r2, [sp, #100]	@ 0x64
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	2b30      	cmp	r3, #48	@ 0x30
 800adc0:	d0f9      	beq.n	800adb6 <_strtod_l+0x126>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d09d      	beq.n	800ad02 <_strtod_l+0x72>
 800adc6:	2301      	movs	r3, #1
 800adc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adcc:	930c      	str	r3, [sp, #48]	@ 0x30
 800adce:	2300      	movs	r3, #0
 800add0:	9308      	str	r3, [sp, #32]
 800add2:	930a      	str	r3, [sp, #40]	@ 0x28
 800add4:	461f      	mov	r7, r3
 800add6:	220a      	movs	r2, #10
 800add8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800adda:	7805      	ldrb	r5, [r0, #0]
 800addc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ade0:	b2d9      	uxtb	r1, r3
 800ade2:	2909      	cmp	r1, #9
 800ade4:	d928      	bls.n	800ae38 <_strtod_l+0x1a8>
 800ade6:	494e      	ldr	r1, [pc, #312]	@ (800af20 <_strtod_l+0x290>)
 800ade8:	2201      	movs	r2, #1
 800adea:	f000 fe33 	bl	800ba54 <strncmp>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d032      	beq.n	800ae58 <_strtod_l+0x1c8>
 800adf2:	2000      	movs	r0, #0
 800adf4:	462a      	mov	r2, r5
 800adf6:	4681      	mov	r9, r0
 800adf8:	463d      	mov	r5, r7
 800adfa:	4603      	mov	r3, r0
 800adfc:	2a65      	cmp	r2, #101	@ 0x65
 800adfe:	d001      	beq.n	800ae04 <_strtod_l+0x174>
 800ae00:	2a45      	cmp	r2, #69	@ 0x45
 800ae02:	d114      	bne.n	800ae2e <_strtod_l+0x19e>
 800ae04:	b91d      	cbnz	r5, 800ae0e <_strtod_l+0x17e>
 800ae06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae08:	4302      	orrs	r2, r0
 800ae0a:	d095      	beq.n	800ad38 <_strtod_l+0xa8>
 800ae0c:	2500      	movs	r5, #0
 800ae0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae10:	1c62      	adds	r2, r4, #1
 800ae12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae14:	7862      	ldrb	r2, [r4, #1]
 800ae16:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae18:	d077      	beq.n	800af0a <_strtod_l+0x27a>
 800ae1a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae1c:	d07b      	beq.n	800af16 <_strtod_l+0x286>
 800ae1e:	f04f 0c00 	mov.w	ip, #0
 800ae22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae26:	2909      	cmp	r1, #9
 800ae28:	f240 8082 	bls.w	800af30 <_strtod_l+0x2a0>
 800ae2c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	e0a2      	b.n	800af7a <_strtod_l+0x2ea>
 800ae34:	2300      	movs	r3, #0
 800ae36:	e7c7      	b.n	800adc8 <_strtod_l+0x138>
 800ae38:	2f08      	cmp	r7, #8
 800ae3a:	bfd5      	itete	le
 800ae3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ae3e:	9908      	ldrgt	r1, [sp, #32]
 800ae40:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae44:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ae48:	f100 0001 	add.w	r0, r0, #1
 800ae4c:	bfd4      	ite	le
 800ae4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ae50:	9308      	strgt	r3, [sp, #32]
 800ae52:	3701      	adds	r7, #1
 800ae54:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae56:	e7bf      	b.n	800add8 <_strtod_l+0x148>
 800ae58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae5e:	785a      	ldrb	r2, [r3, #1]
 800ae60:	b37f      	cbz	r7, 800aec2 <_strtod_l+0x232>
 800ae62:	4681      	mov	r9, r0
 800ae64:	463d      	mov	r5, r7
 800ae66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae6a:	2b09      	cmp	r3, #9
 800ae6c:	d912      	bls.n	800ae94 <_strtod_l+0x204>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e7c4      	b.n	800adfc <_strtod_l+0x16c>
 800ae72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae78:	785a      	ldrb	r2, [r3, #1]
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	2a30      	cmp	r2, #48	@ 0x30
 800ae7e:	d0f8      	beq.n	800ae72 <_strtod_l+0x1e2>
 800ae80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	f200 84d3 	bhi.w	800b830 <_strtod_l+0xba0>
 800ae8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae8e:	4681      	mov	r9, r0
 800ae90:	2000      	movs	r0, #0
 800ae92:	4605      	mov	r5, r0
 800ae94:	3a30      	subs	r2, #48	@ 0x30
 800ae96:	f100 0301 	add.w	r3, r0, #1
 800ae9a:	d02a      	beq.n	800aef2 <_strtod_l+0x262>
 800ae9c:	4499      	add	r9, r3
 800ae9e:	eb00 0c05 	add.w	ip, r0, r5
 800aea2:	462b      	mov	r3, r5
 800aea4:	210a      	movs	r1, #10
 800aea6:	4563      	cmp	r3, ip
 800aea8:	d10d      	bne.n	800aec6 <_strtod_l+0x236>
 800aeaa:	1c69      	adds	r1, r5, #1
 800aeac:	4401      	add	r1, r0
 800aeae:	4428      	add	r0, r5
 800aeb0:	2808      	cmp	r0, #8
 800aeb2:	dc16      	bgt.n	800aee2 <_strtod_l+0x252>
 800aeb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aeb6:	230a      	movs	r3, #10
 800aeb8:	fb03 2300 	mla	r3, r3, r0, r2
 800aebc:	930a      	str	r3, [sp, #40]	@ 0x28
 800aebe:	2300      	movs	r3, #0
 800aec0:	e018      	b.n	800aef4 <_strtod_l+0x264>
 800aec2:	4638      	mov	r0, r7
 800aec4:	e7da      	b.n	800ae7c <_strtod_l+0x1ec>
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	f103 0301 	add.w	r3, r3, #1
 800aecc:	dc03      	bgt.n	800aed6 <_strtod_l+0x246>
 800aece:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aed0:	434e      	muls	r6, r1
 800aed2:	960a      	str	r6, [sp, #40]	@ 0x28
 800aed4:	e7e7      	b.n	800aea6 <_strtod_l+0x216>
 800aed6:	2b10      	cmp	r3, #16
 800aed8:	bfde      	ittt	le
 800aeda:	9e08      	ldrle	r6, [sp, #32]
 800aedc:	434e      	mulle	r6, r1
 800aede:	9608      	strle	r6, [sp, #32]
 800aee0:	e7e1      	b.n	800aea6 <_strtod_l+0x216>
 800aee2:	280f      	cmp	r0, #15
 800aee4:	dceb      	bgt.n	800aebe <_strtod_l+0x22e>
 800aee6:	9808      	ldr	r0, [sp, #32]
 800aee8:	230a      	movs	r3, #10
 800aeea:	fb03 2300 	mla	r3, r3, r0, r2
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	e7e5      	b.n	800aebe <_strtod_l+0x22e>
 800aef2:	4629      	mov	r1, r5
 800aef4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aef6:	1c50      	adds	r0, r2, #1
 800aef8:	9019      	str	r0, [sp, #100]	@ 0x64
 800aefa:	7852      	ldrb	r2, [r2, #1]
 800aefc:	4618      	mov	r0, r3
 800aefe:	460d      	mov	r5, r1
 800af00:	e7b1      	b.n	800ae66 <_strtod_l+0x1d6>
 800af02:	f04f 0900 	mov.w	r9, #0
 800af06:	2301      	movs	r3, #1
 800af08:	e77d      	b.n	800ae06 <_strtod_l+0x176>
 800af0a:	f04f 0c00 	mov.w	ip, #0
 800af0e:	1ca2      	adds	r2, r4, #2
 800af10:	9219      	str	r2, [sp, #100]	@ 0x64
 800af12:	78a2      	ldrb	r2, [r4, #2]
 800af14:	e785      	b.n	800ae22 <_strtod_l+0x192>
 800af16:	f04f 0c01 	mov.w	ip, #1
 800af1a:	e7f8      	b.n	800af0e <_strtod_l+0x27e>
 800af1c:	0800f070 	.word	0x0800f070
 800af20:	0800f059 	.word	0x0800f059
 800af24:	7ff00000 	.word	0x7ff00000
 800af28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af2a:	1c51      	adds	r1, r2, #1
 800af2c:	9119      	str	r1, [sp, #100]	@ 0x64
 800af2e:	7852      	ldrb	r2, [r2, #1]
 800af30:	2a30      	cmp	r2, #48	@ 0x30
 800af32:	d0f9      	beq.n	800af28 <_strtod_l+0x298>
 800af34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af38:	2908      	cmp	r1, #8
 800af3a:	f63f af78 	bhi.w	800ae2e <_strtod_l+0x19e>
 800af3e:	3a30      	subs	r2, #48	@ 0x30
 800af40:	920e      	str	r2, [sp, #56]	@ 0x38
 800af42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af44:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af46:	f04f 080a 	mov.w	r8, #10
 800af4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af4c:	1c56      	adds	r6, r2, #1
 800af4e:	9619      	str	r6, [sp, #100]	@ 0x64
 800af50:	7852      	ldrb	r2, [r2, #1]
 800af52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800af56:	f1be 0f09 	cmp.w	lr, #9
 800af5a:	d939      	bls.n	800afd0 <_strtod_l+0x340>
 800af5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af5e:	1a76      	subs	r6, r6, r1
 800af60:	2e08      	cmp	r6, #8
 800af62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800af66:	dc03      	bgt.n	800af70 <_strtod_l+0x2e0>
 800af68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af6a:	4588      	cmp	r8, r1
 800af6c:	bfa8      	it	ge
 800af6e:	4688      	movge	r8, r1
 800af70:	f1bc 0f00 	cmp.w	ip, #0
 800af74:	d001      	beq.n	800af7a <_strtod_l+0x2ea>
 800af76:	f1c8 0800 	rsb	r8, r8, #0
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d14e      	bne.n	800b01c <_strtod_l+0x38c>
 800af7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af80:	4308      	orrs	r0, r1
 800af82:	f47f aebe 	bne.w	800ad02 <_strtod_l+0x72>
 800af86:	2b00      	cmp	r3, #0
 800af88:	f47f aed6 	bne.w	800ad38 <_strtod_l+0xa8>
 800af8c:	2a69      	cmp	r2, #105	@ 0x69
 800af8e:	d028      	beq.n	800afe2 <_strtod_l+0x352>
 800af90:	dc25      	bgt.n	800afde <_strtod_l+0x34e>
 800af92:	2a49      	cmp	r2, #73	@ 0x49
 800af94:	d025      	beq.n	800afe2 <_strtod_l+0x352>
 800af96:	2a4e      	cmp	r2, #78	@ 0x4e
 800af98:	f47f aece 	bne.w	800ad38 <_strtod_l+0xa8>
 800af9c:	499b      	ldr	r1, [pc, #620]	@ (800b20c <_strtod_l+0x57c>)
 800af9e:	a819      	add	r0, sp, #100	@ 0x64
 800afa0:	f001 fe98 	bl	800ccd4 <__match>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	f43f aec7 	beq.w	800ad38 <_strtod_l+0xa8>
 800afaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b28      	cmp	r3, #40	@ 0x28
 800afb0:	d12e      	bne.n	800b010 <_strtod_l+0x380>
 800afb2:	4997      	ldr	r1, [pc, #604]	@ (800b210 <_strtod_l+0x580>)
 800afb4:	aa1c      	add	r2, sp, #112	@ 0x70
 800afb6:	a819      	add	r0, sp, #100	@ 0x64
 800afb8:	f001 fea0 	bl	800ccfc <__hexnan>
 800afbc:	2805      	cmp	r0, #5
 800afbe:	d127      	bne.n	800b010 <_strtod_l+0x380>
 800afc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afc2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800afc6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800afca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800afce:	e698      	b.n	800ad02 <_strtod_l+0x72>
 800afd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afd2:	fb08 2101 	mla	r1, r8, r1, r2
 800afd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800afda:	920e      	str	r2, [sp, #56]	@ 0x38
 800afdc:	e7b5      	b.n	800af4a <_strtod_l+0x2ba>
 800afde:	2a6e      	cmp	r2, #110	@ 0x6e
 800afe0:	e7da      	b.n	800af98 <_strtod_l+0x308>
 800afe2:	498c      	ldr	r1, [pc, #560]	@ (800b214 <_strtod_l+0x584>)
 800afe4:	a819      	add	r0, sp, #100	@ 0x64
 800afe6:	f001 fe75 	bl	800ccd4 <__match>
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f aea4 	beq.w	800ad38 <_strtod_l+0xa8>
 800aff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aff2:	4989      	ldr	r1, [pc, #548]	@ (800b218 <_strtod_l+0x588>)
 800aff4:	3b01      	subs	r3, #1
 800aff6:	a819      	add	r0, sp, #100	@ 0x64
 800aff8:	9319      	str	r3, [sp, #100]	@ 0x64
 800affa:	f001 fe6b 	bl	800ccd4 <__match>
 800affe:	b910      	cbnz	r0, 800b006 <_strtod_l+0x376>
 800b000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b002:	3301      	adds	r3, #1
 800b004:	9319      	str	r3, [sp, #100]	@ 0x64
 800b006:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b228 <_strtod_l+0x598>
 800b00a:	f04f 0a00 	mov.w	sl, #0
 800b00e:	e678      	b.n	800ad02 <_strtod_l+0x72>
 800b010:	4882      	ldr	r0, [pc, #520]	@ (800b21c <_strtod_l+0x58c>)
 800b012:	f000 fd79 	bl	800bb08 <nan>
 800b016:	ec5b ab10 	vmov	sl, fp, d0
 800b01a:	e672      	b.n	800ad02 <_strtod_l+0x72>
 800b01c:	eba8 0309 	sub.w	r3, r8, r9
 800b020:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b022:	9309      	str	r3, [sp, #36]	@ 0x24
 800b024:	2f00      	cmp	r7, #0
 800b026:	bf08      	it	eq
 800b028:	462f      	moveq	r7, r5
 800b02a:	2d10      	cmp	r5, #16
 800b02c:	462c      	mov	r4, r5
 800b02e:	bfa8      	it	ge
 800b030:	2410      	movge	r4, #16
 800b032:	f7f5 fa7f 	bl	8000534 <__aeabi_ui2d>
 800b036:	2d09      	cmp	r5, #9
 800b038:	4682      	mov	sl, r0
 800b03a:	468b      	mov	fp, r1
 800b03c:	dc13      	bgt.n	800b066 <_strtod_l+0x3d6>
 800b03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	f43f ae5e 	beq.w	800ad02 <_strtod_l+0x72>
 800b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b048:	dd78      	ble.n	800b13c <_strtod_l+0x4ac>
 800b04a:	2b16      	cmp	r3, #22
 800b04c:	dc5f      	bgt.n	800b10e <_strtod_l+0x47e>
 800b04e:	4974      	ldr	r1, [pc, #464]	@ (800b220 <_strtod_l+0x590>)
 800b050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b058:	4652      	mov	r2, sl
 800b05a:	465b      	mov	r3, fp
 800b05c:	f7f5 fae4 	bl	8000628 <__aeabi_dmul>
 800b060:	4682      	mov	sl, r0
 800b062:	468b      	mov	fp, r1
 800b064:	e64d      	b.n	800ad02 <_strtod_l+0x72>
 800b066:	4b6e      	ldr	r3, [pc, #440]	@ (800b220 <_strtod_l+0x590>)
 800b068:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b06c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b070:	f7f5 fada 	bl	8000628 <__aeabi_dmul>
 800b074:	4682      	mov	sl, r0
 800b076:	9808      	ldr	r0, [sp, #32]
 800b078:	468b      	mov	fp, r1
 800b07a:	f7f5 fa5b 	bl	8000534 <__aeabi_ui2d>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4650      	mov	r0, sl
 800b084:	4659      	mov	r1, fp
 800b086:	f7f5 f919 	bl	80002bc <__adddf3>
 800b08a:	2d0f      	cmp	r5, #15
 800b08c:	4682      	mov	sl, r0
 800b08e:	468b      	mov	fp, r1
 800b090:	ddd5      	ble.n	800b03e <_strtod_l+0x3ae>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	1b2c      	subs	r4, r5, r4
 800b096:	441c      	add	r4, r3
 800b098:	2c00      	cmp	r4, #0
 800b09a:	f340 8096 	ble.w	800b1ca <_strtod_l+0x53a>
 800b09e:	f014 030f 	ands.w	r3, r4, #15
 800b0a2:	d00a      	beq.n	800b0ba <_strtod_l+0x42a>
 800b0a4:	495e      	ldr	r1, [pc, #376]	@ (800b220 <_strtod_l+0x590>)
 800b0a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b2:	f7f5 fab9 	bl	8000628 <__aeabi_dmul>
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	468b      	mov	fp, r1
 800b0ba:	f034 040f 	bics.w	r4, r4, #15
 800b0be:	d073      	beq.n	800b1a8 <_strtod_l+0x518>
 800b0c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b0c4:	dd48      	ble.n	800b158 <_strtod_l+0x4c8>
 800b0c6:	2400      	movs	r4, #0
 800b0c8:	46a0      	mov	r8, r4
 800b0ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0cc:	46a1      	mov	r9, r4
 800b0ce:	9a05      	ldr	r2, [sp, #20]
 800b0d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b228 <_strtod_l+0x598>
 800b0d4:	2322      	movs	r3, #34	@ 0x22
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	f04f 0a00 	mov.w	sl, #0
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f43f ae0f 	beq.w	800ad02 <_strtod_l+0x72>
 800b0e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0e6:	9805      	ldr	r0, [sp, #20]
 800b0e8:	f002 f9ae 	bl	800d448 <_Bfree>
 800b0ec:	9805      	ldr	r0, [sp, #20]
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f002 f9aa 	bl	800d448 <_Bfree>
 800b0f4:	9805      	ldr	r0, [sp, #20]
 800b0f6:	4641      	mov	r1, r8
 800b0f8:	f002 f9a6 	bl	800d448 <_Bfree>
 800b0fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0fe:	9805      	ldr	r0, [sp, #20]
 800b100:	f002 f9a2 	bl	800d448 <_Bfree>
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	4621      	mov	r1, r4
 800b108:	f002 f99e 	bl	800d448 <_Bfree>
 800b10c:	e5f9      	b.n	800ad02 <_strtod_l+0x72>
 800b10e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b110:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b114:	4293      	cmp	r3, r2
 800b116:	dbbc      	blt.n	800b092 <_strtod_l+0x402>
 800b118:	4c41      	ldr	r4, [pc, #260]	@ (800b220 <_strtod_l+0x590>)
 800b11a:	f1c5 050f 	rsb	r5, r5, #15
 800b11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12a:	f7f5 fa7d 	bl	8000628 <__aeabi_dmul>
 800b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b130:	1b5d      	subs	r5, r3, r5
 800b132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b13a:	e78f      	b.n	800b05c <_strtod_l+0x3cc>
 800b13c:	3316      	adds	r3, #22
 800b13e:	dba8      	blt.n	800b092 <_strtod_l+0x402>
 800b140:	4b37      	ldr	r3, [pc, #220]	@ (800b220 <_strtod_l+0x590>)
 800b142:	eba9 0808 	sub.w	r8, r9, r8
 800b146:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b14a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b14e:	4650      	mov	r0, sl
 800b150:	4659      	mov	r1, fp
 800b152:	f7f5 fb93 	bl	800087c <__aeabi_ddiv>
 800b156:	e783      	b.n	800b060 <_strtod_l+0x3d0>
 800b158:	4b32      	ldr	r3, [pc, #200]	@ (800b224 <_strtod_l+0x594>)
 800b15a:	9308      	str	r3, [sp, #32]
 800b15c:	2300      	movs	r3, #0
 800b15e:	1124      	asrs	r4, r4, #4
 800b160:	4650      	mov	r0, sl
 800b162:	4659      	mov	r1, fp
 800b164:	461e      	mov	r6, r3
 800b166:	2c01      	cmp	r4, #1
 800b168:	dc21      	bgt.n	800b1ae <_strtod_l+0x51e>
 800b16a:	b10b      	cbz	r3, 800b170 <_strtod_l+0x4e0>
 800b16c:	4682      	mov	sl, r0
 800b16e:	468b      	mov	fp, r1
 800b170:	492c      	ldr	r1, [pc, #176]	@ (800b224 <_strtod_l+0x594>)
 800b172:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b176:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b182:	f7f5 fa51 	bl	8000628 <__aeabi_dmul>
 800b186:	4b28      	ldr	r3, [pc, #160]	@ (800b228 <_strtod_l+0x598>)
 800b188:	460a      	mov	r2, r1
 800b18a:	400b      	ands	r3, r1
 800b18c:	4927      	ldr	r1, [pc, #156]	@ (800b22c <_strtod_l+0x59c>)
 800b18e:	428b      	cmp	r3, r1
 800b190:	4682      	mov	sl, r0
 800b192:	d898      	bhi.n	800b0c6 <_strtod_l+0x436>
 800b194:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b198:	428b      	cmp	r3, r1
 800b19a:	bf86      	itte	hi
 800b19c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b230 <_strtod_l+0x5a0>
 800b1a0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b1a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9308      	str	r3, [sp, #32]
 800b1ac:	e07a      	b.n	800b2a4 <_strtod_l+0x614>
 800b1ae:	07e2      	lsls	r2, r4, #31
 800b1b0:	d505      	bpl.n	800b1be <_strtod_l+0x52e>
 800b1b2:	9b08      	ldr	r3, [sp, #32]
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 fa36 	bl	8000628 <__aeabi_dmul>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	9a08      	ldr	r2, [sp, #32]
 800b1c0:	3208      	adds	r2, #8
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	1064      	asrs	r4, r4, #1
 800b1c6:	9208      	str	r2, [sp, #32]
 800b1c8:	e7cd      	b.n	800b166 <_strtod_l+0x4d6>
 800b1ca:	d0ed      	beq.n	800b1a8 <_strtod_l+0x518>
 800b1cc:	4264      	negs	r4, r4
 800b1ce:	f014 020f 	ands.w	r2, r4, #15
 800b1d2:	d00a      	beq.n	800b1ea <_strtod_l+0x55a>
 800b1d4:	4b12      	ldr	r3, [pc, #72]	@ (800b220 <_strtod_l+0x590>)
 800b1d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4659      	mov	r1, fp
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	f7f5 fb4b 	bl	800087c <__aeabi_ddiv>
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	468b      	mov	fp, r1
 800b1ea:	1124      	asrs	r4, r4, #4
 800b1ec:	d0dc      	beq.n	800b1a8 <_strtod_l+0x518>
 800b1ee:	2c1f      	cmp	r4, #31
 800b1f0:	dd20      	ble.n	800b234 <_strtod_l+0x5a4>
 800b1f2:	2400      	movs	r4, #0
 800b1f4:	46a0      	mov	r8, r4
 800b1f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1f8:	46a1      	mov	r9, r4
 800b1fa:	9a05      	ldr	r2, [sp, #20]
 800b1fc:	2322      	movs	r3, #34	@ 0x22
 800b1fe:	f04f 0a00 	mov.w	sl, #0
 800b202:	f04f 0b00 	mov.w	fp, #0
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e768      	b.n	800b0dc <_strtod_l+0x44c>
 800b20a:	bf00      	nop
 800b20c:	0800f02d 	.word	0x0800f02d
 800b210:	0800f05c 	.word	0x0800f05c
 800b214:	0800f025 	.word	0x0800f025
 800b218:	0800f1bc 	.word	0x0800f1bc
 800b21c:	0800f44b 	.word	0x0800f44b
 800b220:	0800f348 	.word	0x0800f348
 800b224:	0800f320 	.word	0x0800f320
 800b228:	7ff00000 	.word	0x7ff00000
 800b22c:	7ca00000 	.word	0x7ca00000
 800b230:	7fefffff 	.word	0x7fefffff
 800b234:	f014 0310 	ands.w	r3, r4, #16
 800b238:	bf18      	it	ne
 800b23a:	236a      	movne	r3, #106	@ 0x6a
 800b23c:	4ea9      	ldr	r6, [pc, #676]	@ (800b4e4 <_strtod_l+0x854>)
 800b23e:	9308      	str	r3, [sp, #32]
 800b240:	4650      	mov	r0, sl
 800b242:	4659      	mov	r1, fp
 800b244:	2300      	movs	r3, #0
 800b246:	07e2      	lsls	r2, r4, #31
 800b248:	d504      	bpl.n	800b254 <_strtod_l+0x5c4>
 800b24a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b24e:	f7f5 f9eb 	bl	8000628 <__aeabi_dmul>
 800b252:	2301      	movs	r3, #1
 800b254:	1064      	asrs	r4, r4, #1
 800b256:	f106 0608 	add.w	r6, r6, #8
 800b25a:	d1f4      	bne.n	800b246 <_strtod_l+0x5b6>
 800b25c:	b10b      	cbz	r3, 800b262 <_strtod_l+0x5d2>
 800b25e:	4682      	mov	sl, r0
 800b260:	468b      	mov	fp, r1
 800b262:	9b08      	ldr	r3, [sp, #32]
 800b264:	b1b3      	cbz	r3, 800b294 <_strtod_l+0x604>
 800b266:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b26a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b26e:	2b00      	cmp	r3, #0
 800b270:	4659      	mov	r1, fp
 800b272:	dd0f      	ble.n	800b294 <_strtod_l+0x604>
 800b274:	2b1f      	cmp	r3, #31
 800b276:	dd55      	ble.n	800b324 <_strtod_l+0x694>
 800b278:	2b34      	cmp	r3, #52	@ 0x34
 800b27a:	bfde      	ittt	le
 800b27c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b280:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b284:	4093      	lslle	r3, r2
 800b286:	f04f 0a00 	mov.w	sl, #0
 800b28a:	bfcc      	ite	gt
 800b28c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b290:	ea03 0b01 	andle.w	fp, r3, r1
 800b294:	2200      	movs	r2, #0
 800b296:	2300      	movs	r3, #0
 800b298:	4650      	mov	r0, sl
 800b29a:	4659      	mov	r1, fp
 800b29c:	f7f5 fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d1a6      	bne.n	800b1f2 <_strtod_l+0x562>
 800b2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2aa:	9805      	ldr	r0, [sp, #20]
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	463a      	mov	r2, r7
 800b2b0:	f002 f932 	bl	800d518 <__s2b>
 800b2b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f43f af05 	beq.w	800b0c6 <_strtod_l+0x436>
 800b2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	eba9 0308 	sub.w	r3, r9, r8
 800b2c4:	bfa8      	it	ge
 800b2c6:	2300      	movge	r3, #0
 800b2c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b2d2:	46a0      	mov	r8, r4
 800b2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2d6:	9805      	ldr	r0, [sp, #20]
 800b2d8:	6859      	ldr	r1, [r3, #4]
 800b2da:	f002 f875 	bl	800d3c8 <_Balloc>
 800b2de:	4681      	mov	r9, r0
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f43f aef4 	beq.w	800b0ce <_strtod_l+0x43e>
 800b2e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2e8:	691a      	ldr	r2, [r3, #16]
 800b2ea:	3202      	adds	r2, #2
 800b2ec:	f103 010c 	add.w	r1, r3, #12
 800b2f0:	0092      	lsls	r2, r2, #2
 800b2f2:	300c      	adds	r0, #12
 800b2f4:	f000 fbf9 	bl	800baea <memcpy>
 800b2f8:	ec4b ab10 	vmov	d0, sl, fp
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800b300:	a91b      	add	r1, sp, #108	@ 0x6c
 800b302:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b306:	f002 fc43 	bl	800db90 <__d2b>
 800b30a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f43f aede 	beq.w	800b0ce <_strtod_l+0x43e>
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	2101      	movs	r1, #1
 800b316:	f002 f995 	bl	800d644 <__i2b>
 800b31a:	4680      	mov	r8, r0
 800b31c:	b948      	cbnz	r0, 800b332 <_strtod_l+0x6a2>
 800b31e:	f04f 0800 	mov.w	r8, #0
 800b322:	e6d4      	b.n	800b0ce <_strtod_l+0x43e>
 800b324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b328:	fa02 f303 	lsl.w	r3, r2, r3
 800b32c:	ea03 0a0a 	and.w	sl, r3, sl
 800b330:	e7b0      	b.n	800b294 <_strtod_l+0x604>
 800b332:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b334:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b336:	2d00      	cmp	r5, #0
 800b338:	bfab      	itete	ge
 800b33a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b33c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b33e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b340:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b342:	bfac      	ite	ge
 800b344:	18ef      	addge	r7, r5, r3
 800b346:	1b5e      	sublt	r6, r3, r5
 800b348:	9b08      	ldr	r3, [sp, #32]
 800b34a:	1aed      	subs	r5, r5, r3
 800b34c:	4415      	add	r5, r2
 800b34e:	4b66      	ldr	r3, [pc, #408]	@ (800b4e8 <_strtod_l+0x858>)
 800b350:	3d01      	subs	r5, #1
 800b352:	429d      	cmp	r5, r3
 800b354:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b358:	da50      	bge.n	800b3fc <_strtod_l+0x76c>
 800b35a:	1b5b      	subs	r3, r3, r5
 800b35c:	2b1f      	cmp	r3, #31
 800b35e:	eba2 0203 	sub.w	r2, r2, r3
 800b362:	f04f 0101 	mov.w	r1, #1
 800b366:	dc3d      	bgt.n	800b3e4 <_strtod_l+0x754>
 800b368:	fa01 f303 	lsl.w	r3, r1, r3
 800b36c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b36e:	2300      	movs	r3, #0
 800b370:	9310      	str	r3, [sp, #64]	@ 0x40
 800b372:	18bd      	adds	r5, r7, r2
 800b374:	9b08      	ldr	r3, [sp, #32]
 800b376:	42af      	cmp	r7, r5
 800b378:	4416      	add	r6, r2
 800b37a:	441e      	add	r6, r3
 800b37c:	463b      	mov	r3, r7
 800b37e:	bfa8      	it	ge
 800b380:	462b      	movge	r3, r5
 800b382:	42b3      	cmp	r3, r6
 800b384:	bfa8      	it	ge
 800b386:	4633      	movge	r3, r6
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfc2      	ittt	gt
 800b38c:	1aed      	subgt	r5, r5, r3
 800b38e:	1af6      	subgt	r6, r6, r3
 800b390:	1aff      	subgt	r7, r7, r3
 800b392:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b394:	2b00      	cmp	r3, #0
 800b396:	dd16      	ble.n	800b3c6 <_strtod_l+0x736>
 800b398:	4641      	mov	r1, r8
 800b39a:	9805      	ldr	r0, [sp, #20]
 800b39c:	461a      	mov	r2, r3
 800b39e:	f002 fa11 	bl	800d7c4 <__pow5mult>
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0ba      	beq.n	800b31e <_strtod_l+0x68e>
 800b3a8:	4601      	mov	r1, r0
 800b3aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3ac:	9805      	ldr	r0, [sp, #20]
 800b3ae:	f002 f95f 	bl	800d670 <__multiply>
 800b3b2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f43f ae8a 	beq.w	800b0ce <_strtod_l+0x43e>
 800b3ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3bc:	9805      	ldr	r0, [sp, #20]
 800b3be:	f002 f843 	bl	800d448 <_Bfree>
 800b3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3c6:	2d00      	cmp	r5, #0
 800b3c8:	dc1d      	bgt.n	800b406 <_strtod_l+0x776>
 800b3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd23      	ble.n	800b418 <_strtod_l+0x788>
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3d4:	9805      	ldr	r0, [sp, #20]
 800b3d6:	f002 f9f5 	bl	800d7c4 <__pow5mult>
 800b3da:	4681      	mov	r9, r0
 800b3dc:	b9e0      	cbnz	r0, 800b418 <_strtod_l+0x788>
 800b3de:	f04f 0900 	mov.w	r9, #0
 800b3e2:	e674      	b.n	800b0ce <_strtod_l+0x43e>
 800b3e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b3e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b3ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b3f0:	35e2      	adds	r5, #226	@ 0xe2
 800b3f2:	fa01 f305 	lsl.w	r3, r1, r5
 800b3f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b3fa:	e7ba      	b.n	800b372 <_strtod_l+0x6e2>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b400:	2301      	movs	r3, #1
 800b402:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b404:	e7b5      	b.n	800b372 <_strtod_l+0x6e2>
 800b406:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b408:	9805      	ldr	r0, [sp, #20]
 800b40a:	462a      	mov	r2, r5
 800b40c:	f002 fa34 	bl	800d878 <__lshift>
 800b410:	901a      	str	r0, [sp, #104]	@ 0x68
 800b412:	2800      	cmp	r0, #0
 800b414:	d1d9      	bne.n	800b3ca <_strtod_l+0x73a>
 800b416:	e65a      	b.n	800b0ce <_strtod_l+0x43e>
 800b418:	2e00      	cmp	r6, #0
 800b41a:	dd07      	ble.n	800b42c <_strtod_l+0x79c>
 800b41c:	4649      	mov	r1, r9
 800b41e:	9805      	ldr	r0, [sp, #20]
 800b420:	4632      	mov	r2, r6
 800b422:	f002 fa29 	bl	800d878 <__lshift>
 800b426:	4681      	mov	r9, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d0d8      	beq.n	800b3de <_strtod_l+0x74e>
 800b42c:	2f00      	cmp	r7, #0
 800b42e:	dd08      	ble.n	800b442 <_strtod_l+0x7b2>
 800b430:	4641      	mov	r1, r8
 800b432:	9805      	ldr	r0, [sp, #20]
 800b434:	463a      	mov	r2, r7
 800b436:	f002 fa1f 	bl	800d878 <__lshift>
 800b43a:	4680      	mov	r8, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f43f ae46 	beq.w	800b0ce <_strtod_l+0x43e>
 800b442:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	464a      	mov	r2, r9
 800b448:	f002 fa9e 	bl	800d988 <__mdiff>
 800b44c:	4604      	mov	r4, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	f43f ae3d 	beq.w	800b0ce <_strtod_l+0x43e>
 800b454:	68c3      	ldr	r3, [r0, #12]
 800b456:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b458:	2300      	movs	r3, #0
 800b45a:	60c3      	str	r3, [r0, #12]
 800b45c:	4641      	mov	r1, r8
 800b45e:	f002 fa77 	bl	800d950 <__mcmp>
 800b462:	2800      	cmp	r0, #0
 800b464:	da46      	bge.n	800b4f4 <_strtod_l+0x864>
 800b466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b468:	ea53 030a 	orrs.w	r3, r3, sl
 800b46c:	d16c      	bne.n	800b548 <_strtod_l+0x8b8>
 800b46e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b472:	2b00      	cmp	r3, #0
 800b474:	d168      	bne.n	800b548 <_strtod_l+0x8b8>
 800b476:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b47a:	0d1b      	lsrs	r3, r3, #20
 800b47c:	051b      	lsls	r3, r3, #20
 800b47e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b482:	d961      	bls.n	800b548 <_strtod_l+0x8b8>
 800b484:	6963      	ldr	r3, [r4, #20]
 800b486:	b913      	cbnz	r3, 800b48e <_strtod_l+0x7fe>
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	dd5c      	ble.n	800b548 <_strtod_l+0x8b8>
 800b48e:	4621      	mov	r1, r4
 800b490:	2201      	movs	r2, #1
 800b492:	9805      	ldr	r0, [sp, #20]
 800b494:	f002 f9f0 	bl	800d878 <__lshift>
 800b498:	4641      	mov	r1, r8
 800b49a:	4604      	mov	r4, r0
 800b49c:	f002 fa58 	bl	800d950 <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	dd51      	ble.n	800b548 <_strtod_l+0x8b8>
 800b4a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4a8:	9a08      	ldr	r2, [sp, #32]
 800b4aa:	0d1b      	lsrs	r3, r3, #20
 800b4ac:	051b      	lsls	r3, r3, #20
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d06b      	beq.n	800b58a <_strtod_l+0x8fa>
 800b4b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4b6:	d868      	bhi.n	800b58a <_strtod_l+0x8fa>
 800b4b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b4bc:	f67f ae9d 	bls.w	800b1fa <_strtod_l+0x56a>
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ec <_strtod_l+0x85c>)
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	4659      	mov	r1, fp
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f7f5 f8ae 	bl	8000628 <__aeabi_dmul>
 800b4cc:	4b08      	ldr	r3, [pc, #32]	@ (800b4f0 <_strtod_l+0x860>)
 800b4ce:	400b      	ands	r3, r1
 800b4d0:	4682      	mov	sl, r0
 800b4d2:	468b      	mov	fp, r1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f47f ae05 	bne.w	800b0e4 <_strtod_l+0x454>
 800b4da:	9a05      	ldr	r2, [sp, #20]
 800b4dc:	2322      	movs	r3, #34	@ 0x22
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	e600      	b.n	800b0e4 <_strtod_l+0x454>
 800b4e2:	bf00      	nop
 800b4e4:	0800f088 	.word	0x0800f088
 800b4e8:	fffffc02 	.word	0xfffffc02
 800b4ec:	39500000 	.word	0x39500000
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b4f8:	d165      	bne.n	800b5c6 <_strtod_l+0x936>
 800b4fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b4fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b500:	b35a      	cbz	r2, 800b55a <_strtod_l+0x8ca>
 800b502:	4a9f      	ldr	r2, [pc, #636]	@ (800b780 <_strtod_l+0xaf0>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d12b      	bne.n	800b560 <_strtod_l+0x8d0>
 800b508:	9b08      	ldr	r3, [sp, #32]
 800b50a:	4651      	mov	r1, sl
 800b50c:	b303      	cbz	r3, 800b550 <_strtod_l+0x8c0>
 800b50e:	4b9d      	ldr	r3, [pc, #628]	@ (800b784 <_strtod_l+0xaf4>)
 800b510:	465a      	mov	r2, fp
 800b512:	4013      	ands	r3, r2
 800b514:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b51c:	d81b      	bhi.n	800b556 <_strtod_l+0x8c6>
 800b51e:	0d1b      	lsrs	r3, r3, #20
 800b520:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b524:	fa02 f303 	lsl.w	r3, r2, r3
 800b528:	4299      	cmp	r1, r3
 800b52a:	d119      	bne.n	800b560 <_strtod_l+0x8d0>
 800b52c:	4b96      	ldr	r3, [pc, #600]	@ (800b788 <_strtod_l+0xaf8>)
 800b52e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b530:	429a      	cmp	r2, r3
 800b532:	d102      	bne.n	800b53a <_strtod_l+0x8aa>
 800b534:	3101      	adds	r1, #1
 800b536:	f43f adca 	beq.w	800b0ce <_strtod_l+0x43e>
 800b53a:	4b92      	ldr	r3, [pc, #584]	@ (800b784 <_strtod_l+0xaf4>)
 800b53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b53e:	401a      	ands	r2, r3
 800b540:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b544:	f04f 0a00 	mov.w	sl, #0
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1b8      	bne.n	800b4c0 <_strtod_l+0x830>
 800b54e:	e5c9      	b.n	800b0e4 <_strtod_l+0x454>
 800b550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b554:	e7e8      	b.n	800b528 <_strtod_l+0x898>
 800b556:	4613      	mov	r3, r2
 800b558:	e7e6      	b.n	800b528 <_strtod_l+0x898>
 800b55a:	ea53 030a 	orrs.w	r3, r3, sl
 800b55e:	d0a1      	beq.n	800b4a4 <_strtod_l+0x814>
 800b560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b562:	b1db      	cbz	r3, 800b59c <_strtod_l+0x90c>
 800b564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b566:	4213      	tst	r3, r2
 800b568:	d0ee      	beq.n	800b548 <_strtod_l+0x8b8>
 800b56a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b56c:	9a08      	ldr	r2, [sp, #32]
 800b56e:	4650      	mov	r0, sl
 800b570:	4659      	mov	r1, fp
 800b572:	b1bb      	cbz	r3, 800b5a4 <_strtod_l+0x914>
 800b574:	f7ff fb6c 	bl	800ac50 <sulp>
 800b578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b57c:	ec53 2b10 	vmov	r2, r3, d0
 800b580:	f7f4 fe9c 	bl	80002bc <__adddf3>
 800b584:	4682      	mov	sl, r0
 800b586:	468b      	mov	fp, r1
 800b588:	e7de      	b.n	800b548 <_strtod_l+0x8b8>
 800b58a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b58e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b592:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b596:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b59a:	e7d5      	b.n	800b548 <_strtod_l+0x8b8>
 800b59c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b59e:	ea13 0f0a 	tst.w	r3, sl
 800b5a2:	e7e1      	b.n	800b568 <_strtod_l+0x8d8>
 800b5a4:	f7ff fb54 	bl	800ac50 <sulp>
 800b5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5ac:	ec53 2b10 	vmov	r2, r3, d0
 800b5b0:	f7f4 fe82 	bl	80002b8 <__aeabi_dsub>
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	468b      	mov	fp, r1
 800b5bc:	f7f5 fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d0c1      	beq.n	800b548 <_strtod_l+0x8b8>
 800b5c4:	e619      	b.n	800b1fa <_strtod_l+0x56a>
 800b5c6:	4641      	mov	r1, r8
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f002 fb39 	bl	800dc40 <__ratio>
 800b5ce:	ec57 6b10 	vmov	r6, r7, d0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f5 faa0 	bl	8000b20 <__aeabi_dcmple>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d06f      	beq.n	800b6c4 <_strtod_l+0xa34>
 800b5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d17a      	bne.n	800b6e0 <_strtod_l+0xa50>
 800b5ea:	f1ba 0f00 	cmp.w	sl, #0
 800b5ee:	d158      	bne.n	800b6a2 <_strtod_l+0xa12>
 800b5f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d15a      	bne.n	800b6b0 <_strtod_l+0xa20>
 800b5fa:	4b64      	ldr	r3, [pc, #400]	@ (800b78c <_strtod_l+0xafc>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f5 fa83 	bl	8000b0c <__aeabi_dcmplt>
 800b606:	2800      	cmp	r0, #0
 800b608:	d159      	bne.n	800b6be <_strtod_l+0xa2e>
 800b60a:	4630      	mov	r0, r6
 800b60c:	4639      	mov	r1, r7
 800b60e:	4b60      	ldr	r3, [pc, #384]	@ (800b790 <_strtod_l+0xb00>)
 800b610:	2200      	movs	r2, #0
 800b612:	f7f5 f809 	bl	8000628 <__aeabi_dmul>
 800b616:	4606      	mov	r6, r0
 800b618:	460f      	mov	r7, r1
 800b61a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b61e:	9606      	str	r6, [sp, #24]
 800b620:	9307      	str	r3, [sp, #28]
 800b622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b626:	4d57      	ldr	r5, [pc, #348]	@ (800b784 <_strtod_l+0xaf4>)
 800b628:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b62e:	401d      	ands	r5, r3
 800b630:	4b58      	ldr	r3, [pc, #352]	@ (800b794 <_strtod_l+0xb04>)
 800b632:	429d      	cmp	r5, r3
 800b634:	f040 80b2 	bne.w	800b79c <_strtod_l+0xb0c>
 800b638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b63a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b63e:	ec4b ab10 	vmov	d0, sl, fp
 800b642:	f002 fa35 	bl	800dab0 <__ulp>
 800b646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b64a:	ec51 0b10 	vmov	r0, r1, d0
 800b64e:	f7f4 ffeb 	bl	8000628 <__aeabi_dmul>
 800b652:	4652      	mov	r2, sl
 800b654:	465b      	mov	r3, fp
 800b656:	f7f4 fe31 	bl	80002bc <__adddf3>
 800b65a:	460b      	mov	r3, r1
 800b65c:	4949      	ldr	r1, [pc, #292]	@ (800b784 <_strtod_l+0xaf4>)
 800b65e:	4a4e      	ldr	r2, [pc, #312]	@ (800b798 <_strtod_l+0xb08>)
 800b660:	4019      	ands	r1, r3
 800b662:	4291      	cmp	r1, r2
 800b664:	4682      	mov	sl, r0
 800b666:	d942      	bls.n	800b6ee <_strtod_l+0xa5e>
 800b668:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b66a:	4b47      	ldr	r3, [pc, #284]	@ (800b788 <_strtod_l+0xaf8>)
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d103      	bne.n	800b678 <_strtod_l+0x9e8>
 800b670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b672:	3301      	adds	r3, #1
 800b674:	f43f ad2b 	beq.w	800b0ce <_strtod_l+0x43e>
 800b678:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b788 <_strtod_l+0xaf8>
 800b67c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b680:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b682:	9805      	ldr	r0, [sp, #20]
 800b684:	f001 fee0 	bl	800d448 <_Bfree>
 800b688:	9805      	ldr	r0, [sp, #20]
 800b68a:	4649      	mov	r1, r9
 800b68c:	f001 fedc 	bl	800d448 <_Bfree>
 800b690:	9805      	ldr	r0, [sp, #20]
 800b692:	4641      	mov	r1, r8
 800b694:	f001 fed8 	bl	800d448 <_Bfree>
 800b698:	9805      	ldr	r0, [sp, #20]
 800b69a:	4621      	mov	r1, r4
 800b69c:	f001 fed4 	bl	800d448 <_Bfree>
 800b6a0:	e618      	b.n	800b2d4 <_strtod_l+0x644>
 800b6a2:	f1ba 0f01 	cmp.w	sl, #1
 800b6a6:	d103      	bne.n	800b6b0 <_strtod_l+0xa20>
 800b6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f43f ada5 	beq.w	800b1fa <_strtod_l+0x56a>
 800b6b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b760 <_strtod_l+0xad0>
 800b6b4:	4f35      	ldr	r7, [pc, #212]	@ (800b78c <_strtod_l+0xafc>)
 800b6b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6ba:	2600      	movs	r6, #0
 800b6bc:	e7b1      	b.n	800b622 <_strtod_l+0x992>
 800b6be:	4f34      	ldr	r7, [pc, #208]	@ (800b790 <_strtod_l+0xb00>)
 800b6c0:	2600      	movs	r6, #0
 800b6c2:	e7aa      	b.n	800b61a <_strtod_l+0x98a>
 800b6c4:	4b32      	ldr	r3, [pc, #200]	@ (800b790 <_strtod_l+0xb00>)
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f7f4 ffac 	bl	8000628 <__aeabi_dmul>
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d09f      	beq.n	800b61a <_strtod_l+0x98a>
 800b6da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6de:	e7a0      	b.n	800b622 <_strtod_l+0x992>
 800b6e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b768 <_strtod_l+0xad8>
 800b6e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6e8:	ec57 6b17 	vmov	r6, r7, d7
 800b6ec:	e799      	b.n	800b622 <_strtod_l+0x992>
 800b6ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1c1      	bne.n	800b680 <_strtod_l+0x9f0>
 800b6fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b700:	0d1b      	lsrs	r3, r3, #20
 800b702:	051b      	lsls	r3, r3, #20
 800b704:	429d      	cmp	r5, r3
 800b706:	d1bb      	bne.n	800b680 <_strtod_l+0x9f0>
 800b708:	4630      	mov	r0, r6
 800b70a:	4639      	mov	r1, r7
 800b70c:	f7f5 faec 	bl	8000ce8 <__aeabi_d2lz>
 800b710:	f7f4 ff5c 	bl	80005cc <__aeabi_l2d>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f4 fdcc 	bl	80002b8 <__aeabi_dsub>
 800b720:	460b      	mov	r3, r1
 800b722:	4602      	mov	r2, r0
 800b724:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b728:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b72e:	ea46 060a 	orr.w	r6, r6, sl
 800b732:	431e      	orrs	r6, r3
 800b734:	d06f      	beq.n	800b816 <_strtod_l+0xb86>
 800b736:	a30e      	add	r3, pc, #56	@ (adr r3, 800b770 <_strtod_l+0xae0>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f5 f9e6 	bl	8000b0c <__aeabi_dcmplt>
 800b740:	2800      	cmp	r0, #0
 800b742:	f47f accf 	bne.w	800b0e4 <_strtod_l+0x454>
 800b746:	a30c      	add	r3, pc, #48	@ (adr r3, 800b778 <_strtod_l+0xae8>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b750:	f7f5 f9fa 	bl	8000b48 <__aeabi_dcmpgt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d093      	beq.n	800b680 <_strtod_l+0x9f0>
 800b758:	e4c4      	b.n	800b0e4 <_strtod_l+0x454>
 800b75a:	bf00      	nop
 800b75c:	f3af 8000 	nop.w
 800b760:	00000000 	.word	0x00000000
 800b764:	bff00000 	.word	0xbff00000
 800b768:	00000000 	.word	0x00000000
 800b76c:	3ff00000 	.word	0x3ff00000
 800b770:	94a03595 	.word	0x94a03595
 800b774:	3fdfffff 	.word	0x3fdfffff
 800b778:	35afe535 	.word	0x35afe535
 800b77c:	3fe00000 	.word	0x3fe00000
 800b780:	000fffff 	.word	0x000fffff
 800b784:	7ff00000 	.word	0x7ff00000
 800b788:	7fefffff 	.word	0x7fefffff
 800b78c:	3ff00000 	.word	0x3ff00000
 800b790:	3fe00000 	.word	0x3fe00000
 800b794:	7fe00000 	.word	0x7fe00000
 800b798:	7c9fffff 	.word	0x7c9fffff
 800b79c:	9b08      	ldr	r3, [sp, #32]
 800b79e:	b323      	cbz	r3, 800b7ea <_strtod_l+0xb5a>
 800b7a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b7a4:	d821      	bhi.n	800b7ea <_strtod_l+0xb5a>
 800b7a6:	a328      	add	r3, pc, #160	@ (adr r3, 800b848 <_strtod_l+0xbb8>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	f7f5 f9b6 	bl	8000b20 <__aeabi_dcmple>
 800b7b4:	b1a0      	cbz	r0, 800b7e0 <_strtod_l+0xb50>
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7f5 fa0d 	bl	8000bd8 <__aeabi_d2uiz>
 800b7be:	2801      	cmp	r0, #1
 800b7c0:	bf38      	it	cc
 800b7c2:	2001      	movcc	r0, #1
 800b7c4:	f7f4 feb6 	bl	8000534 <__aeabi_ui2d>
 800b7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	460f      	mov	r7, r1
 800b7ce:	b9fb      	cbnz	r3, 800b810 <_strtod_l+0xb80>
 800b7d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b7d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b7dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b7e6:	1b5b      	subs	r3, r3, r5
 800b7e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b7f2:	f002 f95d 	bl	800dab0 <__ulp>
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	ec53 2b10 	vmov	r2, r3, d0
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 ff13 	bl	8000628 <__aeabi_dmul>
 800b802:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b806:	f7f4 fd59 	bl	80002bc <__adddf3>
 800b80a:	4682      	mov	sl, r0
 800b80c:	468b      	mov	fp, r1
 800b80e:	e770      	b.n	800b6f2 <_strtod_l+0xa62>
 800b810:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b814:	e7e0      	b.n	800b7d8 <_strtod_l+0xb48>
 800b816:	a30e      	add	r3, pc, #56	@ (adr r3, 800b850 <_strtod_l+0xbc0>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f5 f976 	bl	8000b0c <__aeabi_dcmplt>
 800b820:	e798      	b.n	800b754 <_strtod_l+0xac4>
 800b822:	2300      	movs	r3, #0
 800b824:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b826:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	f7ff ba6d 	b.w	800ad0a <_strtod_l+0x7a>
 800b830:	2a65      	cmp	r2, #101	@ 0x65
 800b832:	f43f ab66 	beq.w	800af02 <_strtod_l+0x272>
 800b836:	2a45      	cmp	r2, #69	@ 0x45
 800b838:	f43f ab63 	beq.w	800af02 <_strtod_l+0x272>
 800b83c:	2301      	movs	r3, #1
 800b83e:	f7ff bb9e 	b.w	800af7e <_strtod_l+0x2ee>
 800b842:	bf00      	nop
 800b844:	f3af 8000 	nop.w
 800b848:	ffc00000 	.word	0xffc00000
 800b84c:	41dfffff 	.word	0x41dfffff
 800b850:	94a03595 	.word	0x94a03595
 800b854:	3fcfffff 	.word	0x3fcfffff

0800b858 <_strtod_r>:
 800b858:	4b01      	ldr	r3, [pc, #4]	@ (800b860 <_strtod_r+0x8>)
 800b85a:	f7ff ba19 	b.w	800ac90 <_strtod_l>
 800b85e:	bf00      	nop
 800b860:	20000110 	.word	0x20000110

0800b864 <_strtol_l.constprop.0>:
 800b864:	2b24      	cmp	r3, #36	@ 0x24
 800b866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86a:	4686      	mov	lr, r0
 800b86c:	4690      	mov	r8, r2
 800b86e:	d801      	bhi.n	800b874 <_strtol_l.constprop.0+0x10>
 800b870:	2b01      	cmp	r3, #1
 800b872:	d106      	bne.n	800b882 <_strtol_l.constprop.0+0x1e>
 800b874:	f000 f90c 	bl	800ba90 <__errno>
 800b878:	2316      	movs	r3, #22
 800b87a:	6003      	str	r3, [r0, #0]
 800b87c:	2000      	movs	r0, #0
 800b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b882:	4834      	ldr	r0, [pc, #208]	@ (800b954 <_strtol_l.constprop.0+0xf0>)
 800b884:	460d      	mov	r5, r1
 800b886:	462a      	mov	r2, r5
 800b888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b88c:	5d06      	ldrb	r6, [r0, r4]
 800b88e:	f016 0608 	ands.w	r6, r6, #8
 800b892:	d1f8      	bne.n	800b886 <_strtol_l.constprop.0+0x22>
 800b894:	2c2d      	cmp	r4, #45	@ 0x2d
 800b896:	d12d      	bne.n	800b8f4 <_strtol_l.constprop.0+0x90>
 800b898:	782c      	ldrb	r4, [r5, #0]
 800b89a:	2601      	movs	r6, #1
 800b89c:	1c95      	adds	r5, r2, #2
 800b89e:	f033 0210 	bics.w	r2, r3, #16
 800b8a2:	d109      	bne.n	800b8b8 <_strtol_l.constprop.0+0x54>
 800b8a4:	2c30      	cmp	r4, #48	@ 0x30
 800b8a6:	d12a      	bne.n	800b8fe <_strtol_l.constprop.0+0x9a>
 800b8a8:	782a      	ldrb	r2, [r5, #0]
 800b8aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8ae:	2a58      	cmp	r2, #88	@ 0x58
 800b8b0:	d125      	bne.n	800b8fe <_strtol_l.constprop.0+0x9a>
 800b8b2:	786c      	ldrb	r4, [r5, #1]
 800b8b4:	2310      	movs	r3, #16
 800b8b6:	3502      	adds	r5, #2
 800b8b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b8bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	fbbc f9f3 	udiv	r9, ip, r3
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b8d0:	2f09      	cmp	r7, #9
 800b8d2:	d81b      	bhi.n	800b90c <_strtol_l.constprop.0+0xa8>
 800b8d4:	463c      	mov	r4, r7
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	dd27      	ble.n	800b92a <_strtol_l.constprop.0+0xc6>
 800b8da:	1c57      	adds	r7, r2, #1
 800b8dc:	d007      	beq.n	800b8ee <_strtol_l.constprop.0+0x8a>
 800b8de:	4581      	cmp	r9, r0
 800b8e0:	d320      	bcc.n	800b924 <_strtol_l.constprop.0+0xc0>
 800b8e2:	d101      	bne.n	800b8e8 <_strtol_l.constprop.0+0x84>
 800b8e4:	45a2      	cmp	sl, r4
 800b8e6:	db1d      	blt.n	800b924 <_strtol_l.constprop.0+0xc0>
 800b8e8:	fb00 4003 	mla	r0, r0, r3, r4
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8f2:	e7eb      	b.n	800b8cc <_strtol_l.constprop.0+0x68>
 800b8f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b8f6:	bf04      	itt	eq
 800b8f8:	782c      	ldrbeq	r4, [r5, #0]
 800b8fa:	1c95      	addeq	r5, r2, #2
 800b8fc:	e7cf      	b.n	800b89e <_strtol_l.constprop.0+0x3a>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1da      	bne.n	800b8b8 <_strtol_l.constprop.0+0x54>
 800b902:	2c30      	cmp	r4, #48	@ 0x30
 800b904:	bf0c      	ite	eq
 800b906:	2308      	moveq	r3, #8
 800b908:	230a      	movne	r3, #10
 800b90a:	e7d5      	b.n	800b8b8 <_strtol_l.constprop.0+0x54>
 800b90c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b910:	2f19      	cmp	r7, #25
 800b912:	d801      	bhi.n	800b918 <_strtol_l.constprop.0+0xb4>
 800b914:	3c37      	subs	r4, #55	@ 0x37
 800b916:	e7de      	b.n	800b8d6 <_strtol_l.constprop.0+0x72>
 800b918:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b91c:	2f19      	cmp	r7, #25
 800b91e:	d804      	bhi.n	800b92a <_strtol_l.constprop.0+0xc6>
 800b920:	3c57      	subs	r4, #87	@ 0x57
 800b922:	e7d8      	b.n	800b8d6 <_strtol_l.constprop.0+0x72>
 800b924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b928:	e7e1      	b.n	800b8ee <_strtol_l.constprop.0+0x8a>
 800b92a:	1c53      	adds	r3, r2, #1
 800b92c:	d108      	bne.n	800b940 <_strtol_l.constprop.0+0xdc>
 800b92e:	2322      	movs	r3, #34	@ 0x22
 800b930:	f8ce 3000 	str.w	r3, [lr]
 800b934:	4660      	mov	r0, ip
 800b936:	f1b8 0f00 	cmp.w	r8, #0
 800b93a:	d0a0      	beq.n	800b87e <_strtol_l.constprop.0+0x1a>
 800b93c:	1e69      	subs	r1, r5, #1
 800b93e:	e006      	b.n	800b94e <_strtol_l.constprop.0+0xea>
 800b940:	b106      	cbz	r6, 800b944 <_strtol_l.constprop.0+0xe0>
 800b942:	4240      	negs	r0, r0
 800b944:	f1b8 0f00 	cmp.w	r8, #0
 800b948:	d099      	beq.n	800b87e <_strtol_l.constprop.0+0x1a>
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d1f6      	bne.n	800b93c <_strtol_l.constprop.0+0xd8>
 800b94e:	f8c8 1000 	str.w	r1, [r8]
 800b952:	e794      	b.n	800b87e <_strtol_l.constprop.0+0x1a>
 800b954:	0800f0b9 	.word	0x0800f0b9

0800b958 <_strtol_r>:
 800b958:	f7ff bf84 	b.w	800b864 <_strtol_l.constprop.0>

0800b95c <_fwalk_sglue>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4607      	mov	r7, r0
 800b962:	4688      	mov	r8, r1
 800b964:	4614      	mov	r4, r2
 800b966:	2600      	movs	r6, #0
 800b968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b96c:	f1b9 0901 	subs.w	r9, r9, #1
 800b970:	d505      	bpl.n	800b97e <_fwalk_sglue+0x22>
 800b972:	6824      	ldr	r4, [r4, #0]
 800b974:	2c00      	cmp	r4, #0
 800b976:	d1f7      	bne.n	800b968 <_fwalk_sglue+0xc>
 800b978:	4630      	mov	r0, r6
 800b97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d907      	bls.n	800b994 <_fwalk_sglue+0x38>
 800b984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b988:	3301      	adds	r3, #1
 800b98a:	d003      	beq.n	800b994 <_fwalk_sglue+0x38>
 800b98c:	4629      	mov	r1, r5
 800b98e:	4638      	mov	r0, r7
 800b990:	47c0      	blx	r8
 800b992:	4306      	orrs	r6, r0
 800b994:	3568      	adds	r5, #104	@ 0x68
 800b996:	e7e9      	b.n	800b96c <_fwalk_sglue+0x10>

0800b998 <_puts_r>:
 800b998:	6a03      	ldr	r3, [r0, #32]
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	6884      	ldr	r4, [r0, #8]
 800b99e:	4605      	mov	r5, r0
 800b9a0:	460e      	mov	r6, r1
 800b9a2:	b90b      	cbnz	r3, 800b9a8 <_puts_r+0x10>
 800b9a4:	f7ff f93c 	bl	800ac20 <__sinit>
 800b9a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9aa:	07db      	lsls	r3, r3, #31
 800b9ac:	d405      	bmi.n	800b9ba <_puts_r+0x22>
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	0598      	lsls	r0, r3, #22
 800b9b2:	d402      	bmi.n	800b9ba <_puts_r+0x22>
 800b9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b6:	f000 f896 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	0719      	lsls	r1, r3, #28
 800b9be:	d502      	bpl.n	800b9c6 <_puts_r+0x2e>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d135      	bne.n	800ba32 <_puts_r+0x9a>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f002 fa5f 	bl	800de8c <__swsetup_r>
 800b9ce:	b380      	cbz	r0, 800ba32 <_puts_r+0x9a>
 800b9d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b9d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9d6:	07da      	lsls	r2, r3, #31
 800b9d8:	d405      	bmi.n	800b9e6 <_puts_r+0x4e>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	059b      	lsls	r3, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_puts_r+0x4e>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9e2:	f000 f881 	bl	800bae8 <__retarget_lock_release_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	da04      	bge.n	800b9f8 <_puts_r+0x60>
 800b9ee:	69a2      	ldr	r2, [r4, #24]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	dc17      	bgt.n	800ba24 <_puts_r+0x8c>
 800b9f4:	290a      	cmp	r1, #10
 800b9f6:	d015      	beq.n	800ba24 <_puts_r+0x8c>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	6022      	str	r2, [r4, #0]
 800b9fe:	7019      	strb	r1, [r3, #0]
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba06:	3b01      	subs	r3, #1
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	d1ed      	bne.n	800b9ea <_puts_r+0x52>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	da11      	bge.n	800ba36 <_puts_r+0x9e>
 800ba12:	4622      	mov	r2, r4
 800ba14:	210a      	movs	r1, #10
 800ba16:	4628      	mov	r0, r5
 800ba18:	f002 f9f9 	bl	800de0e <__swbuf_r>
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d0d7      	beq.n	800b9d0 <_puts_r+0x38>
 800ba20:	250a      	movs	r5, #10
 800ba22:	e7d7      	b.n	800b9d4 <_puts_r+0x3c>
 800ba24:	4622      	mov	r2, r4
 800ba26:	4628      	mov	r0, r5
 800ba28:	f002 f9f1 	bl	800de0e <__swbuf_r>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d1e7      	bne.n	800ba00 <_puts_r+0x68>
 800ba30:	e7ce      	b.n	800b9d0 <_puts_r+0x38>
 800ba32:	3e01      	subs	r6, #1
 800ba34:	e7e4      	b.n	800ba00 <_puts_r+0x68>
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	701a      	strb	r2, [r3, #0]
 800ba40:	e7ee      	b.n	800ba20 <_puts_r+0x88>
	...

0800ba44 <puts>:
 800ba44:	4b02      	ldr	r3, [pc, #8]	@ (800ba50 <puts+0xc>)
 800ba46:	4601      	mov	r1, r0
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	f7ff bfa5 	b.w	800b998 <_puts_r>
 800ba4e:	bf00      	nop
 800ba50:	2000027c 	.word	0x2000027c

0800ba54 <strncmp>:
 800ba54:	b510      	push	{r4, lr}
 800ba56:	b16a      	cbz	r2, 800ba74 <strncmp+0x20>
 800ba58:	3901      	subs	r1, #1
 800ba5a:	1884      	adds	r4, r0, r2
 800ba5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d103      	bne.n	800ba70 <strncmp+0x1c>
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d001      	beq.n	800ba70 <strncmp+0x1c>
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	d1f5      	bne.n	800ba5c <strncmp+0x8>
 800ba70:	1ad0      	subs	r0, r2, r3
 800ba72:	bd10      	pop	{r4, pc}
 800ba74:	4610      	mov	r0, r2
 800ba76:	e7fc      	b.n	800ba72 <strncmp+0x1e>

0800ba78 <memset>:
 800ba78:	4402      	add	r2, r0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d100      	bne.n	800ba82 <memset+0xa>
 800ba80:	4770      	bx	lr
 800ba82:	f803 1b01 	strb.w	r1, [r3], #1
 800ba86:	e7f9      	b.n	800ba7c <memset+0x4>

0800ba88 <_localeconv_r>:
 800ba88:	4800      	ldr	r0, [pc, #0]	@ (800ba8c <_localeconv_r+0x4>)
 800ba8a:	4770      	bx	lr
 800ba8c:	20000200 	.word	0x20000200

0800ba90 <__errno>:
 800ba90:	4b01      	ldr	r3, [pc, #4]	@ (800ba98 <__errno+0x8>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	2000027c 	.word	0x2000027c

0800ba9c <__libc_init_array>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	4d0d      	ldr	r5, [pc, #52]	@ (800bad4 <__libc_init_array+0x38>)
 800baa0:	4c0d      	ldr	r4, [pc, #52]	@ (800bad8 <__libc_init_array+0x3c>)
 800baa2:	1b64      	subs	r4, r4, r5
 800baa4:	10a4      	asrs	r4, r4, #2
 800baa6:	2600      	movs	r6, #0
 800baa8:	42a6      	cmp	r6, r4
 800baaa:	d109      	bne.n	800bac0 <__libc_init_array+0x24>
 800baac:	4d0b      	ldr	r5, [pc, #44]	@ (800badc <__libc_init_array+0x40>)
 800baae:	4c0c      	ldr	r4, [pc, #48]	@ (800bae0 <__libc_init_array+0x44>)
 800bab0:	f002 fd66 	bl	800e580 <_init>
 800bab4:	1b64      	subs	r4, r4, r5
 800bab6:	10a4      	asrs	r4, r4, #2
 800bab8:	2600      	movs	r6, #0
 800baba:	42a6      	cmp	r6, r4
 800babc:	d105      	bne.n	800baca <__libc_init_array+0x2e>
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac4:	4798      	blx	r3
 800bac6:	3601      	adds	r6, #1
 800bac8:	e7ee      	b.n	800baa8 <__libc_init_array+0xc>
 800baca:	f855 3b04 	ldr.w	r3, [r5], #4
 800bace:	4798      	blx	r3
 800bad0:	3601      	adds	r6, #1
 800bad2:	e7f2      	b.n	800baba <__libc_init_array+0x1e>
 800bad4:	0800f454 	.word	0x0800f454
 800bad8:	0800f454 	.word	0x0800f454
 800badc:	0800f454 	.word	0x0800f454
 800bae0:	0800f458 	.word	0x0800f458

0800bae4 <__retarget_lock_init_recursive>:
 800bae4:	4770      	bx	lr

0800bae6 <__retarget_lock_acquire_recursive>:
 800bae6:	4770      	bx	lr

0800bae8 <__retarget_lock_release_recursive>:
 800bae8:	4770      	bx	lr

0800baea <memcpy>:
 800baea:	440a      	add	r2, r1
 800baec:	4291      	cmp	r1, r2
 800baee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800baf2:	d100      	bne.n	800baf6 <memcpy+0xc>
 800baf4:	4770      	bx	lr
 800baf6:	b510      	push	{r4, lr}
 800baf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb00:	4291      	cmp	r1, r2
 800bb02:	d1f9      	bne.n	800baf8 <memcpy+0xe>
 800bb04:	bd10      	pop	{r4, pc}
	...

0800bb08 <nan>:
 800bb08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb10 <nan+0x8>
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	00000000 	.word	0x00000000
 800bb14:	7ff80000 	.word	0x7ff80000

0800bb18 <nanf>:
 800bb18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bb20 <nanf+0x8>
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	7fc00000 	.word	0x7fc00000

0800bb24 <quorem>:
 800bb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	6903      	ldr	r3, [r0, #16]
 800bb2a:	690c      	ldr	r4, [r1, #16]
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	4607      	mov	r7, r0
 800bb30:	db7e      	blt.n	800bc30 <quorem+0x10c>
 800bb32:	3c01      	subs	r4, #1
 800bb34:	f101 0814 	add.w	r8, r1, #20
 800bb38:	00a3      	lsls	r3, r4, #2
 800bb3a:	f100 0514 	add.w	r5, r0, #20
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	429a      	cmp	r2, r3
 800bb52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb56:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb5a:	d32e      	bcc.n	800bbba <quorem+0x96>
 800bb5c:	f04f 0a00 	mov.w	sl, #0
 800bb60:	46c4      	mov	ip, r8
 800bb62:	46ae      	mov	lr, r5
 800bb64:	46d3      	mov	fp, sl
 800bb66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb6a:	b298      	uxth	r0, r3
 800bb6c:	fb06 a000 	mla	r0, r6, r0, sl
 800bb70:	0c02      	lsrs	r2, r0, #16
 800bb72:	0c1b      	lsrs	r3, r3, #16
 800bb74:	fb06 2303 	mla	r3, r6, r3, r2
 800bb78:	f8de 2000 	ldr.w	r2, [lr]
 800bb7c:	b280      	uxth	r0, r0
 800bb7e:	b292      	uxth	r2, r2
 800bb80:	1a12      	subs	r2, r2, r0
 800bb82:	445a      	add	r2, fp
 800bb84:	f8de 0000 	ldr.w	r0, [lr]
 800bb88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb96:	b292      	uxth	r2, r2
 800bb98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb9c:	45e1      	cmp	r9, ip
 800bb9e:	f84e 2b04 	str.w	r2, [lr], #4
 800bba2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bba6:	d2de      	bcs.n	800bb66 <quorem+0x42>
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	58eb      	ldr	r3, [r5, r3]
 800bbac:	b92b      	cbnz	r3, 800bbba <quorem+0x96>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	d32f      	bcc.n	800bc18 <quorem+0xf4>
 800bbb8:	613c      	str	r4, [r7, #16]
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f001 fec8 	bl	800d950 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	db25      	blt.n	800bc10 <quorem+0xec>
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbcc:	f8d1 c000 	ldr.w	ip, [r1]
 800bbd0:	fa1f fe82 	uxth.w	lr, r2
 800bbd4:	fa1f f38c 	uxth.w	r3, ip
 800bbd8:	eba3 030e 	sub.w	r3, r3, lr
 800bbdc:	4403      	add	r3, r0
 800bbde:	0c12      	lsrs	r2, r2, #16
 800bbe0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bbe4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbee:	45c1      	cmp	r9, r8
 800bbf0:	f841 3b04 	str.w	r3, [r1], #4
 800bbf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbf8:	d2e6      	bcs.n	800bbc8 <quorem+0xa4>
 800bbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc02:	b922      	cbnz	r2, 800bc0e <quorem+0xea>
 800bc04:	3b04      	subs	r3, #4
 800bc06:	429d      	cmp	r5, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	d30b      	bcc.n	800bc24 <quorem+0x100>
 800bc0c:	613c      	str	r4, [r7, #16]
 800bc0e:	3601      	adds	r6, #1
 800bc10:	4630      	mov	r0, r6
 800bc12:	b003      	add	sp, #12
 800bc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	3b04      	subs	r3, #4
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	d1cb      	bne.n	800bbb8 <quorem+0x94>
 800bc20:	3c01      	subs	r4, #1
 800bc22:	e7c6      	b.n	800bbb2 <quorem+0x8e>
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	3b04      	subs	r3, #4
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	d1ef      	bne.n	800bc0c <quorem+0xe8>
 800bc2c:	3c01      	subs	r4, #1
 800bc2e:	e7ea      	b.n	800bc06 <quorem+0xe2>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7ee      	b.n	800bc12 <quorem+0xee>
 800bc34:	0000      	movs	r0, r0
	...

0800bc38 <_dtoa_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	69c7      	ldr	r7, [r0, #28]
 800bc3e:	b099      	sub	sp, #100	@ 0x64
 800bc40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc44:	ec55 4b10 	vmov	r4, r5, d0
 800bc48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bc4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc4c:	4683      	mov	fp, r0
 800bc4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc52:	b97f      	cbnz	r7, 800bc74 <_dtoa_r+0x3c>
 800bc54:	2010      	movs	r0, #16
 800bc56:	f001 fa43 	bl	800d0e0 <malloc>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc60:	b920      	cbnz	r0, 800bc6c <_dtoa_r+0x34>
 800bc62:	4ba7      	ldr	r3, [pc, #668]	@ (800bf00 <_dtoa_r+0x2c8>)
 800bc64:	21ef      	movs	r1, #239	@ 0xef
 800bc66:	48a7      	ldr	r0, [pc, #668]	@ (800bf04 <_dtoa_r+0x2cc>)
 800bc68:	f002 fa68 	bl	800e13c <__assert_func>
 800bc6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc70:	6007      	str	r7, [r0, #0]
 800bc72:	60c7      	str	r7, [r0, #12]
 800bc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc78:	6819      	ldr	r1, [r3, #0]
 800bc7a:	b159      	cbz	r1, 800bc94 <_dtoa_r+0x5c>
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	604a      	str	r2, [r1, #4]
 800bc80:	2301      	movs	r3, #1
 800bc82:	4093      	lsls	r3, r2
 800bc84:	608b      	str	r3, [r1, #8]
 800bc86:	4658      	mov	r0, fp
 800bc88:	f001 fbde 	bl	800d448 <_Bfree>
 800bc8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	1e2b      	subs	r3, r5, #0
 800bc96:	bfb9      	ittee	lt
 800bc98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc9c:	9303      	strlt	r3, [sp, #12]
 800bc9e:	2300      	movge	r3, #0
 800bca0:	6033      	strge	r3, [r6, #0]
 800bca2:	9f03      	ldr	r7, [sp, #12]
 800bca4:	4b98      	ldr	r3, [pc, #608]	@ (800bf08 <_dtoa_r+0x2d0>)
 800bca6:	bfbc      	itt	lt
 800bca8:	2201      	movlt	r2, #1
 800bcaa:	6032      	strlt	r2, [r6, #0]
 800bcac:	43bb      	bics	r3, r7
 800bcae:	d112      	bne.n	800bcd6 <_dtoa_r+0x9e>
 800bcb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bcb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcbc:	4323      	orrs	r3, r4
 800bcbe:	f000 854d 	beq.w	800c75c <_dtoa_r+0xb24>
 800bcc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bf1c <_dtoa_r+0x2e4>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 854f 	beq.w	800c76c <_dtoa_r+0xb34>
 800bcce:	f10a 0303 	add.w	r3, sl, #3
 800bcd2:	f000 bd49 	b.w	800c768 <_dtoa_r+0xb30>
 800bcd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	ec51 0b17 	vmov	r0, r1, d7
 800bce0:	2300      	movs	r3, #0
 800bce2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bce6:	f7f4 ff07 	bl	8000af8 <__aeabi_dcmpeq>
 800bcea:	4680      	mov	r8, r0
 800bcec:	b158      	cbz	r0, 800bd06 <_dtoa_r+0xce>
 800bcee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcf6:	b113      	cbz	r3, 800bcfe <_dtoa_r+0xc6>
 800bcf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcfa:	4b84      	ldr	r3, [pc, #528]	@ (800bf0c <_dtoa_r+0x2d4>)
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bf20 <_dtoa_r+0x2e8>
 800bd02:	f000 bd33 	b.w	800c76c <_dtoa_r+0xb34>
 800bd06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd0a:	aa16      	add	r2, sp, #88	@ 0x58
 800bd0c:	a917      	add	r1, sp, #92	@ 0x5c
 800bd0e:	4658      	mov	r0, fp
 800bd10:	f001 ff3e 	bl	800db90 <__d2b>
 800bd14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd18:	4681      	mov	r9, r0
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d077      	beq.n	800be0e <_dtoa_r+0x1d6>
 800bd1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bd24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd38:	4619      	mov	r1, r3
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4b74      	ldr	r3, [pc, #464]	@ (800bf10 <_dtoa_r+0x2d8>)
 800bd3e:	f7f4 fabb 	bl	80002b8 <__aeabi_dsub>
 800bd42:	a369      	add	r3, pc, #420	@ (adr r3, 800bee8 <_dtoa_r+0x2b0>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fc6e 	bl	8000628 <__aeabi_dmul>
 800bd4c:	a368      	add	r3, pc, #416	@ (adr r3, 800bef0 <_dtoa_r+0x2b8>)
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	f7f4 fab3 	bl	80002bc <__adddf3>
 800bd56:	4604      	mov	r4, r0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	f7f4 fbfa 	bl	8000554 <__aeabi_i2d>
 800bd60:	a365      	add	r3, pc, #404	@ (adr r3, 800bef8 <_dtoa_r+0x2c0>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fc5f 	bl	8000628 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 faa3 	bl	80002bc <__adddf3>
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	f7f4 ff05 	bl	8000b88 <__aeabi_d2iz>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4607      	mov	r7, r0
 800bd82:	2300      	movs	r3, #0
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fec0 	bl	8000b0c <__aeabi_dcmplt>
 800bd8c:	b140      	cbz	r0, 800bda0 <_dtoa_r+0x168>
 800bd8e:	4638      	mov	r0, r7
 800bd90:	f7f4 fbe0 	bl	8000554 <__aeabi_i2d>
 800bd94:	4622      	mov	r2, r4
 800bd96:	462b      	mov	r3, r5
 800bd98:	f7f4 feae 	bl	8000af8 <__aeabi_dcmpeq>
 800bd9c:	b900      	cbnz	r0, 800bda0 <_dtoa_r+0x168>
 800bd9e:	3f01      	subs	r7, #1
 800bda0:	2f16      	cmp	r7, #22
 800bda2:	d851      	bhi.n	800be48 <_dtoa_r+0x210>
 800bda4:	4b5b      	ldr	r3, [pc, #364]	@ (800bf14 <_dtoa_r+0x2dc>)
 800bda6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdb2:	f7f4 feab 	bl	8000b0c <__aeabi_dcmplt>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d048      	beq.n	800be4c <_dtoa_r+0x214>
 800bdba:	3f01      	subs	r7, #1
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800bdc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bdc2:	1b9b      	subs	r3, r3, r6
 800bdc4:	1e5a      	subs	r2, r3, #1
 800bdc6:	bf44      	itt	mi
 800bdc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bdcc:	2300      	movmi	r3, #0
 800bdce:	9208      	str	r2, [sp, #32]
 800bdd0:	bf54      	ite	pl
 800bdd2:	f04f 0800 	movpl.w	r8, #0
 800bdd6:	9308      	strmi	r3, [sp, #32]
 800bdd8:	2f00      	cmp	r7, #0
 800bdda:	db39      	blt.n	800be50 <_dtoa_r+0x218>
 800bddc:	9b08      	ldr	r3, [sp, #32]
 800bdde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bde0:	443b      	add	r3, r7
 800bde2:	9308      	str	r3, [sp, #32]
 800bde4:	2300      	movs	r3, #0
 800bde6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d864      	bhi.n	800beb8 <_dtoa_r+0x280>
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	bfc4      	itt	gt
 800bdf2:	3b04      	subgt	r3, #4
 800bdf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf8:	f1a3 0302 	sub.w	r3, r3, #2
 800bdfc:	bfcc      	ite	gt
 800bdfe:	2400      	movgt	r4, #0
 800be00:	2401      	movle	r4, #1
 800be02:	2b03      	cmp	r3, #3
 800be04:	d863      	bhi.n	800bece <_dtoa_r+0x296>
 800be06:	e8df f003 	tbb	[pc, r3]
 800be0a:	372a      	.short	0x372a
 800be0c:	5535      	.short	0x5535
 800be0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800be12:	441e      	add	r6, r3
 800be14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be18:	2b20      	cmp	r3, #32
 800be1a:	bfc1      	itttt	gt
 800be1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be20:	409f      	lslgt	r7, r3
 800be22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be2a:	bfd6      	itet	le
 800be2c:	f1c3 0320 	rsble	r3, r3, #32
 800be30:	ea47 0003 	orrgt.w	r0, r7, r3
 800be34:	fa04 f003 	lslle.w	r0, r4, r3
 800be38:	f7f4 fb7c 	bl	8000534 <__aeabi_ui2d>
 800be3c:	2201      	movs	r2, #1
 800be3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be42:	3e01      	subs	r6, #1
 800be44:	9214      	str	r2, [sp, #80]	@ 0x50
 800be46:	e777      	b.n	800bd38 <_dtoa_r+0x100>
 800be48:	2301      	movs	r3, #1
 800be4a:	e7b8      	b.n	800bdbe <_dtoa_r+0x186>
 800be4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800be4e:	e7b7      	b.n	800bdc0 <_dtoa_r+0x188>
 800be50:	427b      	negs	r3, r7
 800be52:	930a      	str	r3, [sp, #40]	@ 0x28
 800be54:	2300      	movs	r3, #0
 800be56:	eba8 0807 	sub.w	r8, r8, r7
 800be5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be5c:	e7c4      	b.n	800bde8 <_dtoa_r+0x1b0>
 800be5e:	2300      	movs	r3, #0
 800be60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc35      	bgt.n	800bed4 <_dtoa_r+0x29c>
 800be68:	2301      	movs	r3, #1
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	461a      	mov	r2, r3
 800be70:	920e      	str	r2, [sp, #56]	@ 0x38
 800be72:	e00b      	b.n	800be8c <_dtoa_r+0x254>
 800be74:	2301      	movs	r3, #1
 800be76:	e7f3      	b.n	800be60 <_dtoa_r+0x228>
 800be78:	2300      	movs	r3, #0
 800be7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be7e:	18fb      	adds	r3, r7, r3
 800be80:	9300      	str	r3, [sp, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	2b01      	cmp	r3, #1
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	bfb8      	it	lt
 800be8a:	2301      	movlt	r3, #1
 800be8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be90:	2100      	movs	r1, #0
 800be92:	2204      	movs	r2, #4
 800be94:	f102 0514 	add.w	r5, r2, #20
 800be98:	429d      	cmp	r5, r3
 800be9a:	d91f      	bls.n	800bedc <_dtoa_r+0x2a4>
 800be9c:	6041      	str	r1, [r0, #4]
 800be9e:	4658      	mov	r0, fp
 800bea0:	f001 fa92 	bl	800d3c8 <_Balloc>
 800bea4:	4682      	mov	sl, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d13c      	bne.n	800bf24 <_dtoa_r+0x2ec>
 800beaa:	4b1b      	ldr	r3, [pc, #108]	@ (800bf18 <_dtoa_r+0x2e0>)
 800beac:	4602      	mov	r2, r0
 800beae:	f240 11af 	movw	r1, #431	@ 0x1af
 800beb2:	e6d8      	b.n	800bc66 <_dtoa_r+0x2e>
 800beb4:	2301      	movs	r3, #1
 800beb6:	e7e0      	b.n	800be7a <_dtoa_r+0x242>
 800beb8:	2401      	movs	r4, #1
 800beba:	2300      	movs	r3, #0
 800bebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bebe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	9307      	str	r3, [sp, #28]
 800bec8:	2200      	movs	r2, #0
 800beca:	2312      	movs	r3, #18
 800becc:	e7d0      	b.n	800be70 <_dtoa_r+0x238>
 800bece:	2301      	movs	r3, #1
 800bed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bed2:	e7f5      	b.n	800bec0 <_dtoa_r+0x288>
 800bed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	e7d7      	b.n	800be8c <_dtoa_r+0x254>
 800bedc:	3101      	adds	r1, #1
 800bede:	0052      	lsls	r2, r2, #1
 800bee0:	e7d8      	b.n	800be94 <_dtoa_r+0x25c>
 800bee2:	bf00      	nop
 800bee4:	f3af 8000 	nop.w
 800bee8:	636f4361 	.word	0x636f4361
 800beec:	3fd287a7 	.word	0x3fd287a7
 800bef0:	8b60c8b3 	.word	0x8b60c8b3
 800bef4:	3fc68a28 	.word	0x3fc68a28
 800bef8:	509f79fb 	.word	0x509f79fb
 800befc:	3fd34413 	.word	0x3fd34413
 800bf00:	0800f1c6 	.word	0x0800f1c6
 800bf04:	0800f1dd 	.word	0x0800f1dd
 800bf08:	7ff00000 	.word	0x7ff00000
 800bf0c:	0800f031 	.word	0x0800f031
 800bf10:	3ff80000 	.word	0x3ff80000
 800bf14:	0800f348 	.word	0x0800f348
 800bf18:	0800f235 	.word	0x0800f235
 800bf1c:	0800f1c2 	.word	0x0800f1c2
 800bf20:	0800f030 	.word	0x0800f030
 800bf24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf28:	6018      	str	r0, [r3, #0]
 800bf2a:	9b07      	ldr	r3, [sp, #28]
 800bf2c:	2b0e      	cmp	r3, #14
 800bf2e:	f200 80a4 	bhi.w	800c07a <_dtoa_r+0x442>
 800bf32:	2c00      	cmp	r4, #0
 800bf34:	f000 80a1 	beq.w	800c07a <_dtoa_r+0x442>
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	dd33      	ble.n	800bfa4 <_dtoa_r+0x36c>
 800bf3c:	4bad      	ldr	r3, [pc, #692]	@ (800c1f4 <_dtoa_r+0x5bc>)
 800bf3e:	f007 020f 	and.w	r2, r7, #15
 800bf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf46:	ed93 7b00 	vldr	d7, [r3]
 800bf4a:	05f8      	lsls	r0, r7, #23
 800bf4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf54:	d516      	bpl.n	800bf84 <_dtoa_r+0x34c>
 800bf56:	4ba8      	ldr	r3, [pc, #672]	@ (800c1f8 <_dtoa_r+0x5c0>)
 800bf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf60:	f7f4 fc8c 	bl	800087c <__aeabi_ddiv>
 800bf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf68:	f004 040f 	and.w	r4, r4, #15
 800bf6c:	2603      	movs	r6, #3
 800bf6e:	4da2      	ldr	r5, [pc, #648]	@ (800c1f8 <_dtoa_r+0x5c0>)
 800bf70:	b954      	cbnz	r4, 800bf88 <_dtoa_r+0x350>
 800bf72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf7a:	f7f4 fc7f 	bl	800087c <__aeabi_ddiv>
 800bf7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf82:	e028      	b.n	800bfd6 <_dtoa_r+0x39e>
 800bf84:	2602      	movs	r6, #2
 800bf86:	e7f2      	b.n	800bf6e <_dtoa_r+0x336>
 800bf88:	07e1      	lsls	r1, r4, #31
 800bf8a:	d508      	bpl.n	800bf9e <_dtoa_r+0x366>
 800bf8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf94:	f7f4 fb48 	bl	8000628 <__aeabi_dmul>
 800bf98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf9c:	3601      	adds	r6, #1
 800bf9e:	1064      	asrs	r4, r4, #1
 800bfa0:	3508      	adds	r5, #8
 800bfa2:	e7e5      	b.n	800bf70 <_dtoa_r+0x338>
 800bfa4:	f000 80d2 	beq.w	800c14c <_dtoa_r+0x514>
 800bfa8:	427c      	negs	r4, r7
 800bfaa:	4b92      	ldr	r3, [pc, #584]	@ (800c1f4 <_dtoa_r+0x5bc>)
 800bfac:	4d92      	ldr	r5, [pc, #584]	@ (800c1f8 <_dtoa_r+0x5c0>)
 800bfae:	f004 020f 	and.w	r2, r4, #15
 800bfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfbe:	f7f4 fb33 	bl	8000628 <__aeabi_dmul>
 800bfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc6:	1124      	asrs	r4, r4, #4
 800bfc8:	2300      	movs	r3, #0
 800bfca:	2602      	movs	r6, #2
 800bfcc:	2c00      	cmp	r4, #0
 800bfce:	f040 80b2 	bne.w	800c136 <_dtoa_r+0x4fe>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1d3      	bne.n	800bf7e <_dtoa_r+0x346>
 800bfd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80b7 	beq.w	800c150 <_dtoa_r+0x518>
 800bfe2:	4b86      	ldr	r3, [pc, #536]	@ (800c1fc <_dtoa_r+0x5c4>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 fd8f 	bl	8000b0c <__aeabi_dcmplt>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f000 80ae 	beq.w	800c150 <_dtoa_r+0x518>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80aa 	beq.w	800c150 <_dtoa_r+0x518>
 800bffc:	9b00      	ldr	r3, [sp, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	dd37      	ble.n	800c072 <_dtoa_r+0x43a>
 800c002:	1e7b      	subs	r3, r7, #1
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	4620      	mov	r0, r4
 800c008:	4b7d      	ldr	r3, [pc, #500]	@ (800c200 <_dtoa_r+0x5c8>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 fb0b 	bl	8000628 <__aeabi_dmul>
 800c012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c016:	9c00      	ldr	r4, [sp, #0]
 800c018:	3601      	adds	r6, #1
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7f4 fa9a 	bl	8000554 <__aeabi_i2d>
 800c020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c024:	f7f4 fb00 	bl	8000628 <__aeabi_dmul>
 800c028:	4b76      	ldr	r3, [pc, #472]	@ (800c204 <_dtoa_r+0x5cc>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	f7f4 f946 	bl	80002bc <__adddf3>
 800c030:	4605      	mov	r5, r0
 800c032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c036:	2c00      	cmp	r4, #0
 800c038:	f040 808d 	bne.w	800c156 <_dtoa_r+0x51e>
 800c03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c040:	4b71      	ldr	r3, [pc, #452]	@ (800c208 <_dtoa_r+0x5d0>)
 800c042:	2200      	movs	r2, #0
 800c044:	f7f4 f938 	bl	80002b8 <__aeabi_dsub>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c050:	462a      	mov	r2, r5
 800c052:	4633      	mov	r3, r6
 800c054:	f7f4 fd78 	bl	8000b48 <__aeabi_dcmpgt>
 800c058:	2800      	cmp	r0, #0
 800c05a:	f040 828b 	bne.w	800c574 <_dtoa_r+0x93c>
 800c05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c062:	462a      	mov	r2, r5
 800c064:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c068:	f7f4 fd50 	bl	8000b0c <__aeabi_dcmplt>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	f040 8128 	bne.w	800c2c2 <_dtoa_r+0x68a>
 800c072:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c076:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c07a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f2c0 815a 	blt.w	800c336 <_dtoa_r+0x6fe>
 800c082:	2f0e      	cmp	r7, #14
 800c084:	f300 8157 	bgt.w	800c336 <_dtoa_r+0x6fe>
 800c088:	4b5a      	ldr	r3, [pc, #360]	@ (800c1f4 <_dtoa_r+0x5bc>)
 800c08a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c08e:	ed93 7b00 	vldr	d7, [r3]
 800c092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c094:	2b00      	cmp	r3, #0
 800c096:	ed8d 7b00 	vstr	d7, [sp]
 800c09a:	da03      	bge.n	800c0a4 <_dtoa_r+0x46c>
 800c09c:	9b07      	ldr	r3, [sp, #28]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f340 8101 	ble.w	800c2a6 <_dtoa_r+0x66e>
 800c0a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0a8:	4656      	mov	r6, sl
 800c0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 fbe3 	bl	800087c <__aeabi_ddiv>
 800c0b6:	f7f4 fd67 	bl	8000b88 <__aeabi_d2iz>
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	f7f4 fa4a 	bl	8000554 <__aeabi_i2d>
 800c0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c4:	f7f4 fab0 	bl	8000628 <__aeabi_dmul>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0d4:	f7f4 f8f0 	bl	80002b8 <__aeabi_dsub>
 800c0d8:	f806 4b01 	strb.w	r4, [r6], #1
 800c0dc:	9d07      	ldr	r5, [sp, #28]
 800c0de:	eba6 040a 	sub.w	r4, r6, sl
 800c0e2:	42a5      	cmp	r5, r4
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	f040 8117 	bne.w	800c31a <_dtoa_r+0x6e2>
 800c0ec:	f7f4 f8e6 	bl	80002bc <__adddf3>
 800c0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	f7f4 fd26 	bl	8000b48 <__aeabi_dcmpgt>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f040 80f9 	bne.w	800c2f4 <_dtoa_r+0x6bc>
 800c102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f7f4 fcf5 	bl	8000af8 <__aeabi_dcmpeq>
 800c10e:	b118      	cbz	r0, 800c118 <_dtoa_r+0x4e0>
 800c110:	f018 0f01 	tst.w	r8, #1
 800c114:	f040 80ee 	bne.w	800c2f4 <_dtoa_r+0x6bc>
 800c118:	4649      	mov	r1, r9
 800c11a:	4658      	mov	r0, fp
 800c11c:	f001 f994 	bl	800d448 <_Bfree>
 800c120:	2300      	movs	r3, #0
 800c122:	7033      	strb	r3, [r6, #0]
 800c124:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c126:	3701      	adds	r7, #1
 800c128:	601f      	str	r7, [r3, #0]
 800c12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 831d 	beq.w	800c76c <_dtoa_r+0xb34>
 800c132:	601e      	str	r6, [r3, #0]
 800c134:	e31a      	b.n	800c76c <_dtoa_r+0xb34>
 800c136:	07e2      	lsls	r2, r4, #31
 800c138:	d505      	bpl.n	800c146 <_dtoa_r+0x50e>
 800c13a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c13e:	f7f4 fa73 	bl	8000628 <__aeabi_dmul>
 800c142:	3601      	adds	r6, #1
 800c144:	2301      	movs	r3, #1
 800c146:	1064      	asrs	r4, r4, #1
 800c148:	3508      	adds	r5, #8
 800c14a:	e73f      	b.n	800bfcc <_dtoa_r+0x394>
 800c14c:	2602      	movs	r6, #2
 800c14e:	e742      	b.n	800bfd6 <_dtoa_r+0x39e>
 800c150:	9c07      	ldr	r4, [sp, #28]
 800c152:	9704      	str	r7, [sp, #16]
 800c154:	e761      	b.n	800c01a <_dtoa_r+0x3e2>
 800c156:	4b27      	ldr	r3, [pc, #156]	@ (800c1f4 <_dtoa_r+0x5bc>)
 800c158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c15a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c15e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c162:	4454      	add	r4, sl
 800c164:	2900      	cmp	r1, #0
 800c166:	d053      	beq.n	800c210 <_dtoa_r+0x5d8>
 800c168:	4928      	ldr	r1, [pc, #160]	@ (800c20c <_dtoa_r+0x5d4>)
 800c16a:	2000      	movs	r0, #0
 800c16c:	f7f4 fb86 	bl	800087c <__aeabi_ddiv>
 800c170:	4633      	mov	r3, r6
 800c172:	462a      	mov	r2, r5
 800c174:	f7f4 f8a0 	bl	80002b8 <__aeabi_dsub>
 800c178:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c17c:	4656      	mov	r6, sl
 800c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c182:	f7f4 fd01 	bl	8000b88 <__aeabi_d2iz>
 800c186:	4605      	mov	r5, r0
 800c188:	f7f4 f9e4 	bl	8000554 <__aeabi_i2d>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c194:	f7f4 f890 	bl	80002b8 <__aeabi_dsub>
 800c198:	3530      	adds	r5, #48	@ 0x30
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1a2:	f806 5b01 	strb.w	r5, [r6], #1
 800c1a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1aa:	f7f4 fcaf 	bl	8000b0c <__aeabi_dcmplt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d171      	bne.n	800c296 <_dtoa_r+0x65e>
 800c1b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b6:	4911      	ldr	r1, [pc, #68]	@ (800c1fc <_dtoa_r+0x5c4>)
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	f7f4 f87d 	bl	80002b8 <__aeabi_dsub>
 800c1be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1c2:	f7f4 fca3 	bl	8000b0c <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 8095 	bne.w	800c2f6 <_dtoa_r+0x6be>
 800c1cc:	42a6      	cmp	r6, r4
 800c1ce:	f43f af50 	beq.w	800c072 <_dtoa_r+0x43a>
 800c1d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c200 <_dtoa_r+0x5c8>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f7f4 fa25 	bl	8000628 <__aeabi_dmul>
 800c1de:	4b08      	ldr	r3, [pc, #32]	@ (800c200 <_dtoa_r+0x5c8>)
 800c1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ea:	f7f4 fa1d 	bl	8000628 <__aeabi_dmul>
 800c1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1f2:	e7c4      	b.n	800c17e <_dtoa_r+0x546>
 800c1f4:	0800f348 	.word	0x0800f348
 800c1f8:	0800f320 	.word	0x0800f320
 800c1fc:	3ff00000 	.word	0x3ff00000
 800c200:	40240000 	.word	0x40240000
 800c204:	401c0000 	.word	0x401c0000
 800c208:	40140000 	.word	0x40140000
 800c20c:	3fe00000 	.word	0x3fe00000
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	f7f4 fa08 	bl	8000628 <__aeabi_dmul>
 800c218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c21c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c21e:	4656      	mov	r6, sl
 800c220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c224:	f7f4 fcb0 	bl	8000b88 <__aeabi_d2iz>
 800c228:	4605      	mov	r5, r0
 800c22a:	f7f4 f993 	bl	8000554 <__aeabi_i2d>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c236:	f7f4 f83f 	bl	80002b8 <__aeabi_dsub>
 800c23a:	3530      	adds	r5, #48	@ 0x30
 800c23c:	f806 5b01 	strb.w	r5, [r6], #1
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	42a6      	cmp	r6, r4
 800c246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c24a:	f04f 0200 	mov.w	r2, #0
 800c24e:	d124      	bne.n	800c29a <_dtoa_r+0x662>
 800c250:	4bac      	ldr	r3, [pc, #688]	@ (800c504 <_dtoa_r+0x8cc>)
 800c252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c256:	f7f4 f831 	bl	80002bc <__adddf3>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c262:	f7f4 fc71 	bl	8000b48 <__aeabi_dcmpgt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d145      	bne.n	800c2f6 <_dtoa_r+0x6be>
 800c26a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c26e:	49a5      	ldr	r1, [pc, #660]	@ (800c504 <_dtoa_r+0x8cc>)
 800c270:	2000      	movs	r0, #0
 800c272:	f7f4 f821 	bl	80002b8 <__aeabi_dsub>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c27e:	f7f4 fc45 	bl	8000b0c <__aeabi_dcmplt>
 800c282:	2800      	cmp	r0, #0
 800c284:	f43f aef5 	beq.w	800c072 <_dtoa_r+0x43a>
 800c288:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c28a:	1e73      	subs	r3, r6, #1
 800c28c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c28e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c292:	2b30      	cmp	r3, #48	@ 0x30
 800c294:	d0f8      	beq.n	800c288 <_dtoa_r+0x650>
 800c296:	9f04      	ldr	r7, [sp, #16]
 800c298:	e73e      	b.n	800c118 <_dtoa_r+0x4e0>
 800c29a:	4b9b      	ldr	r3, [pc, #620]	@ (800c508 <_dtoa_r+0x8d0>)
 800c29c:	f7f4 f9c4 	bl	8000628 <__aeabi_dmul>
 800c2a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2a4:	e7bc      	b.n	800c220 <_dtoa_r+0x5e8>
 800c2a6:	d10c      	bne.n	800c2c2 <_dtoa_r+0x68a>
 800c2a8:	4b98      	ldr	r3, [pc, #608]	@ (800c50c <_dtoa_r+0x8d4>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2b0:	f7f4 f9ba 	bl	8000628 <__aeabi_dmul>
 800c2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2b8:	f7f4 fc3c 	bl	8000b34 <__aeabi_dcmpge>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f000 8157 	beq.w	800c570 <_dtoa_r+0x938>
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	4625      	mov	r5, r4
 800c2c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2c8:	43db      	mvns	r3, r3
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	4656      	mov	r6, sl
 800c2ce:	2700      	movs	r7, #0
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4658      	mov	r0, fp
 800c2d4:	f001 f8b8 	bl	800d448 <_Bfree>
 800c2d8:	2d00      	cmp	r5, #0
 800c2da:	d0dc      	beq.n	800c296 <_dtoa_r+0x65e>
 800c2dc:	b12f      	cbz	r7, 800c2ea <_dtoa_r+0x6b2>
 800c2de:	42af      	cmp	r7, r5
 800c2e0:	d003      	beq.n	800c2ea <_dtoa_r+0x6b2>
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	4658      	mov	r0, fp
 800c2e6:	f001 f8af 	bl	800d448 <_Bfree>
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	4658      	mov	r0, fp
 800c2ee:	f001 f8ab 	bl	800d448 <_Bfree>
 800c2f2:	e7d0      	b.n	800c296 <_dtoa_r+0x65e>
 800c2f4:	9704      	str	r7, [sp, #16]
 800c2f6:	4633      	mov	r3, r6
 800c2f8:	461e      	mov	r6, r3
 800c2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2fe:	2a39      	cmp	r2, #57	@ 0x39
 800c300:	d107      	bne.n	800c312 <_dtoa_r+0x6da>
 800c302:	459a      	cmp	sl, r3
 800c304:	d1f8      	bne.n	800c2f8 <_dtoa_r+0x6c0>
 800c306:	9a04      	ldr	r2, [sp, #16]
 800c308:	3201      	adds	r2, #1
 800c30a:	9204      	str	r2, [sp, #16]
 800c30c:	2230      	movs	r2, #48	@ 0x30
 800c30e:	f88a 2000 	strb.w	r2, [sl]
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	3201      	adds	r2, #1
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	e7bd      	b.n	800c296 <_dtoa_r+0x65e>
 800c31a:	4b7b      	ldr	r3, [pc, #492]	@ (800c508 <_dtoa_r+0x8d0>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	f7f4 f983 	bl	8000628 <__aeabi_dmul>
 800c322:	2200      	movs	r2, #0
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	f7f4 fbe5 	bl	8000af8 <__aeabi_dcmpeq>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f43f aebb 	beq.w	800c0aa <_dtoa_r+0x472>
 800c334:	e6f0      	b.n	800c118 <_dtoa_r+0x4e0>
 800c336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c338:	2a00      	cmp	r2, #0
 800c33a:	f000 80db 	beq.w	800c4f4 <_dtoa_r+0x8bc>
 800c33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c340:	2a01      	cmp	r2, #1
 800c342:	f300 80bf 	bgt.w	800c4c4 <_dtoa_r+0x88c>
 800c346:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c348:	2a00      	cmp	r2, #0
 800c34a:	f000 80b7 	beq.w	800c4bc <_dtoa_r+0x884>
 800c34e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c352:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c354:	4646      	mov	r6, r8
 800c356:	9a08      	ldr	r2, [sp, #32]
 800c358:	2101      	movs	r1, #1
 800c35a:	441a      	add	r2, r3
 800c35c:	4658      	mov	r0, fp
 800c35e:	4498      	add	r8, r3
 800c360:	9208      	str	r2, [sp, #32]
 800c362:	f001 f96f 	bl	800d644 <__i2b>
 800c366:	4605      	mov	r5, r0
 800c368:	b15e      	cbz	r6, 800c382 <_dtoa_r+0x74a>
 800c36a:	9b08      	ldr	r3, [sp, #32]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dd08      	ble.n	800c382 <_dtoa_r+0x74a>
 800c370:	42b3      	cmp	r3, r6
 800c372:	9a08      	ldr	r2, [sp, #32]
 800c374:	bfa8      	it	ge
 800c376:	4633      	movge	r3, r6
 800c378:	eba8 0803 	sub.w	r8, r8, r3
 800c37c:	1af6      	subs	r6, r6, r3
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	9308      	str	r3, [sp, #32]
 800c382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c384:	b1f3      	cbz	r3, 800c3c4 <_dtoa_r+0x78c>
 800c386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 80b7 	beq.w	800c4fc <_dtoa_r+0x8c4>
 800c38e:	b18c      	cbz	r4, 800c3b4 <_dtoa_r+0x77c>
 800c390:	4629      	mov	r1, r5
 800c392:	4622      	mov	r2, r4
 800c394:	4658      	mov	r0, fp
 800c396:	f001 fa15 	bl	800d7c4 <__pow5mult>
 800c39a:	464a      	mov	r2, r9
 800c39c:	4601      	mov	r1, r0
 800c39e:	4605      	mov	r5, r0
 800c3a0:	4658      	mov	r0, fp
 800c3a2:	f001 f965 	bl	800d670 <__multiply>
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	9004      	str	r0, [sp, #16]
 800c3aa:	4658      	mov	r0, fp
 800c3ac:	f001 f84c 	bl	800d448 <_Bfree>
 800c3b0:	9b04      	ldr	r3, [sp, #16]
 800c3b2:	4699      	mov	r9, r3
 800c3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3b6:	1b1a      	subs	r2, r3, r4
 800c3b8:	d004      	beq.n	800c3c4 <_dtoa_r+0x78c>
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f001 fa01 	bl	800d7c4 <__pow5mult>
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	2101      	movs	r1, #1
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f001 f93c 	bl	800d644 <__i2b>
 800c3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 81cf 	beq.w	800c774 <_dtoa_r+0xb3c>
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	4601      	mov	r1, r0
 800c3da:	4658      	mov	r0, fp
 800c3dc:	f001 f9f2 	bl	800d7c4 <__pow5mult>
 800c3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	f300 8095 	bgt.w	800c514 <_dtoa_r+0x8dc>
 800c3ea:	9b02      	ldr	r3, [sp, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 8087 	bne.w	800c500 <_dtoa_r+0x8c8>
 800c3f2:	9b03      	ldr	r3, [sp, #12]
 800c3f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f040 8089 	bne.w	800c510 <_dtoa_r+0x8d8>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c404:	0d1b      	lsrs	r3, r3, #20
 800c406:	051b      	lsls	r3, r3, #20
 800c408:	b12b      	cbz	r3, 800c416 <_dtoa_r+0x7de>
 800c40a:	9b08      	ldr	r3, [sp, #32]
 800c40c:	3301      	adds	r3, #1
 800c40e:	9308      	str	r3, [sp, #32]
 800c410:	f108 0801 	add.w	r8, r8, #1
 800c414:	2301      	movs	r3, #1
 800c416:	930a      	str	r3, [sp, #40]	@ 0x28
 800c418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 81b0 	beq.w	800c780 <_dtoa_r+0xb48>
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c426:	6918      	ldr	r0, [r3, #16]
 800c428:	f001 f8c0 	bl	800d5ac <__hi0bits>
 800c42c:	f1c0 0020 	rsb	r0, r0, #32
 800c430:	9b08      	ldr	r3, [sp, #32]
 800c432:	4418      	add	r0, r3
 800c434:	f010 001f 	ands.w	r0, r0, #31
 800c438:	d077      	beq.n	800c52a <_dtoa_r+0x8f2>
 800c43a:	f1c0 0320 	rsb	r3, r0, #32
 800c43e:	2b04      	cmp	r3, #4
 800c440:	dd6b      	ble.n	800c51a <_dtoa_r+0x8e2>
 800c442:	9b08      	ldr	r3, [sp, #32]
 800c444:	f1c0 001c 	rsb	r0, r0, #28
 800c448:	4403      	add	r3, r0
 800c44a:	4480      	add	r8, r0
 800c44c:	4406      	add	r6, r0
 800c44e:	9308      	str	r3, [sp, #32]
 800c450:	f1b8 0f00 	cmp.w	r8, #0
 800c454:	dd05      	ble.n	800c462 <_dtoa_r+0x82a>
 800c456:	4649      	mov	r1, r9
 800c458:	4642      	mov	r2, r8
 800c45a:	4658      	mov	r0, fp
 800c45c:	f001 fa0c 	bl	800d878 <__lshift>
 800c460:	4681      	mov	r9, r0
 800c462:	9b08      	ldr	r3, [sp, #32]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dd05      	ble.n	800c474 <_dtoa_r+0x83c>
 800c468:	4621      	mov	r1, r4
 800c46a:	461a      	mov	r2, r3
 800c46c:	4658      	mov	r0, fp
 800c46e:	f001 fa03 	bl	800d878 <__lshift>
 800c472:	4604      	mov	r4, r0
 800c474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c476:	2b00      	cmp	r3, #0
 800c478:	d059      	beq.n	800c52e <_dtoa_r+0x8f6>
 800c47a:	4621      	mov	r1, r4
 800c47c:	4648      	mov	r0, r9
 800c47e:	f001 fa67 	bl	800d950 <__mcmp>
 800c482:	2800      	cmp	r0, #0
 800c484:	da53      	bge.n	800c52e <_dtoa_r+0x8f6>
 800c486:	1e7b      	subs	r3, r7, #1
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	4649      	mov	r1, r9
 800c48c:	2300      	movs	r3, #0
 800c48e:	220a      	movs	r2, #10
 800c490:	4658      	mov	r0, fp
 800c492:	f000 fffb 	bl	800d48c <__multadd>
 800c496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c498:	4681      	mov	r9, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 8172 	beq.w	800c784 <_dtoa_r+0xb4c>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	220a      	movs	r2, #10
 800c4a6:	4658      	mov	r0, fp
 800c4a8:	f000 fff0 	bl	800d48c <__multadd>
 800c4ac:	9b00      	ldr	r3, [sp, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	dc67      	bgt.n	800c584 <_dtoa_r+0x94c>
 800c4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	dc41      	bgt.n	800c53e <_dtoa_r+0x906>
 800c4ba:	e063      	b.n	800c584 <_dtoa_r+0x94c>
 800c4bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c4be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4c2:	e746      	b.n	800c352 <_dtoa_r+0x71a>
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	1e5c      	subs	r4, r3, #1
 800c4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ca:	42a3      	cmp	r3, r4
 800c4cc:	bfbf      	itttt	lt
 800c4ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c4d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c4d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c4d4:	1ae3      	sublt	r3, r4, r3
 800c4d6:	bfb4      	ite	lt
 800c4d8:	18d2      	addlt	r2, r2, r3
 800c4da:	1b1c      	subge	r4, r3, r4
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	bfbc      	itt	lt
 800c4e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c4e2:	2400      	movlt	r4, #0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	bfb5      	itete	lt
 800c4e8:	eba8 0603 	sublt.w	r6, r8, r3
 800c4ec:	9b07      	ldrge	r3, [sp, #28]
 800c4ee:	2300      	movlt	r3, #0
 800c4f0:	4646      	movge	r6, r8
 800c4f2:	e730      	b.n	800c356 <_dtoa_r+0x71e>
 800c4f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4f8:	4646      	mov	r6, r8
 800c4fa:	e735      	b.n	800c368 <_dtoa_r+0x730>
 800c4fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4fe:	e75c      	b.n	800c3ba <_dtoa_r+0x782>
 800c500:	2300      	movs	r3, #0
 800c502:	e788      	b.n	800c416 <_dtoa_r+0x7de>
 800c504:	3fe00000 	.word	0x3fe00000
 800c508:	40240000 	.word	0x40240000
 800c50c:	40140000 	.word	0x40140000
 800c510:	9b02      	ldr	r3, [sp, #8]
 800c512:	e780      	b.n	800c416 <_dtoa_r+0x7de>
 800c514:	2300      	movs	r3, #0
 800c516:	930a      	str	r3, [sp, #40]	@ 0x28
 800c518:	e782      	b.n	800c420 <_dtoa_r+0x7e8>
 800c51a:	d099      	beq.n	800c450 <_dtoa_r+0x818>
 800c51c:	9a08      	ldr	r2, [sp, #32]
 800c51e:	331c      	adds	r3, #28
 800c520:	441a      	add	r2, r3
 800c522:	4498      	add	r8, r3
 800c524:	441e      	add	r6, r3
 800c526:	9208      	str	r2, [sp, #32]
 800c528:	e792      	b.n	800c450 <_dtoa_r+0x818>
 800c52a:	4603      	mov	r3, r0
 800c52c:	e7f6      	b.n	800c51c <_dtoa_r+0x8e4>
 800c52e:	9b07      	ldr	r3, [sp, #28]
 800c530:	9704      	str	r7, [sp, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	dc20      	bgt.n	800c578 <_dtoa_r+0x940>
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	dd1e      	ble.n	800c57c <_dtoa_r+0x944>
 800c53e:	9b00      	ldr	r3, [sp, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	f47f aec0 	bne.w	800c2c6 <_dtoa_r+0x68e>
 800c546:	4621      	mov	r1, r4
 800c548:	2205      	movs	r2, #5
 800c54a:	4658      	mov	r0, fp
 800c54c:	f000 ff9e 	bl	800d48c <__multadd>
 800c550:	4601      	mov	r1, r0
 800c552:	4604      	mov	r4, r0
 800c554:	4648      	mov	r0, r9
 800c556:	f001 f9fb 	bl	800d950 <__mcmp>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	f77f aeb3 	ble.w	800c2c6 <_dtoa_r+0x68e>
 800c560:	4656      	mov	r6, sl
 800c562:	2331      	movs	r3, #49	@ 0x31
 800c564:	f806 3b01 	strb.w	r3, [r6], #1
 800c568:	9b04      	ldr	r3, [sp, #16]
 800c56a:	3301      	adds	r3, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	e6ae      	b.n	800c2ce <_dtoa_r+0x696>
 800c570:	9c07      	ldr	r4, [sp, #28]
 800c572:	9704      	str	r7, [sp, #16]
 800c574:	4625      	mov	r5, r4
 800c576:	e7f3      	b.n	800c560 <_dtoa_r+0x928>
 800c578:	9b07      	ldr	r3, [sp, #28]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 8104 	beq.w	800c78c <_dtoa_r+0xb54>
 800c584:	2e00      	cmp	r6, #0
 800c586:	dd05      	ble.n	800c594 <_dtoa_r+0x95c>
 800c588:	4629      	mov	r1, r5
 800c58a:	4632      	mov	r2, r6
 800c58c:	4658      	mov	r0, fp
 800c58e:	f001 f973 	bl	800d878 <__lshift>
 800c592:	4605      	mov	r5, r0
 800c594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d05a      	beq.n	800c650 <_dtoa_r+0xa18>
 800c59a:	6869      	ldr	r1, [r5, #4]
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 ff13 	bl	800d3c8 <_Balloc>
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	b928      	cbnz	r0, 800c5b2 <_dtoa_r+0x97a>
 800c5a6:	4b84      	ldr	r3, [pc, #528]	@ (800c7b8 <_dtoa_r+0xb80>)
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c5ae:	f7ff bb5a 	b.w	800bc66 <_dtoa_r+0x2e>
 800c5b2:	692a      	ldr	r2, [r5, #16]
 800c5b4:	3202      	adds	r2, #2
 800c5b6:	0092      	lsls	r2, r2, #2
 800c5b8:	f105 010c 	add.w	r1, r5, #12
 800c5bc:	300c      	adds	r0, #12
 800c5be:	f7ff fa94 	bl	800baea <memcpy>
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4658      	mov	r0, fp
 800c5c8:	f001 f956 	bl	800d878 <__lshift>
 800c5cc:	f10a 0301 	add.w	r3, sl, #1
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	9b00      	ldr	r3, [sp, #0]
 800c5d4:	4453      	add	r3, sl
 800c5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5d8:	9b02      	ldr	r3, [sp, #8]
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	462f      	mov	r7, r5
 800c5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	f7ff fa99 	bl	800bb24 <quorem>
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	9002      	str	r0, [sp, #8]
 800c5f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f001 f9a8 	bl	800d950 <__mcmp>
 800c600:	462a      	mov	r2, r5
 800c602:	9008      	str	r0, [sp, #32]
 800c604:	4621      	mov	r1, r4
 800c606:	4658      	mov	r0, fp
 800c608:	f001 f9be 	bl	800d988 <__mdiff>
 800c60c:	68c2      	ldr	r2, [r0, #12]
 800c60e:	4606      	mov	r6, r0
 800c610:	bb02      	cbnz	r2, 800c654 <_dtoa_r+0xa1c>
 800c612:	4601      	mov	r1, r0
 800c614:	4648      	mov	r0, r9
 800c616:	f001 f99b 	bl	800d950 <__mcmp>
 800c61a:	4602      	mov	r2, r0
 800c61c:	4631      	mov	r1, r6
 800c61e:	4658      	mov	r0, fp
 800c620:	920e      	str	r2, [sp, #56]	@ 0x38
 800c622:	f000 ff11 	bl	800d448 <_Bfree>
 800c626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c62a:	9e07      	ldr	r6, [sp, #28]
 800c62c:	ea43 0102 	orr.w	r1, r3, r2
 800c630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c632:	4319      	orrs	r1, r3
 800c634:	d110      	bne.n	800c658 <_dtoa_r+0xa20>
 800c636:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c63a:	d029      	beq.n	800c690 <_dtoa_r+0xa58>
 800c63c:	9b08      	ldr	r3, [sp, #32]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd02      	ble.n	800c648 <_dtoa_r+0xa10>
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c648:	9b00      	ldr	r3, [sp, #0]
 800c64a:	f883 8000 	strb.w	r8, [r3]
 800c64e:	e63f      	b.n	800c2d0 <_dtoa_r+0x698>
 800c650:	4628      	mov	r0, r5
 800c652:	e7bb      	b.n	800c5cc <_dtoa_r+0x994>
 800c654:	2201      	movs	r2, #1
 800c656:	e7e1      	b.n	800c61c <_dtoa_r+0x9e4>
 800c658:	9b08      	ldr	r3, [sp, #32]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	db04      	blt.n	800c668 <_dtoa_r+0xa30>
 800c65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c660:	430b      	orrs	r3, r1
 800c662:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c664:	430b      	orrs	r3, r1
 800c666:	d120      	bne.n	800c6aa <_dtoa_r+0xa72>
 800c668:	2a00      	cmp	r2, #0
 800c66a:	dded      	ble.n	800c648 <_dtoa_r+0xa10>
 800c66c:	4649      	mov	r1, r9
 800c66e:	2201      	movs	r2, #1
 800c670:	4658      	mov	r0, fp
 800c672:	f001 f901 	bl	800d878 <__lshift>
 800c676:	4621      	mov	r1, r4
 800c678:	4681      	mov	r9, r0
 800c67a:	f001 f969 	bl	800d950 <__mcmp>
 800c67e:	2800      	cmp	r0, #0
 800c680:	dc03      	bgt.n	800c68a <_dtoa_r+0xa52>
 800c682:	d1e1      	bne.n	800c648 <_dtoa_r+0xa10>
 800c684:	f018 0f01 	tst.w	r8, #1
 800c688:	d0de      	beq.n	800c648 <_dtoa_r+0xa10>
 800c68a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c68e:	d1d8      	bne.n	800c642 <_dtoa_r+0xa0a>
 800c690:	9a00      	ldr	r2, [sp, #0]
 800c692:	2339      	movs	r3, #57	@ 0x39
 800c694:	7013      	strb	r3, [r2, #0]
 800c696:	4633      	mov	r3, r6
 800c698:	461e      	mov	r6, r3
 800c69a:	3b01      	subs	r3, #1
 800c69c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c6a0:	2a39      	cmp	r2, #57	@ 0x39
 800c6a2:	d052      	beq.n	800c74a <_dtoa_r+0xb12>
 800c6a4:	3201      	adds	r2, #1
 800c6a6:	701a      	strb	r2, [r3, #0]
 800c6a8:	e612      	b.n	800c2d0 <_dtoa_r+0x698>
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	dd07      	ble.n	800c6be <_dtoa_r+0xa86>
 800c6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6b2:	d0ed      	beq.n	800c690 <_dtoa_r+0xa58>
 800c6b4:	9a00      	ldr	r2, [sp, #0]
 800c6b6:	f108 0301 	add.w	r3, r8, #1
 800c6ba:	7013      	strb	r3, [r2, #0]
 800c6bc:	e608      	b.n	800c2d0 <_dtoa_r+0x698>
 800c6be:	9b07      	ldr	r3, [sp, #28]
 800c6c0:	9a07      	ldr	r2, [sp, #28]
 800c6c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d028      	beq.n	800c71e <_dtoa_r+0xae6>
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	220a      	movs	r2, #10
 800c6d2:	4658      	mov	r0, fp
 800c6d4:	f000 feda 	bl	800d48c <__multadd>
 800c6d8:	42af      	cmp	r7, r5
 800c6da:	4681      	mov	r9, r0
 800c6dc:	f04f 0300 	mov.w	r3, #0
 800c6e0:	f04f 020a 	mov.w	r2, #10
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	4658      	mov	r0, fp
 800c6e8:	d107      	bne.n	800c6fa <_dtoa_r+0xac2>
 800c6ea:	f000 fecf 	bl	800d48c <__multadd>
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	9b07      	ldr	r3, [sp, #28]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	9307      	str	r3, [sp, #28]
 800c6f8:	e774      	b.n	800c5e4 <_dtoa_r+0x9ac>
 800c6fa:	f000 fec7 	bl	800d48c <__multadd>
 800c6fe:	4629      	mov	r1, r5
 800c700:	4607      	mov	r7, r0
 800c702:	2300      	movs	r3, #0
 800c704:	220a      	movs	r2, #10
 800c706:	4658      	mov	r0, fp
 800c708:	f000 fec0 	bl	800d48c <__multadd>
 800c70c:	4605      	mov	r5, r0
 800c70e:	e7f0      	b.n	800c6f2 <_dtoa_r+0xaba>
 800c710:	9b00      	ldr	r3, [sp, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	bfcc      	ite	gt
 800c716:	461e      	movgt	r6, r3
 800c718:	2601      	movle	r6, #1
 800c71a:	4456      	add	r6, sl
 800c71c:	2700      	movs	r7, #0
 800c71e:	4649      	mov	r1, r9
 800c720:	2201      	movs	r2, #1
 800c722:	4658      	mov	r0, fp
 800c724:	f001 f8a8 	bl	800d878 <__lshift>
 800c728:	4621      	mov	r1, r4
 800c72a:	4681      	mov	r9, r0
 800c72c:	f001 f910 	bl	800d950 <__mcmp>
 800c730:	2800      	cmp	r0, #0
 800c732:	dcb0      	bgt.n	800c696 <_dtoa_r+0xa5e>
 800c734:	d102      	bne.n	800c73c <_dtoa_r+0xb04>
 800c736:	f018 0f01 	tst.w	r8, #1
 800c73a:	d1ac      	bne.n	800c696 <_dtoa_r+0xa5e>
 800c73c:	4633      	mov	r3, r6
 800c73e:	461e      	mov	r6, r3
 800c740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c744:	2a30      	cmp	r2, #48	@ 0x30
 800c746:	d0fa      	beq.n	800c73e <_dtoa_r+0xb06>
 800c748:	e5c2      	b.n	800c2d0 <_dtoa_r+0x698>
 800c74a:	459a      	cmp	sl, r3
 800c74c:	d1a4      	bne.n	800c698 <_dtoa_r+0xa60>
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	3301      	adds	r3, #1
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	2331      	movs	r3, #49	@ 0x31
 800c756:	f88a 3000 	strb.w	r3, [sl]
 800c75a:	e5b9      	b.n	800c2d0 <_dtoa_r+0x698>
 800c75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c75e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c7bc <_dtoa_r+0xb84>
 800c762:	b11b      	cbz	r3, 800c76c <_dtoa_r+0xb34>
 800c764:	f10a 0308 	add.w	r3, sl, #8
 800c768:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c76a:	6013      	str	r3, [r2, #0]
 800c76c:	4650      	mov	r0, sl
 800c76e:	b019      	add	sp, #100	@ 0x64
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c776:	2b01      	cmp	r3, #1
 800c778:	f77f ae37 	ble.w	800c3ea <_dtoa_r+0x7b2>
 800c77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c780:	2001      	movs	r0, #1
 800c782:	e655      	b.n	800c430 <_dtoa_r+0x7f8>
 800c784:	9b00      	ldr	r3, [sp, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f77f aed6 	ble.w	800c538 <_dtoa_r+0x900>
 800c78c:	4656      	mov	r6, sl
 800c78e:	4621      	mov	r1, r4
 800c790:	4648      	mov	r0, r9
 800c792:	f7ff f9c7 	bl	800bb24 <quorem>
 800c796:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c79a:	f806 8b01 	strb.w	r8, [r6], #1
 800c79e:	9b00      	ldr	r3, [sp, #0]
 800c7a0:	eba6 020a 	sub.w	r2, r6, sl
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	ddb3      	ble.n	800c710 <_dtoa_r+0xad8>
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	220a      	movs	r2, #10
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	f000 fe6c 	bl	800d48c <__multadd>
 800c7b4:	4681      	mov	r9, r0
 800c7b6:	e7ea      	b.n	800c78e <_dtoa_r+0xb56>
 800c7b8:	0800f235 	.word	0x0800f235
 800c7bc:	0800f1b9 	.word	0x0800f1b9

0800c7c0 <rshift>:
 800c7c0:	6903      	ldr	r3, [r0, #16]
 800c7c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7ce:	f100 0414 	add.w	r4, r0, #20
 800c7d2:	dd45      	ble.n	800c860 <rshift+0xa0>
 800c7d4:	f011 011f 	ands.w	r1, r1, #31
 800c7d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7e0:	d10c      	bne.n	800c7fc <rshift+0x3c>
 800c7e2:	f100 0710 	add.w	r7, r0, #16
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	42b1      	cmp	r1, r6
 800c7ea:	d334      	bcc.n	800c856 <rshift+0x96>
 800c7ec:	1a9b      	subs	r3, r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	1eea      	subs	r2, r5, #3
 800c7f2:	4296      	cmp	r6, r2
 800c7f4:	bf38      	it	cc
 800c7f6:	2300      	movcc	r3, #0
 800c7f8:	4423      	add	r3, r4
 800c7fa:	e015      	b.n	800c828 <rshift+0x68>
 800c7fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c800:	f1c1 0820 	rsb	r8, r1, #32
 800c804:	40cf      	lsrs	r7, r1
 800c806:	f105 0e04 	add.w	lr, r5, #4
 800c80a:	46a1      	mov	r9, r4
 800c80c:	4576      	cmp	r6, lr
 800c80e:	46f4      	mov	ip, lr
 800c810:	d815      	bhi.n	800c83e <rshift+0x7e>
 800c812:	1a9a      	subs	r2, r3, r2
 800c814:	0092      	lsls	r2, r2, #2
 800c816:	3a04      	subs	r2, #4
 800c818:	3501      	adds	r5, #1
 800c81a:	42ae      	cmp	r6, r5
 800c81c:	bf38      	it	cc
 800c81e:	2200      	movcc	r2, #0
 800c820:	18a3      	adds	r3, r4, r2
 800c822:	50a7      	str	r7, [r4, r2]
 800c824:	b107      	cbz	r7, 800c828 <rshift+0x68>
 800c826:	3304      	adds	r3, #4
 800c828:	1b1a      	subs	r2, r3, r4
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c830:	bf08      	it	eq
 800c832:	2300      	moveq	r3, #0
 800c834:	6102      	str	r2, [r0, #16]
 800c836:	bf08      	it	eq
 800c838:	6143      	streq	r3, [r0, #20]
 800c83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c83e:	f8dc c000 	ldr.w	ip, [ip]
 800c842:	fa0c fc08 	lsl.w	ip, ip, r8
 800c846:	ea4c 0707 	orr.w	r7, ip, r7
 800c84a:	f849 7b04 	str.w	r7, [r9], #4
 800c84e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c852:	40cf      	lsrs	r7, r1
 800c854:	e7da      	b.n	800c80c <rshift+0x4c>
 800c856:	f851 cb04 	ldr.w	ip, [r1], #4
 800c85a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c85e:	e7c3      	b.n	800c7e8 <rshift+0x28>
 800c860:	4623      	mov	r3, r4
 800c862:	e7e1      	b.n	800c828 <rshift+0x68>

0800c864 <__hexdig_fun>:
 800c864:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c868:	2b09      	cmp	r3, #9
 800c86a:	d802      	bhi.n	800c872 <__hexdig_fun+0xe>
 800c86c:	3820      	subs	r0, #32
 800c86e:	b2c0      	uxtb	r0, r0
 800c870:	4770      	bx	lr
 800c872:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c876:	2b05      	cmp	r3, #5
 800c878:	d801      	bhi.n	800c87e <__hexdig_fun+0x1a>
 800c87a:	3847      	subs	r0, #71	@ 0x47
 800c87c:	e7f7      	b.n	800c86e <__hexdig_fun+0xa>
 800c87e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c882:	2b05      	cmp	r3, #5
 800c884:	d801      	bhi.n	800c88a <__hexdig_fun+0x26>
 800c886:	3827      	subs	r0, #39	@ 0x27
 800c888:	e7f1      	b.n	800c86e <__hexdig_fun+0xa>
 800c88a:	2000      	movs	r0, #0
 800c88c:	4770      	bx	lr
	...

0800c890 <__gethex>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b085      	sub	sp, #20
 800c896:	468a      	mov	sl, r1
 800c898:	9302      	str	r3, [sp, #8]
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	9001      	str	r0, [sp, #4]
 800c89e:	4690      	mov	r8, r2
 800c8a0:	1c9c      	adds	r4, r3, #2
 800c8a2:	46a1      	mov	r9, r4
 800c8a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c8a8:	2830      	cmp	r0, #48	@ 0x30
 800c8aa:	d0fa      	beq.n	800c8a2 <__gethex+0x12>
 800c8ac:	eba9 0303 	sub.w	r3, r9, r3
 800c8b0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c8b4:	f7ff ffd6 	bl	800c864 <__hexdig_fun>
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d168      	bne.n	800c990 <__gethex+0x100>
 800c8be:	49a0      	ldr	r1, [pc, #640]	@ (800cb40 <__gethex+0x2b0>)
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	4648      	mov	r0, r9
 800c8c4:	f7ff f8c6 	bl	800ba54 <strncmp>
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d167      	bne.n	800c99e <__gethex+0x10e>
 800c8ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8d2:	4626      	mov	r6, r4
 800c8d4:	f7ff ffc6 	bl	800c864 <__hexdig_fun>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d062      	beq.n	800c9a2 <__gethex+0x112>
 800c8dc:	4623      	mov	r3, r4
 800c8de:	7818      	ldrb	r0, [r3, #0]
 800c8e0:	2830      	cmp	r0, #48	@ 0x30
 800c8e2:	4699      	mov	r9, r3
 800c8e4:	f103 0301 	add.w	r3, r3, #1
 800c8e8:	d0f9      	beq.n	800c8de <__gethex+0x4e>
 800c8ea:	f7ff ffbb 	bl	800c864 <__hexdig_fun>
 800c8ee:	fab0 f580 	clz	r5, r0
 800c8f2:	096d      	lsrs	r5, r5, #5
 800c8f4:	f04f 0b01 	mov.w	fp, #1
 800c8f8:	464a      	mov	r2, r9
 800c8fa:	4616      	mov	r6, r2
 800c8fc:	3201      	adds	r2, #1
 800c8fe:	7830      	ldrb	r0, [r6, #0]
 800c900:	f7ff ffb0 	bl	800c864 <__hexdig_fun>
 800c904:	2800      	cmp	r0, #0
 800c906:	d1f8      	bne.n	800c8fa <__gethex+0x6a>
 800c908:	498d      	ldr	r1, [pc, #564]	@ (800cb40 <__gethex+0x2b0>)
 800c90a:	2201      	movs	r2, #1
 800c90c:	4630      	mov	r0, r6
 800c90e:	f7ff f8a1 	bl	800ba54 <strncmp>
 800c912:	2800      	cmp	r0, #0
 800c914:	d13f      	bne.n	800c996 <__gethex+0x106>
 800c916:	b944      	cbnz	r4, 800c92a <__gethex+0x9a>
 800c918:	1c74      	adds	r4, r6, #1
 800c91a:	4622      	mov	r2, r4
 800c91c:	4616      	mov	r6, r2
 800c91e:	3201      	adds	r2, #1
 800c920:	7830      	ldrb	r0, [r6, #0]
 800c922:	f7ff ff9f 	bl	800c864 <__hexdig_fun>
 800c926:	2800      	cmp	r0, #0
 800c928:	d1f8      	bne.n	800c91c <__gethex+0x8c>
 800c92a:	1ba4      	subs	r4, r4, r6
 800c92c:	00a7      	lsls	r7, r4, #2
 800c92e:	7833      	ldrb	r3, [r6, #0]
 800c930:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c934:	2b50      	cmp	r3, #80	@ 0x50
 800c936:	d13e      	bne.n	800c9b6 <__gethex+0x126>
 800c938:	7873      	ldrb	r3, [r6, #1]
 800c93a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c93c:	d033      	beq.n	800c9a6 <__gethex+0x116>
 800c93e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c940:	d034      	beq.n	800c9ac <__gethex+0x11c>
 800c942:	1c71      	adds	r1, r6, #1
 800c944:	2400      	movs	r4, #0
 800c946:	7808      	ldrb	r0, [r1, #0]
 800c948:	f7ff ff8c 	bl	800c864 <__hexdig_fun>
 800c94c:	1e43      	subs	r3, r0, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b18      	cmp	r3, #24
 800c952:	d830      	bhi.n	800c9b6 <__gethex+0x126>
 800c954:	f1a0 0210 	sub.w	r2, r0, #16
 800c958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c95c:	f7ff ff82 	bl	800c864 <__hexdig_fun>
 800c960:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c964:	fa5f fc8c 	uxtb.w	ip, ip
 800c968:	f1bc 0f18 	cmp.w	ip, #24
 800c96c:	f04f 030a 	mov.w	r3, #10
 800c970:	d91e      	bls.n	800c9b0 <__gethex+0x120>
 800c972:	b104      	cbz	r4, 800c976 <__gethex+0xe6>
 800c974:	4252      	negs	r2, r2
 800c976:	4417      	add	r7, r2
 800c978:	f8ca 1000 	str.w	r1, [sl]
 800c97c:	b1ed      	cbz	r5, 800c9ba <__gethex+0x12a>
 800c97e:	f1bb 0f00 	cmp.w	fp, #0
 800c982:	bf0c      	ite	eq
 800c984:	2506      	moveq	r5, #6
 800c986:	2500      	movne	r5, #0
 800c988:	4628      	mov	r0, r5
 800c98a:	b005      	add	sp, #20
 800c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c990:	2500      	movs	r5, #0
 800c992:	462c      	mov	r4, r5
 800c994:	e7b0      	b.n	800c8f8 <__gethex+0x68>
 800c996:	2c00      	cmp	r4, #0
 800c998:	d1c7      	bne.n	800c92a <__gethex+0x9a>
 800c99a:	4627      	mov	r7, r4
 800c99c:	e7c7      	b.n	800c92e <__gethex+0x9e>
 800c99e:	464e      	mov	r6, r9
 800c9a0:	462f      	mov	r7, r5
 800c9a2:	2501      	movs	r5, #1
 800c9a4:	e7c3      	b.n	800c92e <__gethex+0x9e>
 800c9a6:	2400      	movs	r4, #0
 800c9a8:	1cb1      	adds	r1, r6, #2
 800c9aa:	e7cc      	b.n	800c946 <__gethex+0xb6>
 800c9ac:	2401      	movs	r4, #1
 800c9ae:	e7fb      	b.n	800c9a8 <__gethex+0x118>
 800c9b0:	fb03 0002 	mla	r0, r3, r2, r0
 800c9b4:	e7ce      	b.n	800c954 <__gethex+0xc4>
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	e7de      	b.n	800c978 <__gethex+0xe8>
 800c9ba:	eba6 0309 	sub.w	r3, r6, r9
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	2b07      	cmp	r3, #7
 800c9c4:	dc0a      	bgt.n	800c9dc <__gethex+0x14c>
 800c9c6:	9801      	ldr	r0, [sp, #4]
 800c9c8:	f000 fcfe 	bl	800d3c8 <_Balloc>
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	b940      	cbnz	r0, 800c9e2 <__gethex+0x152>
 800c9d0:	4b5c      	ldr	r3, [pc, #368]	@ (800cb44 <__gethex+0x2b4>)
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	21e4      	movs	r1, #228	@ 0xe4
 800c9d6:	485c      	ldr	r0, [pc, #368]	@ (800cb48 <__gethex+0x2b8>)
 800c9d8:	f001 fbb0 	bl	800e13c <__assert_func>
 800c9dc:	3101      	adds	r1, #1
 800c9de:	105b      	asrs	r3, r3, #1
 800c9e0:	e7ef      	b.n	800c9c2 <__gethex+0x132>
 800c9e2:	f100 0a14 	add.w	sl, r0, #20
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4655      	mov	r5, sl
 800c9ea:	469b      	mov	fp, r3
 800c9ec:	45b1      	cmp	r9, r6
 800c9ee:	d337      	bcc.n	800ca60 <__gethex+0x1d0>
 800c9f0:	f845 bb04 	str.w	fp, [r5], #4
 800c9f4:	eba5 050a 	sub.w	r5, r5, sl
 800c9f8:	10ad      	asrs	r5, r5, #2
 800c9fa:	6125      	str	r5, [r4, #16]
 800c9fc:	4658      	mov	r0, fp
 800c9fe:	f000 fdd5 	bl	800d5ac <__hi0bits>
 800ca02:	016d      	lsls	r5, r5, #5
 800ca04:	f8d8 6000 	ldr.w	r6, [r8]
 800ca08:	1a2d      	subs	r5, r5, r0
 800ca0a:	42b5      	cmp	r5, r6
 800ca0c:	dd54      	ble.n	800cab8 <__gethex+0x228>
 800ca0e:	1bad      	subs	r5, r5, r6
 800ca10:	4629      	mov	r1, r5
 800ca12:	4620      	mov	r0, r4
 800ca14:	f001 f969 	bl	800dcea <__any_on>
 800ca18:	4681      	mov	r9, r0
 800ca1a:	b178      	cbz	r0, 800ca3c <__gethex+0x1ac>
 800ca1c:	1e6b      	subs	r3, r5, #1
 800ca1e:	1159      	asrs	r1, r3, #5
 800ca20:	f003 021f 	and.w	r2, r3, #31
 800ca24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca28:	f04f 0901 	mov.w	r9, #1
 800ca2c:	fa09 f202 	lsl.w	r2, r9, r2
 800ca30:	420a      	tst	r2, r1
 800ca32:	d003      	beq.n	800ca3c <__gethex+0x1ac>
 800ca34:	454b      	cmp	r3, r9
 800ca36:	dc36      	bgt.n	800caa6 <__gethex+0x216>
 800ca38:	f04f 0902 	mov.w	r9, #2
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff febe 	bl	800c7c0 <rshift>
 800ca44:	442f      	add	r7, r5
 800ca46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca4a:	42bb      	cmp	r3, r7
 800ca4c:	da42      	bge.n	800cad4 <__gethex+0x244>
 800ca4e:	9801      	ldr	r0, [sp, #4]
 800ca50:	4621      	mov	r1, r4
 800ca52:	f000 fcf9 	bl	800d448 <_Bfree>
 800ca56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca58:	2300      	movs	r3, #0
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	25a3      	movs	r5, #163	@ 0xa3
 800ca5e:	e793      	b.n	800c988 <__gethex+0xf8>
 800ca60:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ca64:	2a2e      	cmp	r2, #46	@ 0x2e
 800ca66:	d012      	beq.n	800ca8e <__gethex+0x1fe>
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d104      	bne.n	800ca76 <__gethex+0x1e6>
 800ca6c:	f845 bb04 	str.w	fp, [r5], #4
 800ca70:	f04f 0b00 	mov.w	fp, #0
 800ca74:	465b      	mov	r3, fp
 800ca76:	7830      	ldrb	r0, [r6, #0]
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	f7ff fef3 	bl	800c864 <__hexdig_fun>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	f000 000f 	and.w	r0, r0, #15
 800ca84:	4098      	lsls	r0, r3
 800ca86:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	e7ae      	b.n	800c9ec <__gethex+0x15c>
 800ca8e:	45b1      	cmp	r9, r6
 800ca90:	d8ea      	bhi.n	800ca68 <__gethex+0x1d8>
 800ca92:	492b      	ldr	r1, [pc, #172]	@ (800cb40 <__gethex+0x2b0>)
 800ca94:	9303      	str	r3, [sp, #12]
 800ca96:	2201      	movs	r2, #1
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7fe ffdb 	bl	800ba54 <strncmp>
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d1e1      	bne.n	800ca68 <__gethex+0x1d8>
 800caa4:	e7a2      	b.n	800c9ec <__gethex+0x15c>
 800caa6:	1ea9      	subs	r1, r5, #2
 800caa8:	4620      	mov	r0, r4
 800caaa:	f001 f91e 	bl	800dcea <__any_on>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d0c2      	beq.n	800ca38 <__gethex+0x1a8>
 800cab2:	f04f 0903 	mov.w	r9, #3
 800cab6:	e7c1      	b.n	800ca3c <__gethex+0x1ac>
 800cab8:	da09      	bge.n	800cace <__gethex+0x23e>
 800caba:	1b75      	subs	r5, r6, r5
 800cabc:	4621      	mov	r1, r4
 800cabe:	9801      	ldr	r0, [sp, #4]
 800cac0:	462a      	mov	r2, r5
 800cac2:	f000 fed9 	bl	800d878 <__lshift>
 800cac6:	1b7f      	subs	r7, r7, r5
 800cac8:	4604      	mov	r4, r0
 800caca:	f100 0a14 	add.w	sl, r0, #20
 800cace:	f04f 0900 	mov.w	r9, #0
 800cad2:	e7b8      	b.n	800ca46 <__gethex+0x1b6>
 800cad4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cad8:	42bd      	cmp	r5, r7
 800cada:	dd6f      	ble.n	800cbbc <__gethex+0x32c>
 800cadc:	1bed      	subs	r5, r5, r7
 800cade:	42ae      	cmp	r6, r5
 800cae0:	dc34      	bgt.n	800cb4c <__gethex+0x2bc>
 800cae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d022      	beq.n	800cb30 <__gethex+0x2a0>
 800caea:	2b03      	cmp	r3, #3
 800caec:	d024      	beq.n	800cb38 <__gethex+0x2a8>
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d115      	bne.n	800cb1e <__gethex+0x28e>
 800caf2:	42ae      	cmp	r6, r5
 800caf4:	d113      	bne.n	800cb1e <__gethex+0x28e>
 800caf6:	2e01      	cmp	r6, #1
 800caf8:	d10b      	bne.n	800cb12 <__gethex+0x282>
 800cafa:	9a02      	ldr	r2, [sp, #8]
 800cafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	2301      	movs	r3, #1
 800cb04:	6123      	str	r3, [r4, #16]
 800cb06:	f8ca 3000 	str.w	r3, [sl]
 800cb0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb0c:	2562      	movs	r5, #98	@ 0x62
 800cb0e:	601c      	str	r4, [r3, #0]
 800cb10:	e73a      	b.n	800c988 <__gethex+0xf8>
 800cb12:	1e71      	subs	r1, r6, #1
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 f8e8 	bl	800dcea <__any_on>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d1ed      	bne.n	800cafa <__gethex+0x26a>
 800cb1e:	9801      	ldr	r0, [sp, #4]
 800cb20:	4621      	mov	r1, r4
 800cb22:	f000 fc91 	bl	800d448 <_Bfree>
 800cb26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb28:	2300      	movs	r3, #0
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	2550      	movs	r5, #80	@ 0x50
 800cb2e:	e72b      	b.n	800c988 <__gethex+0xf8>
 800cb30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1f3      	bne.n	800cb1e <__gethex+0x28e>
 800cb36:	e7e0      	b.n	800cafa <__gethex+0x26a>
 800cb38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1dd      	bne.n	800cafa <__gethex+0x26a>
 800cb3e:	e7ee      	b.n	800cb1e <__gethex+0x28e>
 800cb40:	0800f059 	.word	0x0800f059
 800cb44:	0800f235 	.word	0x0800f235
 800cb48:	0800f246 	.word	0x0800f246
 800cb4c:	1e6f      	subs	r7, r5, #1
 800cb4e:	f1b9 0f00 	cmp.w	r9, #0
 800cb52:	d130      	bne.n	800cbb6 <__gethex+0x326>
 800cb54:	b127      	cbz	r7, 800cb60 <__gethex+0x2d0>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f001 f8c6 	bl	800dcea <__any_on>
 800cb5e:	4681      	mov	r9, r0
 800cb60:	117a      	asrs	r2, r7, #5
 800cb62:	2301      	movs	r3, #1
 800cb64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb68:	f007 071f 	and.w	r7, r7, #31
 800cb6c:	40bb      	lsls	r3, r7
 800cb6e:	4213      	tst	r3, r2
 800cb70:	4629      	mov	r1, r5
 800cb72:	4620      	mov	r0, r4
 800cb74:	bf18      	it	ne
 800cb76:	f049 0902 	orrne.w	r9, r9, #2
 800cb7a:	f7ff fe21 	bl	800c7c0 <rshift>
 800cb7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cb82:	1b76      	subs	r6, r6, r5
 800cb84:	2502      	movs	r5, #2
 800cb86:	f1b9 0f00 	cmp.w	r9, #0
 800cb8a:	d047      	beq.n	800cc1c <__gethex+0x38c>
 800cb8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d015      	beq.n	800cbc0 <__gethex+0x330>
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d017      	beq.n	800cbc8 <__gethex+0x338>
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d109      	bne.n	800cbb0 <__gethex+0x320>
 800cb9c:	f019 0f02 	tst.w	r9, #2
 800cba0:	d006      	beq.n	800cbb0 <__gethex+0x320>
 800cba2:	f8da 3000 	ldr.w	r3, [sl]
 800cba6:	ea49 0903 	orr.w	r9, r9, r3
 800cbaa:	f019 0f01 	tst.w	r9, #1
 800cbae:	d10e      	bne.n	800cbce <__gethex+0x33e>
 800cbb0:	f045 0510 	orr.w	r5, r5, #16
 800cbb4:	e032      	b.n	800cc1c <__gethex+0x38c>
 800cbb6:	f04f 0901 	mov.w	r9, #1
 800cbba:	e7d1      	b.n	800cb60 <__gethex+0x2d0>
 800cbbc:	2501      	movs	r5, #1
 800cbbe:	e7e2      	b.n	800cb86 <__gethex+0x2f6>
 800cbc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbc2:	f1c3 0301 	rsb	r3, r3, #1
 800cbc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0f0      	beq.n	800cbb0 <__gethex+0x320>
 800cbce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbd2:	f104 0314 	add.w	r3, r4, #20
 800cbd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbde:	f04f 0c00 	mov.w	ip, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800cbec:	d01b      	beq.n	800cc26 <__gethex+0x396>
 800cbee:	3201      	adds	r2, #1
 800cbf0:	6002      	str	r2, [r0, #0]
 800cbf2:	2d02      	cmp	r5, #2
 800cbf4:	f104 0314 	add.w	r3, r4, #20
 800cbf8:	d13c      	bne.n	800cc74 <__gethex+0x3e4>
 800cbfa:	f8d8 2000 	ldr.w	r2, [r8]
 800cbfe:	3a01      	subs	r2, #1
 800cc00:	42b2      	cmp	r2, r6
 800cc02:	d109      	bne.n	800cc18 <__gethex+0x388>
 800cc04:	1171      	asrs	r1, r6, #5
 800cc06:	2201      	movs	r2, #1
 800cc08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc0c:	f006 061f 	and.w	r6, r6, #31
 800cc10:	fa02 f606 	lsl.w	r6, r2, r6
 800cc14:	421e      	tst	r6, r3
 800cc16:	d13a      	bne.n	800cc8e <__gethex+0x3fe>
 800cc18:	f045 0520 	orr.w	r5, r5, #32
 800cc1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc1e:	601c      	str	r4, [r3, #0]
 800cc20:	9b02      	ldr	r3, [sp, #8]
 800cc22:	601f      	str	r7, [r3, #0]
 800cc24:	e6b0      	b.n	800c988 <__gethex+0xf8>
 800cc26:	4299      	cmp	r1, r3
 800cc28:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc2c:	d8d9      	bhi.n	800cbe2 <__gethex+0x352>
 800cc2e:	68a3      	ldr	r3, [r4, #8]
 800cc30:	459b      	cmp	fp, r3
 800cc32:	db17      	blt.n	800cc64 <__gethex+0x3d4>
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	9801      	ldr	r0, [sp, #4]
 800cc38:	3101      	adds	r1, #1
 800cc3a:	f000 fbc5 	bl	800d3c8 <_Balloc>
 800cc3e:	4681      	mov	r9, r0
 800cc40:	b918      	cbnz	r0, 800cc4a <__gethex+0x3ba>
 800cc42:	4b1a      	ldr	r3, [pc, #104]	@ (800ccac <__gethex+0x41c>)
 800cc44:	4602      	mov	r2, r0
 800cc46:	2184      	movs	r1, #132	@ 0x84
 800cc48:	e6c5      	b.n	800c9d6 <__gethex+0x146>
 800cc4a:	6922      	ldr	r2, [r4, #16]
 800cc4c:	3202      	adds	r2, #2
 800cc4e:	f104 010c 	add.w	r1, r4, #12
 800cc52:	0092      	lsls	r2, r2, #2
 800cc54:	300c      	adds	r0, #12
 800cc56:	f7fe ff48 	bl	800baea <memcpy>
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	9801      	ldr	r0, [sp, #4]
 800cc5e:	f000 fbf3 	bl	800d448 <_Bfree>
 800cc62:	464c      	mov	r4, r9
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc6c:	6122      	str	r2, [r4, #16]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	615a      	str	r2, [r3, #20]
 800cc72:	e7be      	b.n	800cbf2 <__gethex+0x362>
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	455a      	cmp	r2, fp
 800cc78:	dd0b      	ble.n	800cc92 <__gethex+0x402>
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7ff fd9f 	bl	800c7c0 <rshift>
 800cc82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc86:	3701      	adds	r7, #1
 800cc88:	42bb      	cmp	r3, r7
 800cc8a:	f6ff aee0 	blt.w	800ca4e <__gethex+0x1be>
 800cc8e:	2501      	movs	r5, #1
 800cc90:	e7c2      	b.n	800cc18 <__gethex+0x388>
 800cc92:	f016 061f 	ands.w	r6, r6, #31
 800cc96:	d0fa      	beq.n	800cc8e <__gethex+0x3fe>
 800cc98:	4453      	add	r3, sl
 800cc9a:	f1c6 0620 	rsb	r6, r6, #32
 800cc9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cca2:	f000 fc83 	bl	800d5ac <__hi0bits>
 800cca6:	42b0      	cmp	r0, r6
 800cca8:	dbe7      	blt.n	800cc7a <__gethex+0x3ea>
 800ccaa:	e7f0      	b.n	800cc8e <__gethex+0x3fe>
 800ccac:	0800f235 	.word	0x0800f235

0800ccb0 <L_shift>:
 800ccb0:	f1c2 0208 	rsb	r2, r2, #8
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	b570      	push	{r4, r5, r6, lr}
 800ccb8:	f1c2 0620 	rsb	r6, r2, #32
 800ccbc:	6843      	ldr	r3, [r0, #4]
 800ccbe:	6804      	ldr	r4, [r0, #0]
 800ccc0:	fa03 f506 	lsl.w	r5, r3, r6
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	40d3      	lsrs	r3, r2
 800ccc8:	6004      	str	r4, [r0, #0]
 800ccca:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccce:	4288      	cmp	r0, r1
 800ccd0:	d3f4      	bcc.n	800ccbc <L_shift+0xc>
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}

0800ccd4 <__match>:
 800ccd4:	b530      	push	{r4, r5, lr}
 800ccd6:	6803      	ldr	r3, [r0, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccde:	b914      	cbnz	r4, 800cce6 <__match+0x12>
 800cce0:	6003      	str	r3, [r0, #0]
 800cce2:	2001      	movs	r0, #1
 800cce4:	bd30      	pop	{r4, r5, pc}
 800cce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ccee:	2d19      	cmp	r5, #25
 800ccf0:	bf98      	it	ls
 800ccf2:	3220      	addls	r2, #32
 800ccf4:	42a2      	cmp	r2, r4
 800ccf6:	d0f0      	beq.n	800ccda <__match+0x6>
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	e7f3      	b.n	800cce4 <__match+0x10>

0800ccfc <__hexnan>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	680b      	ldr	r3, [r1, #0]
 800cd02:	6801      	ldr	r1, [r0, #0]
 800cd04:	115e      	asrs	r6, r3, #5
 800cd06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd0a:	f013 031f 	ands.w	r3, r3, #31
 800cd0e:	b087      	sub	sp, #28
 800cd10:	bf18      	it	ne
 800cd12:	3604      	addne	r6, #4
 800cd14:	2500      	movs	r5, #0
 800cd16:	1f37      	subs	r7, r6, #4
 800cd18:	4682      	mov	sl, r0
 800cd1a:	4690      	mov	r8, r2
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd22:	46b9      	mov	r9, r7
 800cd24:	463c      	mov	r4, r7
 800cd26:	9502      	str	r5, [sp, #8]
 800cd28:	46ab      	mov	fp, r5
 800cd2a:	784a      	ldrb	r2, [r1, #1]
 800cd2c:	1c4b      	adds	r3, r1, #1
 800cd2e:	9303      	str	r3, [sp, #12]
 800cd30:	b342      	cbz	r2, 800cd84 <__hexnan+0x88>
 800cd32:	4610      	mov	r0, r2
 800cd34:	9105      	str	r1, [sp, #20]
 800cd36:	9204      	str	r2, [sp, #16]
 800cd38:	f7ff fd94 	bl	800c864 <__hexdig_fun>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d151      	bne.n	800cde4 <__hexnan+0xe8>
 800cd40:	9a04      	ldr	r2, [sp, #16]
 800cd42:	9905      	ldr	r1, [sp, #20]
 800cd44:	2a20      	cmp	r2, #32
 800cd46:	d818      	bhi.n	800cd7a <__hexnan+0x7e>
 800cd48:	9b02      	ldr	r3, [sp, #8]
 800cd4a:	459b      	cmp	fp, r3
 800cd4c:	dd13      	ble.n	800cd76 <__hexnan+0x7a>
 800cd4e:	454c      	cmp	r4, r9
 800cd50:	d206      	bcs.n	800cd60 <__hexnan+0x64>
 800cd52:	2d07      	cmp	r5, #7
 800cd54:	dc04      	bgt.n	800cd60 <__hexnan+0x64>
 800cd56:	462a      	mov	r2, r5
 800cd58:	4649      	mov	r1, r9
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7ff ffa8 	bl	800ccb0 <L_shift>
 800cd60:	4544      	cmp	r4, r8
 800cd62:	d952      	bls.n	800ce0a <__hexnan+0x10e>
 800cd64:	2300      	movs	r3, #0
 800cd66:	f1a4 0904 	sub.w	r9, r4, #4
 800cd6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd6e:	f8cd b008 	str.w	fp, [sp, #8]
 800cd72:	464c      	mov	r4, r9
 800cd74:	461d      	mov	r5, r3
 800cd76:	9903      	ldr	r1, [sp, #12]
 800cd78:	e7d7      	b.n	800cd2a <__hexnan+0x2e>
 800cd7a:	2a29      	cmp	r2, #41	@ 0x29
 800cd7c:	d157      	bne.n	800ce2e <__hexnan+0x132>
 800cd7e:	3102      	adds	r1, #2
 800cd80:	f8ca 1000 	str.w	r1, [sl]
 800cd84:	f1bb 0f00 	cmp.w	fp, #0
 800cd88:	d051      	beq.n	800ce2e <__hexnan+0x132>
 800cd8a:	454c      	cmp	r4, r9
 800cd8c:	d206      	bcs.n	800cd9c <__hexnan+0xa0>
 800cd8e:	2d07      	cmp	r5, #7
 800cd90:	dc04      	bgt.n	800cd9c <__hexnan+0xa0>
 800cd92:	462a      	mov	r2, r5
 800cd94:	4649      	mov	r1, r9
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7ff ff8a 	bl	800ccb0 <L_shift>
 800cd9c:	4544      	cmp	r4, r8
 800cd9e:	d936      	bls.n	800ce0e <__hexnan+0x112>
 800cda0:	f1a8 0204 	sub.w	r2, r8, #4
 800cda4:	4623      	mov	r3, r4
 800cda6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdae:	429f      	cmp	r7, r3
 800cdb0:	d2f9      	bcs.n	800cda6 <__hexnan+0xaa>
 800cdb2:	1b3b      	subs	r3, r7, r4
 800cdb4:	f023 0303 	bic.w	r3, r3, #3
 800cdb8:	3304      	adds	r3, #4
 800cdba:	3401      	adds	r4, #1
 800cdbc:	3e03      	subs	r6, #3
 800cdbe:	42b4      	cmp	r4, r6
 800cdc0:	bf88      	it	hi
 800cdc2:	2304      	movhi	r3, #4
 800cdc4:	4443      	add	r3, r8
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f843 2b04 	str.w	r2, [r3], #4
 800cdcc:	429f      	cmp	r7, r3
 800cdce:	d2fb      	bcs.n	800cdc8 <__hexnan+0xcc>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	b91b      	cbnz	r3, 800cddc <__hexnan+0xe0>
 800cdd4:	4547      	cmp	r7, r8
 800cdd6:	d128      	bne.n	800ce2a <__hexnan+0x12e>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	2005      	movs	r0, #5
 800cdde:	b007      	add	sp, #28
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	3501      	adds	r5, #1
 800cde6:	2d08      	cmp	r5, #8
 800cde8:	f10b 0b01 	add.w	fp, fp, #1
 800cdec:	dd06      	ble.n	800cdfc <__hexnan+0x100>
 800cdee:	4544      	cmp	r4, r8
 800cdf0:	d9c1      	bls.n	800cd76 <__hexnan+0x7a>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdf8:	2501      	movs	r5, #1
 800cdfa:	3c04      	subs	r4, #4
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	f000 000f 	and.w	r0, r0, #15
 800ce02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce06:	6020      	str	r0, [r4, #0]
 800ce08:	e7b5      	b.n	800cd76 <__hexnan+0x7a>
 800ce0a:	2508      	movs	r5, #8
 800ce0c:	e7b3      	b.n	800cd76 <__hexnan+0x7a>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0dd      	beq.n	800cdd0 <__hexnan+0xd4>
 800ce14:	f1c3 0320 	rsb	r3, r3, #32
 800ce18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce1c:	40da      	lsrs	r2, r3
 800ce1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce22:	4013      	ands	r3, r2
 800ce24:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce28:	e7d2      	b.n	800cdd0 <__hexnan+0xd4>
 800ce2a:	3f04      	subs	r7, #4
 800ce2c:	e7d0      	b.n	800cdd0 <__hexnan+0xd4>
 800ce2e:	2004      	movs	r0, #4
 800ce30:	e7d5      	b.n	800cdde <__hexnan+0xe2>

0800ce32 <__ssputs_r>:
 800ce32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce36:	688e      	ldr	r6, [r1, #8]
 800ce38:	461f      	mov	r7, r3
 800ce3a:	42be      	cmp	r6, r7
 800ce3c:	680b      	ldr	r3, [r1, #0]
 800ce3e:	4682      	mov	sl, r0
 800ce40:	460c      	mov	r4, r1
 800ce42:	4690      	mov	r8, r2
 800ce44:	d82d      	bhi.n	800cea2 <__ssputs_r+0x70>
 800ce46:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce4a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce4e:	d026      	beq.n	800ce9e <__ssputs_r+0x6c>
 800ce50:	6965      	ldr	r5, [r4, #20]
 800ce52:	6909      	ldr	r1, [r1, #16]
 800ce54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce58:	eba3 0901 	sub.w	r9, r3, r1
 800ce5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce60:	1c7b      	adds	r3, r7, #1
 800ce62:	444b      	add	r3, r9
 800ce64:	106d      	asrs	r5, r5, #1
 800ce66:	429d      	cmp	r5, r3
 800ce68:	bf38      	it	cc
 800ce6a:	461d      	movcc	r5, r3
 800ce6c:	0553      	lsls	r3, r2, #21
 800ce6e:	d527      	bpl.n	800cec0 <__ssputs_r+0x8e>
 800ce70:	4629      	mov	r1, r5
 800ce72:	f000 f95f 	bl	800d134 <_malloc_r>
 800ce76:	4606      	mov	r6, r0
 800ce78:	b360      	cbz	r0, 800ced4 <__ssputs_r+0xa2>
 800ce7a:	6921      	ldr	r1, [r4, #16]
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	f7fe fe34 	bl	800baea <memcpy>
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce8c:	81a3      	strh	r3, [r4, #12]
 800ce8e:	6126      	str	r6, [r4, #16]
 800ce90:	6165      	str	r5, [r4, #20]
 800ce92:	444e      	add	r6, r9
 800ce94:	eba5 0509 	sub.w	r5, r5, r9
 800ce98:	6026      	str	r6, [r4, #0]
 800ce9a:	60a5      	str	r5, [r4, #8]
 800ce9c:	463e      	mov	r6, r7
 800ce9e:	42be      	cmp	r6, r7
 800cea0:	d900      	bls.n	800cea4 <__ssputs_r+0x72>
 800cea2:	463e      	mov	r6, r7
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	4632      	mov	r2, r6
 800cea8:	4641      	mov	r1, r8
 800ceaa:	f001 f8b4 	bl	800e016 <memmove>
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	1b9b      	subs	r3, r3, r6
 800ceb2:	60a3      	str	r3, [r4, #8]
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	4433      	add	r3, r6
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	2000      	movs	r0, #0
 800cebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec0:	462a      	mov	r2, r5
 800cec2:	f000 ff76 	bl	800ddb2 <_realloc_r>
 800cec6:	4606      	mov	r6, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d1e0      	bne.n	800ce8e <__ssputs_r+0x5c>
 800cecc:	6921      	ldr	r1, [r4, #16]
 800cece:	4650      	mov	r0, sl
 800ced0:	f001 f966 	bl	800e1a0 <_free_r>
 800ced4:	230c      	movs	r3, #12
 800ced6:	f8ca 3000 	str.w	r3, [sl]
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cee6:	e7e9      	b.n	800cebc <__ssputs_r+0x8a>

0800cee8 <_svfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	4698      	mov	r8, r3
 800ceee:	898b      	ldrh	r3, [r1, #12]
 800cef0:	061b      	lsls	r3, r3, #24
 800cef2:	b09d      	sub	sp, #116	@ 0x74
 800cef4:	4607      	mov	r7, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	4614      	mov	r4, r2
 800cefa:	d510      	bpl.n	800cf1e <_svfiprintf_r+0x36>
 800cefc:	690b      	ldr	r3, [r1, #16]
 800cefe:	b973      	cbnz	r3, 800cf1e <_svfiprintf_r+0x36>
 800cf00:	2140      	movs	r1, #64	@ 0x40
 800cf02:	f000 f917 	bl	800d134 <_malloc_r>
 800cf06:	6028      	str	r0, [r5, #0]
 800cf08:	6128      	str	r0, [r5, #16]
 800cf0a:	b930      	cbnz	r0, 800cf1a <_svfiprintf_r+0x32>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf14:	b01d      	add	sp, #116	@ 0x74
 800cf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1a:	2340      	movs	r3, #64	@ 0x40
 800cf1c:	616b      	str	r3, [r5, #20]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf22:	2320      	movs	r3, #32
 800cf24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf28:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf2c:	2330      	movs	r3, #48	@ 0x30
 800cf2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0cc <_svfiprintf_r+0x1e4>
 800cf32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf36:	f04f 0901 	mov.w	r9, #1
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	469a      	mov	sl, r3
 800cf3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf42:	b10a      	cbz	r2, 800cf48 <_svfiprintf_r+0x60>
 800cf44:	2a25      	cmp	r2, #37	@ 0x25
 800cf46:	d1f9      	bne.n	800cf3c <_svfiprintf_r+0x54>
 800cf48:	ebba 0b04 	subs.w	fp, sl, r4
 800cf4c:	d00b      	beq.n	800cf66 <_svfiprintf_r+0x7e>
 800cf4e:	465b      	mov	r3, fp
 800cf50:	4622      	mov	r2, r4
 800cf52:	4629      	mov	r1, r5
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff ff6c 	bl	800ce32 <__ssputs_r>
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f000 80a7 	beq.w	800d0ae <_svfiprintf_r+0x1c6>
 800cf60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf62:	445a      	add	r2, fp
 800cf64:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf66:	f89a 3000 	ldrb.w	r3, [sl]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 809f 	beq.w	800d0ae <_svfiprintf_r+0x1c6>
 800cf70:	2300      	movs	r3, #0
 800cf72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf7a:	f10a 0a01 	add.w	sl, sl, #1
 800cf7e:	9304      	str	r3, [sp, #16]
 800cf80:	9307      	str	r3, [sp, #28]
 800cf82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf86:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf88:	4654      	mov	r4, sl
 800cf8a:	2205      	movs	r2, #5
 800cf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf90:	484e      	ldr	r0, [pc, #312]	@ (800d0cc <_svfiprintf_r+0x1e4>)
 800cf92:	f7f3 f935 	bl	8000200 <memchr>
 800cf96:	9a04      	ldr	r2, [sp, #16]
 800cf98:	b9d8      	cbnz	r0, 800cfd2 <_svfiprintf_r+0xea>
 800cf9a:	06d0      	lsls	r0, r2, #27
 800cf9c:	bf44      	itt	mi
 800cf9e:	2320      	movmi	r3, #32
 800cfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa4:	0711      	lsls	r1, r2, #28
 800cfa6:	bf44      	itt	mi
 800cfa8:	232b      	movmi	r3, #43	@ 0x2b
 800cfaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfae:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb4:	d015      	beq.n	800cfe2 <_svfiprintf_r+0xfa>
 800cfb6:	9a07      	ldr	r2, [sp, #28]
 800cfb8:	4654      	mov	r4, sl
 800cfba:	2000      	movs	r0, #0
 800cfbc:	f04f 0c0a 	mov.w	ip, #10
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfc6:	3b30      	subs	r3, #48	@ 0x30
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	d94b      	bls.n	800d064 <_svfiprintf_r+0x17c>
 800cfcc:	b1b0      	cbz	r0, 800cffc <_svfiprintf_r+0x114>
 800cfce:	9207      	str	r2, [sp, #28]
 800cfd0:	e014      	b.n	800cffc <_svfiprintf_r+0x114>
 800cfd2:	eba0 0308 	sub.w	r3, r0, r8
 800cfd6:	fa09 f303 	lsl.w	r3, r9, r3
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	46a2      	mov	sl, r4
 800cfe0:	e7d2      	b.n	800cf88 <_svfiprintf_r+0xa0>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	1d19      	adds	r1, r3, #4
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	9103      	str	r1, [sp, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfbb      	ittet	lt
 800cfee:	425b      	neglt	r3, r3
 800cff0:	f042 0202 	orrlt.w	r2, r2, #2
 800cff4:	9307      	strge	r3, [sp, #28]
 800cff6:	9307      	strlt	r3, [sp, #28]
 800cff8:	bfb8      	it	lt
 800cffa:	9204      	strlt	r2, [sp, #16]
 800cffc:	7823      	ldrb	r3, [r4, #0]
 800cffe:	2b2e      	cmp	r3, #46	@ 0x2e
 800d000:	d10a      	bne.n	800d018 <_svfiprintf_r+0x130>
 800d002:	7863      	ldrb	r3, [r4, #1]
 800d004:	2b2a      	cmp	r3, #42	@ 0x2a
 800d006:	d132      	bne.n	800d06e <_svfiprintf_r+0x186>
 800d008:	9b03      	ldr	r3, [sp, #12]
 800d00a:	1d1a      	adds	r2, r3, #4
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	9203      	str	r2, [sp, #12]
 800d010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d014:	3402      	adds	r4, #2
 800d016:	9305      	str	r3, [sp, #20]
 800d018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0dc <_svfiprintf_r+0x1f4>
 800d01c:	7821      	ldrb	r1, [r4, #0]
 800d01e:	2203      	movs	r2, #3
 800d020:	4650      	mov	r0, sl
 800d022:	f7f3 f8ed 	bl	8000200 <memchr>
 800d026:	b138      	cbz	r0, 800d038 <_svfiprintf_r+0x150>
 800d028:	9b04      	ldr	r3, [sp, #16]
 800d02a:	eba0 000a 	sub.w	r0, r0, sl
 800d02e:	2240      	movs	r2, #64	@ 0x40
 800d030:	4082      	lsls	r2, r0
 800d032:	4313      	orrs	r3, r2
 800d034:	3401      	adds	r4, #1
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03c:	4824      	ldr	r0, [pc, #144]	@ (800d0d0 <_svfiprintf_r+0x1e8>)
 800d03e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d042:	2206      	movs	r2, #6
 800d044:	f7f3 f8dc 	bl	8000200 <memchr>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d036      	beq.n	800d0ba <_svfiprintf_r+0x1d2>
 800d04c:	4b21      	ldr	r3, [pc, #132]	@ (800d0d4 <_svfiprintf_r+0x1ec>)
 800d04e:	bb1b      	cbnz	r3, 800d098 <_svfiprintf_r+0x1b0>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	3307      	adds	r3, #7
 800d054:	f023 0307 	bic.w	r3, r3, #7
 800d058:	3308      	adds	r3, #8
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05e:	4433      	add	r3, r6
 800d060:	9309      	str	r3, [sp, #36]	@ 0x24
 800d062:	e76a      	b.n	800cf3a <_svfiprintf_r+0x52>
 800d064:	fb0c 3202 	mla	r2, ip, r2, r3
 800d068:	460c      	mov	r4, r1
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7a8      	b.n	800cfc0 <_svfiprintf_r+0xd8>
 800d06e:	2300      	movs	r3, #0
 800d070:	3401      	adds	r4, #1
 800d072:	9305      	str	r3, [sp, #20]
 800d074:	4619      	mov	r1, r3
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4620      	mov	r0, r4
 800d07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d080:	3a30      	subs	r2, #48	@ 0x30
 800d082:	2a09      	cmp	r2, #9
 800d084:	d903      	bls.n	800d08e <_svfiprintf_r+0x1a6>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0c6      	beq.n	800d018 <_svfiprintf_r+0x130>
 800d08a:	9105      	str	r1, [sp, #20]
 800d08c:	e7c4      	b.n	800d018 <_svfiprintf_r+0x130>
 800d08e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d092:	4604      	mov	r4, r0
 800d094:	2301      	movs	r3, #1
 800d096:	e7f0      	b.n	800d07a <_svfiprintf_r+0x192>
 800d098:	ab03      	add	r3, sp, #12
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d8 <_svfiprintf_r+0x1f0>)
 800d0a0:	a904      	add	r1, sp, #16
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7fc ff44 	bl	8009f30 <_printf_float>
 800d0a8:	1c42      	adds	r2, r0, #1
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	d1d6      	bne.n	800d05c <_svfiprintf_r+0x174>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	065b      	lsls	r3, r3, #25
 800d0b2:	f53f af2d 	bmi.w	800cf10 <_svfiprintf_r+0x28>
 800d0b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b8:	e72c      	b.n	800cf14 <_svfiprintf_r+0x2c>
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	462a      	mov	r2, r5
 800d0c0:	4b05      	ldr	r3, [pc, #20]	@ (800d0d8 <_svfiprintf_r+0x1f0>)
 800d0c2:	a904      	add	r1, sp, #16
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	f7fd f9cb 	bl	800a460 <_printf_i>
 800d0ca:	e7ed      	b.n	800d0a8 <_svfiprintf_r+0x1c0>
 800d0cc:	0800f2a6 	.word	0x0800f2a6
 800d0d0:	0800f2b0 	.word	0x0800f2b0
 800d0d4:	08009f31 	.word	0x08009f31
 800d0d8:	0800ce33 	.word	0x0800ce33
 800d0dc:	0800f2ac 	.word	0x0800f2ac

0800d0e0 <malloc>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ec <malloc+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f000 b825 	b.w	800d134 <_malloc_r>
 800d0ea:	bf00      	nop
 800d0ec:	2000027c 	.word	0x2000027c

0800d0f0 <sbrk_aligned>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d130 <sbrk_aligned+0x40>)
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	6831      	ldr	r1, [r6, #0]
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b911      	cbnz	r1, 800d102 <sbrk_aligned+0x12>
 800d0fc:	f000 fffc 	bl	800e0f8 <_sbrk_r>
 800d100:	6030      	str	r0, [r6, #0]
 800d102:	4621      	mov	r1, r4
 800d104:	4628      	mov	r0, r5
 800d106:	f000 fff7 	bl	800e0f8 <_sbrk_r>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d103      	bne.n	800d116 <sbrk_aligned+0x26>
 800d10e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d112:	4620      	mov	r0, r4
 800d114:	bd70      	pop	{r4, r5, r6, pc}
 800d116:	1cc4      	adds	r4, r0, #3
 800d118:	f024 0403 	bic.w	r4, r4, #3
 800d11c:	42a0      	cmp	r0, r4
 800d11e:	d0f8      	beq.n	800d112 <sbrk_aligned+0x22>
 800d120:	1a21      	subs	r1, r4, r0
 800d122:	4628      	mov	r0, r5
 800d124:	f000 ffe8 	bl	800e0f8 <_sbrk_r>
 800d128:	3001      	adds	r0, #1
 800d12a:	d1f2      	bne.n	800d112 <sbrk_aligned+0x22>
 800d12c:	e7ef      	b.n	800d10e <sbrk_aligned+0x1e>
 800d12e:	bf00      	nop
 800d130:	20002100 	.word	0x20002100

0800d134 <_malloc_r>:
 800d134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d138:	1ccd      	adds	r5, r1, #3
 800d13a:	f025 0503 	bic.w	r5, r5, #3
 800d13e:	3508      	adds	r5, #8
 800d140:	2d0c      	cmp	r5, #12
 800d142:	bf38      	it	cc
 800d144:	250c      	movcc	r5, #12
 800d146:	2d00      	cmp	r5, #0
 800d148:	4606      	mov	r6, r0
 800d14a:	db01      	blt.n	800d150 <_malloc_r+0x1c>
 800d14c:	42a9      	cmp	r1, r5
 800d14e:	d904      	bls.n	800d15a <_malloc_r+0x26>
 800d150:	230c      	movs	r3, #12
 800d152:	6033      	str	r3, [r6, #0]
 800d154:	2000      	movs	r0, #0
 800d156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d230 <_malloc_r+0xfc>
 800d15e:	f000 f927 	bl	800d3b0 <__malloc_lock>
 800d162:	f8d8 3000 	ldr.w	r3, [r8]
 800d166:	461c      	mov	r4, r3
 800d168:	bb44      	cbnz	r4, 800d1bc <_malloc_r+0x88>
 800d16a:	4629      	mov	r1, r5
 800d16c:	4630      	mov	r0, r6
 800d16e:	f7ff ffbf 	bl	800d0f0 <sbrk_aligned>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	4604      	mov	r4, r0
 800d176:	d158      	bne.n	800d22a <_malloc_r+0xf6>
 800d178:	f8d8 4000 	ldr.w	r4, [r8]
 800d17c:	4627      	mov	r7, r4
 800d17e:	2f00      	cmp	r7, #0
 800d180:	d143      	bne.n	800d20a <_malloc_r+0xd6>
 800d182:	2c00      	cmp	r4, #0
 800d184:	d04b      	beq.n	800d21e <_malloc_r+0xea>
 800d186:	6823      	ldr	r3, [r4, #0]
 800d188:	4639      	mov	r1, r7
 800d18a:	4630      	mov	r0, r6
 800d18c:	eb04 0903 	add.w	r9, r4, r3
 800d190:	f000 ffb2 	bl	800e0f8 <_sbrk_r>
 800d194:	4581      	cmp	r9, r0
 800d196:	d142      	bne.n	800d21e <_malloc_r+0xea>
 800d198:	6821      	ldr	r1, [r4, #0]
 800d19a:	1a6d      	subs	r5, r5, r1
 800d19c:	4629      	mov	r1, r5
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f7ff ffa6 	bl	800d0f0 <sbrk_aligned>
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	d03a      	beq.n	800d21e <_malloc_r+0xea>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	442b      	add	r3, r5
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	bb62      	cbnz	r2, 800d210 <_malloc_r+0xdc>
 800d1b6:	f8c8 7000 	str.w	r7, [r8]
 800d1ba:	e00f      	b.n	800d1dc <_malloc_r+0xa8>
 800d1bc:	6822      	ldr	r2, [r4, #0]
 800d1be:	1b52      	subs	r2, r2, r5
 800d1c0:	d420      	bmi.n	800d204 <_malloc_r+0xd0>
 800d1c2:	2a0b      	cmp	r2, #11
 800d1c4:	d917      	bls.n	800d1f6 <_malloc_r+0xc2>
 800d1c6:	1961      	adds	r1, r4, r5
 800d1c8:	42a3      	cmp	r3, r4
 800d1ca:	6025      	str	r5, [r4, #0]
 800d1cc:	bf18      	it	ne
 800d1ce:	6059      	strne	r1, [r3, #4]
 800d1d0:	6863      	ldr	r3, [r4, #4]
 800d1d2:	bf08      	it	eq
 800d1d4:	f8c8 1000 	streq.w	r1, [r8]
 800d1d8:	5162      	str	r2, [r4, r5]
 800d1da:	604b      	str	r3, [r1, #4]
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f000 f8ed 	bl	800d3bc <__malloc_unlock>
 800d1e2:	f104 000b 	add.w	r0, r4, #11
 800d1e6:	1d23      	adds	r3, r4, #4
 800d1e8:	f020 0007 	bic.w	r0, r0, #7
 800d1ec:	1ac2      	subs	r2, r0, r3
 800d1ee:	bf1c      	itt	ne
 800d1f0:	1a1b      	subne	r3, r3, r0
 800d1f2:	50a3      	strne	r3, [r4, r2]
 800d1f4:	e7af      	b.n	800d156 <_malloc_r+0x22>
 800d1f6:	6862      	ldr	r2, [r4, #4]
 800d1f8:	42a3      	cmp	r3, r4
 800d1fa:	bf0c      	ite	eq
 800d1fc:	f8c8 2000 	streq.w	r2, [r8]
 800d200:	605a      	strne	r2, [r3, #4]
 800d202:	e7eb      	b.n	800d1dc <_malloc_r+0xa8>
 800d204:	4623      	mov	r3, r4
 800d206:	6864      	ldr	r4, [r4, #4]
 800d208:	e7ae      	b.n	800d168 <_malloc_r+0x34>
 800d20a:	463c      	mov	r4, r7
 800d20c:	687f      	ldr	r7, [r7, #4]
 800d20e:	e7b6      	b.n	800d17e <_malloc_r+0x4a>
 800d210:	461a      	mov	r2, r3
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	42a3      	cmp	r3, r4
 800d216:	d1fb      	bne.n	800d210 <_malloc_r+0xdc>
 800d218:	2300      	movs	r3, #0
 800d21a:	6053      	str	r3, [r2, #4]
 800d21c:	e7de      	b.n	800d1dc <_malloc_r+0xa8>
 800d21e:	230c      	movs	r3, #12
 800d220:	6033      	str	r3, [r6, #0]
 800d222:	4630      	mov	r0, r6
 800d224:	f000 f8ca 	bl	800d3bc <__malloc_unlock>
 800d228:	e794      	b.n	800d154 <_malloc_r+0x20>
 800d22a:	6005      	str	r5, [r0, #0]
 800d22c:	e7d6      	b.n	800d1dc <_malloc_r+0xa8>
 800d22e:	bf00      	nop
 800d230:	20002104 	.word	0x20002104

0800d234 <__ascii_mbtowc>:
 800d234:	b082      	sub	sp, #8
 800d236:	b901      	cbnz	r1, 800d23a <__ascii_mbtowc+0x6>
 800d238:	a901      	add	r1, sp, #4
 800d23a:	b142      	cbz	r2, 800d24e <__ascii_mbtowc+0x1a>
 800d23c:	b14b      	cbz	r3, 800d252 <__ascii_mbtowc+0x1e>
 800d23e:	7813      	ldrb	r3, [r2, #0]
 800d240:	600b      	str	r3, [r1, #0]
 800d242:	7812      	ldrb	r2, [r2, #0]
 800d244:	1e10      	subs	r0, r2, #0
 800d246:	bf18      	it	ne
 800d248:	2001      	movne	r0, #1
 800d24a:	b002      	add	sp, #8
 800d24c:	4770      	bx	lr
 800d24e:	4610      	mov	r0, r2
 800d250:	e7fb      	b.n	800d24a <__ascii_mbtowc+0x16>
 800d252:	f06f 0001 	mvn.w	r0, #1
 800d256:	e7f8      	b.n	800d24a <__ascii_mbtowc+0x16>

0800d258 <__sflush_r>:
 800d258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	0716      	lsls	r6, r2, #28
 800d262:	4605      	mov	r5, r0
 800d264:	460c      	mov	r4, r1
 800d266:	d454      	bmi.n	800d312 <__sflush_r+0xba>
 800d268:	684b      	ldr	r3, [r1, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dc02      	bgt.n	800d274 <__sflush_r+0x1c>
 800d26e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	dd48      	ble.n	800d306 <__sflush_r+0xae>
 800d274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d276:	2e00      	cmp	r6, #0
 800d278:	d045      	beq.n	800d306 <__sflush_r+0xae>
 800d27a:	2300      	movs	r3, #0
 800d27c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d280:	682f      	ldr	r7, [r5, #0]
 800d282:	6a21      	ldr	r1, [r4, #32]
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	d030      	beq.n	800d2ea <__sflush_r+0x92>
 800d288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	0759      	lsls	r1, r3, #29
 800d28e:	d505      	bpl.n	800d29c <__sflush_r+0x44>
 800d290:	6863      	ldr	r3, [r4, #4]
 800d292:	1ad2      	subs	r2, r2, r3
 800d294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d296:	b10b      	cbz	r3, 800d29c <__sflush_r+0x44>
 800d298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d29a:	1ad2      	subs	r2, r2, r3
 800d29c:	2300      	movs	r3, #0
 800d29e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2a0:	6a21      	ldr	r1, [r4, #32]
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b0      	blx	r6
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	d106      	bne.n	800d2ba <__sflush_r+0x62>
 800d2ac:	6829      	ldr	r1, [r5, #0]
 800d2ae:	291d      	cmp	r1, #29
 800d2b0:	d82b      	bhi.n	800d30a <__sflush_r+0xb2>
 800d2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d35c <__sflush_r+0x104>)
 800d2b4:	410a      	asrs	r2, r1
 800d2b6:	07d6      	lsls	r6, r2, #31
 800d2b8:	d427      	bmi.n	800d30a <__sflush_r+0xb2>
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6062      	str	r2, [r4, #4]
 800d2be:	04d9      	lsls	r1, r3, #19
 800d2c0:	6922      	ldr	r2, [r4, #16]
 800d2c2:	6022      	str	r2, [r4, #0]
 800d2c4:	d504      	bpl.n	800d2d0 <__sflush_r+0x78>
 800d2c6:	1c42      	adds	r2, r0, #1
 800d2c8:	d101      	bne.n	800d2ce <__sflush_r+0x76>
 800d2ca:	682b      	ldr	r3, [r5, #0]
 800d2cc:	b903      	cbnz	r3, 800d2d0 <__sflush_r+0x78>
 800d2ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2d2:	602f      	str	r7, [r5, #0]
 800d2d4:	b1b9      	cbz	r1, 800d306 <__sflush_r+0xae>
 800d2d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	d002      	beq.n	800d2e4 <__sflush_r+0x8c>
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f000 ff5e 	bl	800e1a0 <_free_r>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2e8:	e00d      	b.n	800d306 <__sflush_r+0xae>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	47b0      	blx	r6
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	1c50      	adds	r0, r2, #1
 800d2f4:	d1c9      	bne.n	800d28a <__sflush_r+0x32>
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0c6      	beq.n	800d28a <__sflush_r+0x32>
 800d2fc:	2b1d      	cmp	r3, #29
 800d2fe:	d001      	beq.n	800d304 <__sflush_r+0xac>
 800d300:	2b16      	cmp	r3, #22
 800d302:	d11e      	bne.n	800d342 <__sflush_r+0xea>
 800d304:	602f      	str	r7, [r5, #0]
 800d306:	2000      	movs	r0, #0
 800d308:	e022      	b.n	800d350 <__sflush_r+0xf8>
 800d30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d30e:	b21b      	sxth	r3, r3
 800d310:	e01b      	b.n	800d34a <__sflush_r+0xf2>
 800d312:	690f      	ldr	r7, [r1, #16]
 800d314:	2f00      	cmp	r7, #0
 800d316:	d0f6      	beq.n	800d306 <__sflush_r+0xae>
 800d318:	0793      	lsls	r3, r2, #30
 800d31a:	680e      	ldr	r6, [r1, #0]
 800d31c:	bf08      	it	eq
 800d31e:	694b      	ldreq	r3, [r1, #20]
 800d320:	600f      	str	r7, [r1, #0]
 800d322:	bf18      	it	ne
 800d324:	2300      	movne	r3, #0
 800d326:	eba6 0807 	sub.w	r8, r6, r7
 800d32a:	608b      	str	r3, [r1, #8]
 800d32c:	f1b8 0f00 	cmp.w	r8, #0
 800d330:	dde9      	ble.n	800d306 <__sflush_r+0xae>
 800d332:	6a21      	ldr	r1, [r4, #32]
 800d334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d336:	4643      	mov	r3, r8
 800d338:	463a      	mov	r2, r7
 800d33a:	4628      	mov	r0, r5
 800d33c:	47b0      	blx	r6
 800d33e:	2800      	cmp	r0, #0
 800d340:	dc08      	bgt.n	800d354 <__sflush_r+0xfc>
 800d342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d354:	4407      	add	r7, r0
 800d356:	eba8 0800 	sub.w	r8, r8, r0
 800d35a:	e7e7      	b.n	800d32c <__sflush_r+0xd4>
 800d35c:	dfbffffe 	.word	0xdfbffffe

0800d360 <_fflush_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	690b      	ldr	r3, [r1, #16]
 800d364:	4605      	mov	r5, r0
 800d366:	460c      	mov	r4, r1
 800d368:	b913      	cbnz	r3, 800d370 <_fflush_r+0x10>
 800d36a:	2500      	movs	r5, #0
 800d36c:	4628      	mov	r0, r5
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	b118      	cbz	r0, 800d37a <_fflush_r+0x1a>
 800d372:	6a03      	ldr	r3, [r0, #32]
 800d374:	b90b      	cbnz	r3, 800d37a <_fflush_r+0x1a>
 800d376:	f7fd fc53 	bl	800ac20 <__sinit>
 800d37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0f3      	beq.n	800d36a <_fflush_r+0xa>
 800d382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d384:	07d0      	lsls	r0, r2, #31
 800d386:	d404      	bmi.n	800d392 <_fflush_r+0x32>
 800d388:	0599      	lsls	r1, r3, #22
 800d38a:	d402      	bmi.n	800d392 <_fflush_r+0x32>
 800d38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d38e:	f7fe fbaa 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800d392:	4628      	mov	r0, r5
 800d394:	4621      	mov	r1, r4
 800d396:	f7ff ff5f 	bl	800d258 <__sflush_r>
 800d39a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d39c:	07da      	lsls	r2, r3, #31
 800d39e:	4605      	mov	r5, r0
 800d3a0:	d4e4      	bmi.n	800d36c <_fflush_r+0xc>
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	059b      	lsls	r3, r3, #22
 800d3a6:	d4e1      	bmi.n	800d36c <_fflush_r+0xc>
 800d3a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3aa:	f7fe fb9d 	bl	800bae8 <__retarget_lock_release_recursive>
 800d3ae:	e7dd      	b.n	800d36c <_fflush_r+0xc>

0800d3b0 <__malloc_lock>:
 800d3b0:	4801      	ldr	r0, [pc, #4]	@ (800d3b8 <__malloc_lock+0x8>)
 800d3b2:	f7fe bb98 	b.w	800bae6 <__retarget_lock_acquire_recursive>
 800d3b6:	bf00      	nop
 800d3b8:	200020fc 	.word	0x200020fc

0800d3bc <__malloc_unlock>:
 800d3bc:	4801      	ldr	r0, [pc, #4]	@ (800d3c4 <__malloc_unlock+0x8>)
 800d3be:	f7fe bb93 	b.w	800bae8 <__retarget_lock_release_recursive>
 800d3c2:	bf00      	nop
 800d3c4:	200020fc 	.word	0x200020fc

0800d3c8 <_Balloc>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	69c6      	ldr	r6, [r0, #28]
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460d      	mov	r5, r1
 800d3d0:	b976      	cbnz	r6, 800d3f0 <_Balloc+0x28>
 800d3d2:	2010      	movs	r0, #16
 800d3d4:	f7ff fe84 	bl	800d0e0 <malloc>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	61e0      	str	r0, [r4, #28]
 800d3dc:	b920      	cbnz	r0, 800d3e8 <_Balloc+0x20>
 800d3de:	4b18      	ldr	r3, [pc, #96]	@ (800d440 <_Balloc+0x78>)
 800d3e0:	4818      	ldr	r0, [pc, #96]	@ (800d444 <_Balloc+0x7c>)
 800d3e2:	216b      	movs	r1, #107	@ 0x6b
 800d3e4:	f000 feaa 	bl	800e13c <__assert_func>
 800d3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3ec:	6006      	str	r6, [r0, #0]
 800d3ee:	60c6      	str	r6, [r0, #12]
 800d3f0:	69e6      	ldr	r6, [r4, #28]
 800d3f2:	68f3      	ldr	r3, [r6, #12]
 800d3f4:	b183      	cbz	r3, 800d418 <_Balloc+0x50>
 800d3f6:	69e3      	ldr	r3, [r4, #28]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3fe:	b9b8      	cbnz	r0, 800d430 <_Balloc+0x68>
 800d400:	2101      	movs	r1, #1
 800d402:	fa01 f605 	lsl.w	r6, r1, r5
 800d406:	1d72      	adds	r2, r6, #5
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 feb4 	bl	800e178 <_calloc_r>
 800d410:	b160      	cbz	r0, 800d42c <_Balloc+0x64>
 800d412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d416:	e00e      	b.n	800d436 <_Balloc+0x6e>
 800d418:	2221      	movs	r2, #33	@ 0x21
 800d41a:	2104      	movs	r1, #4
 800d41c:	4620      	mov	r0, r4
 800d41e:	f000 feab 	bl	800e178 <_calloc_r>
 800d422:	69e3      	ldr	r3, [r4, #28]
 800d424:	60f0      	str	r0, [r6, #12]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e4      	bne.n	800d3f6 <_Balloc+0x2e>
 800d42c:	2000      	movs	r0, #0
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	6802      	ldr	r2, [r0, #0]
 800d432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d436:	2300      	movs	r3, #0
 800d438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d43c:	e7f7      	b.n	800d42e <_Balloc+0x66>
 800d43e:	bf00      	nop
 800d440:	0800f1c6 	.word	0x0800f1c6
 800d444:	0800f2b7 	.word	0x0800f2b7

0800d448 <_Bfree>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	69c6      	ldr	r6, [r0, #28]
 800d44c:	4605      	mov	r5, r0
 800d44e:	460c      	mov	r4, r1
 800d450:	b976      	cbnz	r6, 800d470 <_Bfree+0x28>
 800d452:	2010      	movs	r0, #16
 800d454:	f7ff fe44 	bl	800d0e0 <malloc>
 800d458:	4602      	mov	r2, r0
 800d45a:	61e8      	str	r0, [r5, #28]
 800d45c:	b920      	cbnz	r0, 800d468 <_Bfree+0x20>
 800d45e:	4b09      	ldr	r3, [pc, #36]	@ (800d484 <_Bfree+0x3c>)
 800d460:	4809      	ldr	r0, [pc, #36]	@ (800d488 <_Bfree+0x40>)
 800d462:	218f      	movs	r1, #143	@ 0x8f
 800d464:	f000 fe6a 	bl	800e13c <__assert_func>
 800d468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d46c:	6006      	str	r6, [r0, #0]
 800d46e:	60c6      	str	r6, [r0, #12]
 800d470:	b13c      	cbz	r4, 800d482 <_Bfree+0x3a>
 800d472:	69eb      	ldr	r3, [r5, #28]
 800d474:	6862      	ldr	r2, [r4, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d47c:	6021      	str	r1, [r4, #0]
 800d47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	0800f1c6 	.word	0x0800f1c6
 800d488:	0800f2b7 	.word	0x0800f2b7

0800d48c <__multadd>:
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	690d      	ldr	r5, [r1, #16]
 800d492:	4607      	mov	r7, r0
 800d494:	460c      	mov	r4, r1
 800d496:	461e      	mov	r6, r3
 800d498:	f101 0c14 	add.w	ip, r1, #20
 800d49c:	2000      	movs	r0, #0
 800d49e:	f8dc 3000 	ldr.w	r3, [ip]
 800d4a2:	b299      	uxth	r1, r3
 800d4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d4a8:	0c1e      	lsrs	r6, r3, #16
 800d4aa:	0c0b      	lsrs	r3, r1, #16
 800d4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d4b0:	b289      	uxth	r1, r1
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4b8:	4285      	cmp	r5, r0
 800d4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4c2:	dcec      	bgt.n	800d49e <__multadd+0x12>
 800d4c4:	b30e      	cbz	r6, 800d50a <__multadd+0x7e>
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dc19      	bgt.n	800d500 <__multadd+0x74>
 800d4cc:	6861      	ldr	r1, [r4, #4]
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	3101      	adds	r1, #1
 800d4d2:	f7ff ff79 	bl	800d3c8 <_Balloc>
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	b928      	cbnz	r0, 800d4e6 <__multadd+0x5a>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d510 <__multadd+0x84>)
 800d4de:	480d      	ldr	r0, [pc, #52]	@ (800d514 <__multadd+0x88>)
 800d4e0:	21ba      	movs	r1, #186	@ 0xba
 800d4e2:	f000 fe2b 	bl	800e13c <__assert_func>
 800d4e6:	6922      	ldr	r2, [r4, #16]
 800d4e8:	3202      	adds	r2, #2
 800d4ea:	f104 010c 	add.w	r1, r4, #12
 800d4ee:	0092      	lsls	r2, r2, #2
 800d4f0:	300c      	adds	r0, #12
 800d4f2:	f7fe fafa 	bl	800baea <memcpy>
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ffa5 	bl	800d448 <_Bfree>
 800d4fe:	4644      	mov	r4, r8
 800d500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d504:	3501      	adds	r5, #1
 800d506:	615e      	str	r6, [r3, #20]
 800d508:	6125      	str	r5, [r4, #16]
 800d50a:	4620      	mov	r0, r4
 800d50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d510:	0800f235 	.word	0x0800f235
 800d514:	0800f2b7 	.word	0x0800f2b7

0800d518 <__s2b>:
 800d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	4615      	mov	r5, r2
 800d520:	461f      	mov	r7, r3
 800d522:	2209      	movs	r2, #9
 800d524:	3308      	adds	r3, #8
 800d526:	4606      	mov	r6, r0
 800d528:	fb93 f3f2 	sdiv	r3, r3, r2
 800d52c:	2100      	movs	r1, #0
 800d52e:	2201      	movs	r2, #1
 800d530:	429a      	cmp	r2, r3
 800d532:	db09      	blt.n	800d548 <__s2b+0x30>
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff ff47 	bl	800d3c8 <_Balloc>
 800d53a:	b940      	cbnz	r0, 800d54e <__s2b+0x36>
 800d53c:	4602      	mov	r2, r0
 800d53e:	4b19      	ldr	r3, [pc, #100]	@ (800d5a4 <__s2b+0x8c>)
 800d540:	4819      	ldr	r0, [pc, #100]	@ (800d5a8 <__s2b+0x90>)
 800d542:	21d3      	movs	r1, #211	@ 0xd3
 800d544:	f000 fdfa 	bl	800e13c <__assert_func>
 800d548:	0052      	lsls	r2, r2, #1
 800d54a:	3101      	adds	r1, #1
 800d54c:	e7f0      	b.n	800d530 <__s2b+0x18>
 800d54e:	9b08      	ldr	r3, [sp, #32]
 800d550:	6143      	str	r3, [r0, #20]
 800d552:	2d09      	cmp	r5, #9
 800d554:	f04f 0301 	mov.w	r3, #1
 800d558:	6103      	str	r3, [r0, #16]
 800d55a:	dd16      	ble.n	800d58a <__s2b+0x72>
 800d55c:	f104 0909 	add.w	r9, r4, #9
 800d560:	46c8      	mov	r8, r9
 800d562:	442c      	add	r4, r5
 800d564:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d568:	4601      	mov	r1, r0
 800d56a:	3b30      	subs	r3, #48	@ 0x30
 800d56c:	220a      	movs	r2, #10
 800d56e:	4630      	mov	r0, r6
 800d570:	f7ff ff8c 	bl	800d48c <__multadd>
 800d574:	45a0      	cmp	r8, r4
 800d576:	d1f5      	bne.n	800d564 <__s2b+0x4c>
 800d578:	f1a5 0408 	sub.w	r4, r5, #8
 800d57c:	444c      	add	r4, r9
 800d57e:	1b2d      	subs	r5, r5, r4
 800d580:	1963      	adds	r3, r4, r5
 800d582:	42bb      	cmp	r3, r7
 800d584:	db04      	blt.n	800d590 <__s2b+0x78>
 800d586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58a:	340a      	adds	r4, #10
 800d58c:	2509      	movs	r5, #9
 800d58e:	e7f6      	b.n	800d57e <__s2b+0x66>
 800d590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d594:	4601      	mov	r1, r0
 800d596:	3b30      	subs	r3, #48	@ 0x30
 800d598:	220a      	movs	r2, #10
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7ff ff76 	bl	800d48c <__multadd>
 800d5a0:	e7ee      	b.n	800d580 <__s2b+0x68>
 800d5a2:	bf00      	nop
 800d5a4:	0800f235 	.word	0x0800f235
 800d5a8:	0800f2b7 	.word	0x0800f2b7

0800d5ac <__hi0bits>:
 800d5ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	bf36      	itet	cc
 800d5b4:	0403      	lslcc	r3, r0, #16
 800d5b6:	2000      	movcs	r0, #0
 800d5b8:	2010      	movcc	r0, #16
 800d5ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5be:	bf3c      	itt	cc
 800d5c0:	021b      	lslcc	r3, r3, #8
 800d5c2:	3008      	addcc	r0, #8
 800d5c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5c8:	bf3c      	itt	cc
 800d5ca:	011b      	lslcc	r3, r3, #4
 800d5cc:	3004      	addcc	r0, #4
 800d5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5d2:	bf3c      	itt	cc
 800d5d4:	009b      	lslcc	r3, r3, #2
 800d5d6:	3002      	addcc	r0, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	db05      	blt.n	800d5e8 <__hi0bits+0x3c>
 800d5dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d5e0:	f100 0001 	add.w	r0, r0, #1
 800d5e4:	bf08      	it	eq
 800d5e6:	2020      	moveq	r0, #32
 800d5e8:	4770      	bx	lr

0800d5ea <__lo0bits>:
 800d5ea:	6803      	ldr	r3, [r0, #0]
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	f013 0007 	ands.w	r0, r3, #7
 800d5f2:	d00b      	beq.n	800d60c <__lo0bits+0x22>
 800d5f4:	07d9      	lsls	r1, r3, #31
 800d5f6:	d421      	bmi.n	800d63c <__lo0bits+0x52>
 800d5f8:	0798      	lsls	r0, r3, #30
 800d5fa:	bf49      	itett	mi
 800d5fc:	085b      	lsrmi	r3, r3, #1
 800d5fe:	089b      	lsrpl	r3, r3, #2
 800d600:	2001      	movmi	r0, #1
 800d602:	6013      	strmi	r3, [r2, #0]
 800d604:	bf5c      	itt	pl
 800d606:	6013      	strpl	r3, [r2, #0]
 800d608:	2002      	movpl	r0, #2
 800d60a:	4770      	bx	lr
 800d60c:	b299      	uxth	r1, r3
 800d60e:	b909      	cbnz	r1, 800d614 <__lo0bits+0x2a>
 800d610:	0c1b      	lsrs	r3, r3, #16
 800d612:	2010      	movs	r0, #16
 800d614:	b2d9      	uxtb	r1, r3
 800d616:	b909      	cbnz	r1, 800d61c <__lo0bits+0x32>
 800d618:	3008      	adds	r0, #8
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	0719      	lsls	r1, r3, #28
 800d61e:	bf04      	itt	eq
 800d620:	091b      	lsreq	r3, r3, #4
 800d622:	3004      	addeq	r0, #4
 800d624:	0799      	lsls	r1, r3, #30
 800d626:	bf04      	itt	eq
 800d628:	089b      	lsreq	r3, r3, #2
 800d62a:	3002      	addeq	r0, #2
 800d62c:	07d9      	lsls	r1, r3, #31
 800d62e:	d403      	bmi.n	800d638 <__lo0bits+0x4e>
 800d630:	085b      	lsrs	r3, r3, #1
 800d632:	f100 0001 	add.w	r0, r0, #1
 800d636:	d003      	beq.n	800d640 <__lo0bits+0x56>
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	4770      	bx	lr
 800d63c:	2000      	movs	r0, #0
 800d63e:	4770      	bx	lr
 800d640:	2020      	movs	r0, #32
 800d642:	4770      	bx	lr

0800d644 <__i2b>:
 800d644:	b510      	push	{r4, lr}
 800d646:	460c      	mov	r4, r1
 800d648:	2101      	movs	r1, #1
 800d64a:	f7ff febd 	bl	800d3c8 <_Balloc>
 800d64e:	4602      	mov	r2, r0
 800d650:	b928      	cbnz	r0, 800d65e <__i2b+0x1a>
 800d652:	4b05      	ldr	r3, [pc, #20]	@ (800d668 <__i2b+0x24>)
 800d654:	4805      	ldr	r0, [pc, #20]	@ (800d66c <__i2b+0x28>)
 800d656:	f240 1145 	movw	r1, #325	@ 0x145
 800d65a:	f000 fd6f 	bl	800e13c <__assert_func>
 800d65e:	2301      	movs	r3, #1
 800d660:	6144      	str	r4, [r0, #20]
 800d662:	6103      	str	r3, [r0, #16]
 800d664:	bd10      	pop	{r4, pc}
 800d666:	bf00      	nop
 800d668:	0800f235 	.word	0x0800f235
 800d66c:	0800f2b7 	.word	0x0800f2b7

0800d670 <__multiply>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	4614      	mov	r4, r2
 800d676:	690a      	ldr	r2, [r1, #16]
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	bfa8      	it	ge
 800d67e:	4623      	movge	r3, r4
 800d680:	460f      	mov	r7, r1
 800d682:	bfa4      	itt	ge
 800d684:	460c      	movge	r4, r1
 800d686:	461f      	movge	r7, r3
 800d688:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d68c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d690:	68a3      	ldr	r3, [r4, #8]
 800d692:	6861      	ldr	r1, [r4, #4]
 800d694:	eb0a 0609 	add.w	r6, sl, r9
 800d698:	42b3      	cmp	r3, r6
 800d69a:	b085      	sub	sp, #20
 800d69c:	bfb8      	it	lt
 800d69e:	3101      	addlt	r1, #1
 800d6a0:	f7ff fe92 	bl	800d3c8 <_Balloc>
 800d6a4:	b930      	cbnz	r0, 800d6b4 <__multiply+0x44>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	4b44      	ldr	r3, [pc, #272]	@ (800d7bc <__multiply+0x14c>)
 800d6aa:	4845      	ldr	r0, [pc, #276]	@ (800d7c0 <__multiply+0x150>)
 800d6ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d6b0:	f000 fd44 	bl	800e13c <__assert_func>
 800d6b4:	f100 0514 	add.w	r5, r0, #20
 800d6b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6bc:	462b      	mov	r3, r5
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4543      	cmp	r3, r8
 800d6c2:	d321      	bcc.n	800d708 <__multiply+0x98>
 800d6c4:	f107 0114 	add.w	r1, r7, #20
 800d6c8:	f104 0214 	add.w	r2, r4, #20
 800d6cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d6d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d6d4:	9302      	str	r3, [sp, #8]
 800d6d6:	1b13      	subs	r3, r2, r4
 800d6d8:	3b15      	subs	r3, #21
 800d6da:	f023 0303 	bic.w	r3, r3, #3
 800d6de:	3304      	adds	r3, #4
 800d6e0:	f104 0715 	add.w	r7, r4, #21
 800d6e4:	42ba      	cmp	r2, r7
 800d6e6:	bf38      	it	cc
 800d6e8:	2304      	movcc	r3, #4
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	9103      	str	r1, [sp, #12]
 800d6f0:	428b      	cmp	r3, r1
 800d6f2:	d80c      	bhi.n	800d70e <__multiply+0x9e>
 800d6f4:	2e00      	cmp	r6, #0
 800d6f6:	dd03      	ble.n	800d700 <__multiply+0x90>
 800d6f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d05b      	beq.n	800d7b8 <__multiply+0x148>
 800d700:	6106      	str	r6, [r0, #16]
 800d702:	b005      	add	sp, #20
 800d704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d708:	f843 2b04 	str.w	r2, [r3], #4
 800d70c:	e7d8      	b.n	800d6c0 <__multiply+0x50>
 800d70e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d712:	f1ba 0f00 	cmp.w	sl, #0
 800d716:	d024      	beq.n	800d762 <__multiply+0xf2>
 800d718:	f104 0e14 	add.w	lr, r4, #20
 800d71c:	46a9      	mov	r9, r5
 800d71e:	f04f 0c00 	mov.w	ip, #0
 800d722:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d726:	f8d9 3000 	ldr.w	r3, [r9]
 800d72a:	fa1f fb87 	uxth.w	fp, r7
 800d72e:	b29b      	uxth	r3, r3
 800d730:	fb0a 330b 	mla	r3, sl, fp, r3
 800d734:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d738:	f8d9 7000 	ldr.w	r7, [r9]
 800d73c:	4463      	add	r3, ip
 800d73e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d742:	fb0a c70b 	mla	r7, sl, fp, ip
 800d746:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d750:	4572      	cmp	r2, lr
 800d752:	f849 3b04 	str.w	r3, [r9], #4
 800d756:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d75a:	d8e2      	bhi.n	800d722 <__multiply+0xb2>
 800d75c:	9b01      	ldr	r3, [sp, #4]
 800d75e:	f845 c003 	str.w	ip, [r5, r3]
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d768:	3104      	adds	r1, #4
 800d76a:	f1b9 0f00 	cmp.w	r9, #0
 800d76e:	d021      	beq.n	800d7b4 <__multiply+0x144>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	f104 0c14 	add.w	ip, r4, #20
 800d776:	46ae      	mov	lr, r5
 800d778:	f04f 0a00 	mov.w	sl, #0
 800d77c:	f8bc b000 	ldrh.w	fp, [ip]
 800d780:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d784:	fb09 770b 	mla	r7, r9, fp, r7
 800d788:	4457      	add	r7, sl
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d790:	f84e 3b04 	str.w	r3, [lr], #4
 800d794:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d79c:	f8be 3000 	ldrh.w	r3, [lr]
 800d7a0:	fb09 330a 	mla	r3, r9, sl, r3
 800d7a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d7a8:	4562      	cmp	r2, ip
 800d7aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7ae:	d8e5      	bhi.n	800d77c <__multiply+0x10c>
 800d7b0:	9f01      	ldr	r7, [sp, #4]
 800d7b2:	51eb      	str	r3, [r5, r7]
 800d7b4:	3504      	adds	r5, #4
 800d7b6:	e799      	b.n	800d6ec <__multiply+0x7c>
 800d7b8:	3e01      	subs	r6, #1
 800d7ba:	e79b      	b.n	800d6f4 <__multiply+0x84>
 800d7bc:	0800f235 	.word	0x0800f235
 800d7c0:	0800f2b7 	.word	0x0800f2b7

0800d7c4 <__pow5mult>:
 800d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	4615      	mov	r5, r2
 800d7ca:	f012 0203 	ands.w	r2, r2, #3
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	460e      	mov	r6, r1
 800d7d2:	d007      	beq.n	800d7e4 <__pow5mult+0x20>
 800d7d4:	4c25      	ldr	r4, [pc, #148]	@ (800d86c <__pow5mult+0xa8>)
 800d7d6:	3a01      	subs	r2, #1
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7de:	f7ff fe55 	bl	800d48c <__multadd>
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	10ad      	asrs	r5, r5, #2
 800d7e6:	d03d      	beq.n	800d864 <__pow5mult+0xa0>
 800d7e8:	69fc      	ldr	r4, [r7, #28]
 800d7ea:	b97c      	cbnz	r4, 800d80c <__pow5mult+0x48>
 800d7ec:	2010      	movs	r0, #16
 800d7ee:	f7ff fc77 	bl	800d0e0 <malloc>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	61f8      	str	r0, [r7, #28]
 800d7f6:	b928      	cbnz	r0, 800d804 <__pow5mult+0x40>
 800d7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d870 <__pow5mult+0xac>)
 800d7fa:	481e      	ldr	r0, [pc, #120]	@ (800d874 <__pow5mult+0xb0>)
 800d7fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d800:	f000 fc9c 	bl	800e13c <__assert_func>
 800d804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d808:	6004      	str	r4, [r0, #0]
 800d80a:	60c4      	str	r4, [r0, #12]
 800d80c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d814:	b94c      	cbnz	r4, 800d82a <__pow5mult+0x66>
 800d816:	f240 2171 	movw	r1, #625	@ 0x271
 800d81a:	4638      	mov	r0, r7
 800d81c:	f7ff ff12 	bl	800d644 <__i2b>
 800d820:	2300      	movs	r3, #0
 800d822:	f8c8 0008 	str.w	r0, [r8, #8]
 800d826:	4604      	mov	r4, r0
 800d828:	6003      	str	r3, [r0, #0]
 800d82a:	f04f 0900 	mov.w	r9, #0
 800d82e:	07eb      	lsls	r3, r5, #31
 800d830:	d50a      	bpl.n	800d848 <__pow5mult+0x84>
 800d832:	4631      	mov	r1, r6
 800d834:	4622      	mov	r2, r4
 800d836:	4638      	mov	r0, r7
 800d838:	f7ff ff1a 	bl	800d670 <__multiply>
 800d83c:	4631      	mov	r1, r6
 800d83e:	4680      	mov	r8, r0
 800d840:	4638      	mov	r0, r7
 800d842:	f7ff fe01 	bl	800d448 <_Bfree>
 800d846:	4646      	mov	r6, r8
 800d848:	106d      	asrs	r5, r5, #1
 800d84a:	d00b      	beq.n	800d864 <__pow5mult+0xa0>
 800d84c:	6820      	ldr	r0, [r4, #0]
 800d84e:	b938      	cbnz	r0, 800d860 <__pow5mult+0x9c>
 800d850:	4622      	mov	r2, r4
 800d852:	4621      	mov	r1, r4
 800d854:	4638      	mov	r0, r7
 800d856:	f7ff ff0b 	bl	800d670 <__multiply>
 800d85a:	6020      	str	r0, [r4, #0]
 800d85c:	f8c0 9000 	str.w	r9, [r0]
 800d860:	4604      	mov	r4, r0
 800d862:	e7e4      	b.n	800d82e <__pow5mult+0x6a>
 800d864:	4630      	mov	r0, r6
 800d866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d86a:	bf00      	nop
 800d86c:	0800f310 	.word	0x0800f310
 800d870:	0800f1c6 	.word	0x0800f1c6
 800d874:	0800f2b7 	.word	0x0800f2b7

0800d878 <__lshift>:
 800d878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d87c:	460c      	mov	r4, r1
 800d87e:	6849      	ldr	r1, [r1, #4]
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	4607      	mov	r7, r0
 800d88a:	4691      	mov	r9, r2
 800d88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d890:	f108 0601 	add.w	r6, r8, #1
 800d894:	42b3      	cmp	r3, r6
 800d896:	db0b      	blt.n	800d8b0 <__lshift+0x38>
 800d898:	4638      	mov	r0, r7
 800d89a:	f7ff fd95 	bl	800d3c8 <_Balloc>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	b948      	cbnz	r0, 800d8b6 <__lshift+0x3e>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	4b28      	ldr	r3, [pc, #160]	@ (800d948 <__lshift+0xd0>)
 800d8a6:	4829      	ldr	r0, [pc, #164]	@ (800d94c <__lshift+0xd4>)
 800d8a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d8ac:	f000 fc46 	bl	800e13c <__assert_func>
 800d8b0:	3101      	adds	r1, #1
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	e7ee      	b.n	800d894 <__lshift+0x1c>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f100 0114 	add.w	r1, r0, #20
 800d8bc:	f100 0210 	add.w	r2, r0, #16
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	4553      	cmp	r3, sl
 800d8c4:	db33      	blt.n	800d92e <__lshift+0xb6>
 800d8c6:	6920      	ldr	r0, [r4, #16]
 800d8c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8cc:	f104 0314 	add.w	r3, r4, #20
 800d8d0:	f019 091f 	ands.w	r9, r9, #31
 800d8d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8dc:	d02b      	beq.n	800d936 <__lshift+0xbe>
 800d8de:	f1c9 0e20 	rsb	lr, r9, #32
 800d8e2:	468a      	mov	sl, r1
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	fa00 f009 	lsl.w	r0, r0, r9
 800d8ec:	4310      	orrs	r0, r2
 800d8ee:	f84a 0b04 	str.w	r0, [sl], #4
 800d8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f6:	459c      	cmp	ip, r3
 800d8f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8fc:	d8f3      	bhi.n	800d8e6 <__lshift+0x6e>
 800d8fe:	ebac 0304 	sub.w	r3, ip, r4
 800d902:	3b15      	subs	r3, #21
 800d904:	f023 0303 	bic.w	r3, r3, #3
 800d908:	3304      	adds	r3, #4
 800d90a:	f104 0015 	add.w	r0, r4, #21
 800d90e:	4584      	cmp	ip, r0
 800d910:	bf38      	it	cc
 800d912:	2304      	movcc	r3, #4
 800d914:	50ca      	str	r2, [r1, r3]
 800d916:	b10a      	cbz	r2, 800d91c <__lshift+0xa4>
 800d918:	f108 0602 	add.w	r6, r8, #2
 800d91c:	3e01      	subs	r6, #1
 800d91e:	4638      	mov	r0, r7
 800d920:	612e      	str	r6, [r5, #16]
 800d922:	4621      	mov	r1, r4
 800d924:	f7ff fd90 	bl	800d448 <_Bfree>
 800d928:	4628      	mov	r0, r5
 800d92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d932:	3301      	adds	r3, #1
 800d934:	e7c5      	b.n	800d8c2 <__lshift+0x4a>
 800d936:	3904      	subs	r1, #4
 800d938:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d940:	459c      	cmp	ip, r3
 800d942:	d8f9      	bhi.n	800d938 <__lshift+0xc0>
 800d944:	e7ea      	b.n	800d91c <__lshift+0xa4>
 800d946:	bf00      	nop
 800d948:	0800f235 	.word	0x0800f235
 800d94c:	0800f2b7 	.word	0x0800f2b7

0800d950 <__mcmp>:
 800d950:	690a      	ldr	r2, [r1, #16]
 800d952:	4603      	mov	r3, r0
 800d954:	6900      	ldr	r0, [r0, #16]
 800d956:	1a80      	subs	r0, r0, r2
 800d958:	b530      	push	{r4, r5, lr}
 800d95a:	d10e      	bne.n	800d97a <__mcmp+0x2a>
 800d95c:	3314      	adds	r3, #20
 800d95e:	3114      	adds	r1, #20
 800d960:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d964:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d96c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d970:	4295      	cmp	r5, r2
 800d972:	d003      	beq.n	800d97c <__mcmp+0x2c>
 800d974:	d205      	bcs.n	800d982 <__mcmp+0x32>
 800d976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d97a:	bd30      	pop	{r4, r5, pc}
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	d3f3      	bcc.n	800d968 <__mcmp+0x18>
 800d980:	e7fb      	b.n	800d97a <__mcmp+0x2a>
 800d982:	2001      	movs	r0, #1
 800d984:	e7f9      	b.n	800d97a <__mcmp+0x2a>
	...

0800d988 <__mdiff>:
 800d988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	4689      	mov	r9, r1
 800d98e:	4606      	mov	r6, r0
 800d990:	4611      	mov	r1, r2
 800d992:	4648      	mov	r0, r9
 800d994:	4614      	mov	r4, r2
 800d996:	f7ff ffdb 	bl	800d950 <__mcmp>
 800d99a:	1e05      	subs	r5, r0, #0
 800d99c:	d112      	bne.n	800d9c4 <__mdiff+0x3c>
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7ff fd11 	bl	800d3c8 <_Balloc>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	b928      	cbnz	r0, 800d9b6 <__mdiff+0x2e>
 800d9aa:	4b3f      	ldr	r3, [pc, #252]	@ (800daa8 <__mdiff+0x120>)
 800d9ac:	f240 2137 	movw	r1, #567	@ 0x237
 800d9b0:	483e      	ldr	r0, [pc, #248]	@ (800daac <__mdiff+0x124>)
 800d9b2:	f000 fbc3 	bl	800e13c <__assert_func>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9bc:	4610      	mov	r0, r2
 800d9be:	b003      	add	sp, #12
 800d9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c4:	bfbc      	itt	lt
 800d9c6:	464b      	movlt	r3, r9
 800d9c8:	46a1      	movlt	r9, r4
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d9d0:	bfba      	itte	lt
 800d9d2:	461c      	movlt	r4, r3
 800d9d4:	2501      	movlt	r5, #1
 800d9d6:	2500      	movge	r5, #0
 800d9d8:	f7ff fcf6 	bl	800d3c8 <_Balloc>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	b918      	cbnz	r0, 800d9e8 <__mdiff+0x60>
 800d9e0:	4b31      	ldr	r3, [pc, #196]	@ (800daa8 <__mdiff+0x120>)
 800d9e2:	f240 2145 	movw	r1, #581	@ 0x245
 800d9e6:	e7e3      	b.n	800d9b0 <__mdiff+0x28>
 800d9e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9ec:	6926      	ldr	r6, [r4, #16]
 800d9ee:	60c5      	str	r5, [r0, #12]
 800d9f0:	f109 0310 	add.w	r3, r9, #16
 800d9f4:	f109 0514 	add.w	r5, r9, #20
 800d9f8:	f104 0e14 	add.w	lr, r4, #20
 800d9fc:	f100 0b14 	add.w	fp, r0, #20
 800da00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800da04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	46d9      	mov	r9, fp
 800da0c:	f04f 0c00 	mov.w	ip, #0
 800da10:	9b01      	ldr	r3, [sp, #4]
 800da12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800da16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	fa1f f38a 	uxth.w	r3, sl
 800da20:	4619      	mov	r1, r3
 800da22:	b283      	uxth	r3, r0
 800da24:	1acb      	subs	r3, r1, r3
 800da26:	0c00      	lsrs	r0, r0, #16
 800da28:	4463      	add	r3, ip
 800da2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da32:	b29b      	uxth	r3, r3
 800da34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da38:	4576      	cmp	r6, lr
 800da3a:	f849 3b04 	str.w	r3, [r9], #4
 800da3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da42:	d8e5      	bhi.n	800da10 <__mdiff+0x88>
 800da44:	1b33      	subs	r3, r6, r4
 800da46:	3b15      	subs	r3, #21
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	3415      	adds	r4, #21
 800da4e:	3304      	adds	r3, #4
 800da50:	42a6      	cmp	r6, r4
 800da52:	bf38      	it	cc
 800da54:	2304      	movcc	r3, #4
 800da56:	441d      	add	r5, r3
 800da58:	445b      	add	r3, fp
 800da5a:	461e      	mov	r6, r3
 800da5c:	462c      	mov	r4, r5
 800da5e:	4544      	cmp	r4, r8
 800da60:	d30e      	bcc.n	800da80 <__mdiff+0xf8>
 800da62:	f108 0103 	add.w	r1, r8, #3
 800da66:	1b49      	subs	r1, r1, r5
 800da68:	f021 0103 	bic.w	r1, r1, #3
 800da6c:	3d03      	subs	r5, #3
 800da6e:	45a8      	cmp	r8, r5
 800da70:	bf38      	it	cc
 800da72:	2100      	movcc	r1, #0
 800da74:	440b      	add	r3, r1
 800da76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da7a:	b191      	cbz	r1, 800daa2 <__mdiff+0x11a>
 800da7c:	6117      	str	r7, [r2, #16]
 800da7e:	e79d      	b.n	800d9bc <__mdiff+0x34>
 800da80:	f854 1b04 	ldr.w	r1, [r4], #4
 800da84:	46e6      	mov	lr, ip
 800da86:	0c08      	lsrs	r0, r1, #16
 800da88:	fa1c fc81 	uxtah	ip, ip, r1
 800da8c:	4471      	add	r1, lr
 800da8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da92:	b289      	uxth	r1, r1
 800da94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da98:	f846 1b04 	str.w	r1, [r6], #4
 800da9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800daa0:	e7dd      	b.n	800da5e <__mdiff+0xd6>
 800daa2:	3f01      	subs	r7, #1
 800daa4:	e7e7      	b.n	800da76 <__mdiff+0xee>
 800daa6:	bf00      	nop
 800daa8:	0800f235 	.word	0x0800f235
 800daac:	0800f2b7 	.word	0x0800f2b7

0800dab0 <__ulp>:
 800dab0:	b082      	sub	sp, #8
 800dab2:	ed8d 0b00 	vstr	d0, [sp]
 800dab6:	9a01      	ldr	r2, [sp, #4]
 800dab8:	4b0f      	ldr	r3, [pc, #60]	@ (800daf8 <__ulp+0x48>)
 800daba:	4013      	ands	r3, r2
 800dabc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	dc08      	bgt.n	800dad6 <__ulp+0x26>
 800dac4:	425b      	negs	r3, r3
 800dac6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800daca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dace:	da04      	bge.n	800dada <__ulp+0x2a>
 800dad0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dad4:	4113      	asrs	r3, r2
 800dad6:	2200      	movs	r2, #0
 800dad8:	e008      	b.n	800daec <__ulp+0x3c>
 800dada:	f1a2 0314 	sub.w	r3, r2, #20
 800dade:	2b1e      	cmp	r3, #30
 800dae0:	bfda      	itte	le
 800dae2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dae6:	40da      	lsrle	r2, r3
 800dae8:	2201      	movgt	r2, #1
 800daea:	2300      	movs	r3, #0
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	ec41 0b10 	vmov	d0, r0, r1
 800daf4:	b002      	add	sp, #8
 800daf6:	4770      	bx	lr
 800daf8:	7ff00000 	.word	0x7ff00000

0800dafc <__b2d>:
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	6906      	ldr	r6, [r0, #16]
 800db02:	f100 0814 	add.w	r8, r0, #20
 800db06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800db0a:	1f37      	subs	r7, r6, #4
 800db0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800db10:	4610      	mov	r0, r2
 800db12:	f7ff fd4b 	bl	800d5ac <__hi0bits>
 800db16:	f1c0 0320 	rsb	r3, r0, #32
 800db1a:	280a      	cmp	r0, #10
 800db1c:	600b      	str	r3, [r1, #0]
 800db1e:	491b      	ldr	r1, [pc, #108]	@ (800db8c <__b2d+0x90>)
 800db20:	dc15      	bgt.n	800db4e <__b2d+0x52>
 800db22:	f1c0 0c0b 	rsb	ip, r0, #11
 800db26:	fa22 f30c 	lsr.w	r3, r2, ip
 800db2a:	45b8      	cmp	r8, r7
 800db2c:	ea43 0501 	orr.w	r5, r3, r1
 800db30:	bf34      	ite	cc
 800db32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db36:	2300      	movcs	r3, #0
 800db38:	3015      	adds	r0, #21
 800db3a:	fa02 f000 	lsl.w	r0, r2, r0
 800db3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800db42:	4303      	orrs	r3, r0
 800db44:	461c      	mov	r4, r3
 800db46:	ec45 4b10 	vmov	d0, r4, r5
 800db4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db4e:	45b8      	cmp	r8, r7
 800db50:	bf3a      	itte	cc
 800db52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db56:	f1a6 0708 	subcc.w	r7, r6, #8
 800db5a:	2300      	movcs	r3, #0
 800db5c:	380b      	subs	r0, #11
 800db5e:	d012      	beq.n	800db86 <__b2d+0x8a>
 800db60:	f1c0 0120 	rsb	r1, r0, #32
 800db64:	fa23 f401 	lsr.w	r4, r3, r1
 800db68:	4082      	lsls	r2, r0
 800db6a:	4322      	orrs	r2, r4
 800db6c:	4547      	cmp	r7, r8
 800db6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800db72:	bf8c      	ite	hi
 800db74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db78:	2200      	movls	r2, #0
 800db7a:	4083      	lsls	r3, r0
 800db7c:	40ca      	lsrs	r2, r1
 800db7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800db82:	4313      	orrs	r3, r2
 800db84:	e7de      	b.n	800db44 <__b2d+0x48>
 800db86:	ea42 0501 	orr.w	r5, r2, r1
 800db8a:	e7db      	b.n	800db44 <__b2d+0x48>
 800db8c:	3ff00000 	.word	0x3ff00000

0800db90 <__d2b>:
 800db90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db94:	460f      	mov	r7, r1
 800db96:	2101      	movs	r1, #1
 800db98:	ec59 8b10 	vmov	r8, r9, d0
 800db9c:	4616      	mov	r6, r2
 800db9e:	f7ff fc13 	bl	800d3c8 <_Balloc>
 800dba2:	4604      	mov	r4, r0
 800dba4:	b930      	cbnz	r0, 800dbb4 <__d2b+0x24>
 800dba6:	4602      	mov	r2, r0
 800dba8:	4b23      	ldr	r3, [pc, #140]	@ (800dc38 <__d2b+0xa8>)
 800dbaa:	4824      	ldr	r0, [pc, #144]	@ (800dc3c <__d2b+0xac>)
 800dbac:	f240 310f 	movw	r1, #783	@ 0x30f
 800dbb0:	f000 fac4 	bl	800e13c <__assert_func>
 800dbb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dbb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbbc:	b10d      	cbz	r5, 800dbc2 <__d2b+0x32>
 800dbbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	f1b8 0300 	subs.w	r3, r8, #0
 800dbc8:	d023      	beq.n	800dc12 <__d2b+0x82>
 800dbca:	4668      	mov	r0, sp
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	f7ff fd0c 	bl	800d5ea <__lo0bits>
 800dbd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dbd6:	b1d0      	cbz	r0, 800dc0e <__d2b+0x7e>
 800dbd8:	f1c0 0320 	rsb	r3, r0, #32
 800dbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe0:	430b      	orrs	r3, r1
 800dbe2:	40c2      	lsrs	r2, r0
 800dbe4:	6163      	str	r3, [r4, #20]
 800dbe6:	9201      	str	r2, [sp, #4]
 800dbe8:	9b01      	ldr	r3, [sp, #4]
 800dbea:	61a3      	str	r3, [r4, #24]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bf0c      	ite	eq
 800dbf0:	2201      	moveq	r2, #1
 800dbf2:	2202      	movne	r2, #2
 800dbf4:	6122      	str	r2, [r4, #16]
 800dbf6:	b1a5      	cbz	r5, 800dc22 <__d2b+0x92>
 800dbf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dbfc:	4405      	add	r5, r0
 800dbfe:	603d      	str	r5, [r7, #0]
 800dc00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc04:	6030      	str	r0, [r6, #0]
 800dc06:	4620      	mov	r0, r4
 800dc08:	b003      	add	sp, #12
 800dc0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc0e:	6161      	str	r1, [r4, #20]
 800dc10:	e7ea      	b.n	800dbe8 <__d2b+0x58>
 800dc12:	a801      	add	r0, sp, #4
 800dc14:	f7ff fce9 	bl	800d5ea <__lo0bits>
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	6163      	str	r3, [r4, #20]
 800dc1c:	3020      	adds	r0, #32
 800dc1e:	2201      	movs	r2, #1
 800dc20:	e7e8      	b.n	800dbf4 <__d2b+0x64>
 800dc22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc2a:	6038      	str	r0, [r7, #0]
 800dc2c:	6918      	ldr	r0, [r3, #16]
 800dc2e:	f7ff fcbd 	bl	800d5ac <__hi0bits>
 800dc32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc36:	e7e5      	b.n	800dc04 <__d2b+0x74>
 800dc38:	0800f235 	.word	0x0800f235
 800dc3c:	0800f2b7 	.word	0x0800f2b7

0800dc40 <__ratio>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	b085      	sub	sp, #20
 800dc46:	e9cd 1000 	strd	r1, r0, [sp]
 800dc4a:	a902      	add	r1, sp, #8
 800dc4c:	f7ff ff56 	bl	800dafc <__b2d>
 800dc50:	9800      	ldr	r0, [sp, #0]
 800dc52:	a903      	add	r1, sp, #12
 800dc54:	ec55 4b10 	vmov	r4, r5, d0
 800dc58:	f7ff ff50 	bl	800dafc <__b2d>
 800dc5c:	9b01      	ldr	r3, [sp, #4]
 800dc5e:	6919      	ldr	r1, [r3, #16]
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	1ac9      	subs	r1, r1, r3
 800dc66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	ec5b ab10 	vmov	sl, fp, d0
 800dc70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bfce      	itee	gt
 800dc78:	462a      	movgt	r2, r5
 800dc7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc7e:	465a      	movle	r2, fp
 800dc80:	462f      	mov	r7, r5
 800dc82:	46d9      	mov	r9, fp
 800dc84:	bfcc      	ite	gt
 800dc86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dc8e:	464b      	mov	r3, r9
 800dc90:	4652      	mov	r2, sl
 800dc92:	4620      	mov	r0, r4
 800dc94:	4639      	mov	r1, r7
 800dc96:	f7f2 fdf1 	bl	800087c <__aeabi_ddiv>
 800dc9a:	ec41 0b10 	vmov	d0, r0, r1
 800dc9e:	b005      	add	sp, #20
 800dca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dca4 <__copybits>:
 800dca4:	3901      	subs	r1, #1
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	1149      	asrs	r1, r1, #5
 800dcaa:	6914      	ldr	r4, [r2, #16]
 800dcac:	3101      	adds	r1, #1
 800dcae:	f102 0314 	add.w	r3, r2, #20
 800dcb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dcb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dcba:	1f05      	subs	r5, r0, #4
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	d30c      	bcc.n	800dcda <__copybits+0x36>
 800dcc0:	1aa3      	subs	r3, r4, r2
 800dcc2:	3b11      	subs	r3, #17
 800dcc4:	f023 0303 	bic.w	r3, r3, #3
 800dcc8:	3211      	adds	r2, #17
 800dcca:	42a2      	cmp	r2, r4
 800dccc:	bf88      	it	hi
 800dcce:	2300      	movhi	r3, #0
 800dcd0:	4418      	add	r0, r3
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	4288      	cmp	r0, r1
 800dcd6:	d305      	bcc.n	800dce4 <__copybits+0x40>
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	f853 6b04 	ldr.w	r6, [r3], #4
 800dcde:	f845 6f04 	str.w	r6, [r5, #4]!
 800dce2:	e7eb      	b.n	800dcbc <__copybits+0x18>
 800dce4:	f840 3b04 	str.w	r3, [r0], #4
 800dce8:	e7f4      	b.n	800dcd4 <__copybits+0x30>

0800dcea <__any_on>:
 800dcea:	f100 0214 	add.w	r2, r0, #20
 800dcee:	6900      	ldr	r0, [r0, #16]
 800dcf0:	114b      	asrs	r3, r1, #5
 800dcf2:	4298      	cmp	r0, r3
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	db11      	blt.n	800dd1c <__any_on+0x32>
 800dcf8:	dd0a      	ble.n	800dd10 <__any_on+0x26>
 800dcfa:	f011 011f 	ands.w	r1, r1, #31
 800dcfe:	d007      	beq.n	800dd10 <__any_on+0x26>
 800dd00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dd04:	fa24 f001 	lsr.w	r0, r4, r1
 800dd08:	fa00 f101 	lsl.w	r1, r0, r1
 800dd0c:	428c      	cmp	r4, r1
 800dd0e:	d10b      	bne.n	800dd28 <__any_on+0x3e>
 800dd10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d803      	bhi.n	800dd20 <__any_on+0x36>
 800dd18:	2000      	movs	r0, #0
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	e7f7      	b.n	800dd10 <__any_on+0x26>
 800dd20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd24:	2900      	cmp	r1, #0
 800dd26:	d0f5      	beq.n	800dd14 <__any_on+0x2a>
 800dd28:	2001      	movs	r0, #1
 800dd2a:	e7f6      	b.n	800dd1a <__any_on+0x30>

0800dd2c <__sread>:
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	460c      	mov	r4, r1
 800dd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd34:	f000 f9ce 	bl	800e0d4 <_read_r>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	bfab      	itete	ge
 800dd3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd3e:	89a3      	ldrhlt	r3, [r4, #12]
 800dd40:	181b      	addge	r3, r3, r0
 800dd42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd46:	bfac      	ite	ge
 800dd48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd4a:	81a3      	strhlt	r3, [r4, #12]
 800dd4c:	bd10      	pop	{r4, pc}

0800dd4e <__swrite>:
 800dd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd52:	461f      	mov	r7, r3
 800dd54:	898b      	ldrh	r3, [r1, #12]
 800dd56:	05db      	lsls	r3, r3, #23
 800dd58:	4605      	mov	r5, r0
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	4616      	mov	r6, r2
 800dd5e:	d505      	bpl.n	800dd6c <__swrite+0x1e>
 800dd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd64:	2302      	movs	r3, #2
 800dd66:	2200      	movs	r2, #0
 800dd68:	f000 f9a2 	bl	800e0b0 <_lseek_r>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	4632      	mov	r2, r6
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd82:	f000 b9c9 	b.w	800e118 <_write_r>

0800dd86 <__sseek>:
 800dd86:	b510      	push	{r4, lr}
 800dd88:	460c      	mov	r4, r1
 800dd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8e:	f000 f98f 	bl	800e0b0 <_lseek_r>
 800dd92:	1c43      	adds	r3, r0, #1
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	bf15      	itete	ne
 800dd98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dda2:	81a3      	strheq	r3, [r4, #12]
 800dda4:	bf18      	it	ne
 800dda6:	81a3      	strhne	r3, [r4, #12]
 800dda8:	bd10      	pop	{r4, pc}

0800ddaa <__sclose>:
 800ddaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddae:	f000 b94d 	b.w	800e04c <_close_r>

0800ddb2 <_realloc_r>:
 800ddb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb6:	4680      	mov	r8, r0
 800ddb8:	4615      	mov	r5, r2
 800ddba:	460c      	mov	r4, r1
 800ddbc:	b921      	cbnz	r1, 800ddc8 <_realloc_r+0x16>
 800ddbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	f7ff b9b6 	b.w	800d134 <_malloc_r>
 800ddc8:	b92a      	cbnz	r2, 800ddd6 <_realloc_r+0x24>
 800ddca:	f000 f9e9 	bl	800e1a0 <_free_r>
 800ddce:	2400      	movs	r4, #0
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd6:	f000 fa2d 	bl	800e234 <_malloc_usable_size_r>
 800ddda:	4285      	cmp	r5, r0
 800dddc:	4606      	mov	r6, r0
 800ddde:	d802      	bhi.n	800dde6 <_realloc_r+0x34>
 800dde0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dde4:	d8f4      	bhi.n	800ddd0 <_realloc_r+0x1e>
 800dde6:	4629      	mov	r1, r5
 800dde8:	4640      	mov	r0, r8
 800ddea:	f7ff f9a3 	bl	800d134 <_malloc_r>
 800ddee:	4607      	mov	r7, r0
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d0ec      	beq.n	800ddce <_realloc_r+0x1c>
 800ddf4:	42b5      	cmp	r5, r6
 800ddf6:	462a      	mov	r2, r5
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	bf28      	it	cs
 800ddfc:	4632      	movcs	r2, r6
 800ddfe:	f7fd fe74 	bl	800baea <memcpy>
 800de02:	4621      	mov	r1, r4
 800de04:	4640      	mov	r0, r8
 800de06:	f000 f9cb 	bl	800e1a0 <_free_r>
 800de0a:	463c      	mov	r4, r7
 800de0c:	e7e0      	b.n	800ddd0 <_realloc_r+0x1e>

0800de0e <__swbuf_r>:
 800de0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de10:	460e      	mov	r6, r1
 800de12:	4614      	mov	r4, r2
 800de14:	4605      	mov	r5, r0
 800de16:	b118      	cbz	r0, 800de20 <__swbuf_r+0x12>
 800de18:	6a03      	ldr	r3, [r0, #32]
 800de1a:	b90b      	cbnz	r3, 800de20 <__swbuf_r+0x12>
 800de1c:	f7fc ff00 	bl	800ac20 <__sinit>
 800de20:	69a3      	ldr	r3, [r4, #24]
 800de22:	60a3      	str	r3, [r4, #8]
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	071a      	lsls	r2, r3, #28
 800de28:	d501      	bpl.n	800de2e <__swbuf_r+0x20>
 800de2a:	6923      	ldr	r3, [r4, #16]
 800de2c:	b943      	cbnz	r3, 800de40 <__swbuf_r+0x32>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f000 f82b 	bl	800de8c <__swsetup_r>
 800de36:	b118      	cbz	r0, 800de40 <__swbuf_r+0x32>
 800de38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800de3c:	4638      	mov	r0, r7
 800de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	6922      	ldr	r2, [r4, #16]
 800de44:	1a98      	subs	r0, r3, r2
 800de46:	6963      	ldr	r3, [r4, #20]
 800de48:	b2f6      	uxtb	r6, r6
 800de4a:	4283      	cmp	r3, r0
 800de4c:	4637      	mov	r7, r6
 800de4e:	dc05      	bgt.n	800de5c <__swbuf_r+0x4e>
 800de50:	4621      	mov	r1, r4
 800de52:	4628      	mov	r0, r5
 800de54:	f7ff fa84 	bl	800d360 <_fflush_r>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d1ed      	bne.n	800de38 <__swbuf_r+0x2a>
 800de5c:	68a3      	ldr	r3, [r4, #8]
 800de5e:	3b01      	subs	r3, #1
 800de60:	60a3      	str	r3, [r4, #8]
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	6022      	str	r2, [r4, #0]
 800de68:	701e      	strb	r6, [r3, #0]
 800de6a:	6962      	ldr	r2, [r4, #20]
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	429a      	cmp	r2, r3
 800de70:	d004      	beq.n	800de7c <__swbuf_r+0x6e>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	07db      	lsls	r3, r3, #31
 800de76:	d5e1      	bpl.n	800de3c <__swbuf_r+0x2e>
 800de78:	2e0a      	cmp	r6, #10
 800de7a:	d1df      	bne.n	800de3c <__swbuf_r+0x2e>
 800de7c:	4621      	mov	r1, r4
 800de7e:	4628      	mov	r0, r5
 800de80:	f7ff fa6e 	bl	800d360 <_fflush_r>
 800de84:	2800      	cmp	r0, #0
 800de86:	d0d9      	beq.n	800de3c <__swbuf_r+0x2e>
 800de88:	e7d6      	b.n	800de38 <__swbuf_r+0x2a>
	...

0800de8c <__swsetup_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4b29      	ldr	r3, [pc, #164]	@ (800df34 <__swsetup_r+0xa8>)
 800de90:	4605      	mov	r5, r0
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	460c      	mov	r4, r1
 800de96:	b118      	cbz	r0, 800dea0 <__swsetup_r+0x14>
 800de98:	6a03      	ldr	r3, [r0, #32]
 800de9a:	b90b      	cbnz	r3, 800dea0 <__swsetup_r+0x14>
 800de9c:	f7fc fec0 	bl	800ac20 <__sinit>
 800dea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea4:	0719      	lsls	r1, r3, #28
 800dea6:	d422      	bmi.n	800deee <__swsetup_r+0x62>
 800dea8:	06da      	lsls	r2, r3, #27
 800deaa:	d407      	bmi.n	800debc <__swsetup_r+0x30>
 800deac:	2209      	movs	r2, #9
 800deae:	602a      	str	r2, [r5, #0]
 800deb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deba:	e033      	b.n	800df24 <__swsetup_r+0x98>
 800debc:	0758      	lsls	r0, r3, #29
 800debe:	d512      	bpl.n	800dee6 <__swsetup_r+0x5a>
 800dec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dec2:	b141      	cbz	r1, 800ded6 <__swsetup_r+0x4a>
 800dec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dec8:	4299      	cmp	r1, r3
 800deca:	d002      	beq.n	800ded2 <__swsetup_r+0x46>
 800decc:	4628      	mov	r0, r5
 800dece:	f000 f967 	bl	800e1a0 <_free_r>
 800ded2:	2300      	movs	r3, #0
 800ded4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	2300      	movs	r3, #0
 800dee0:	6063      	str	r3, [r4, #4]
 800dee2:	6923      	ldr	r3, [r4, #16]
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	f043 0308 	orr.w	r3, r3, #8
 800deec:	81a3      	strh	r3, [r4, #12]
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	b94b      	cbnz	r3, 800df06 <__swsetup_r+0x7a>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800def8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800defc:	d003      	beq.n	800df06 <__swsetup_r+0x7a>
 800defe:	4621      	mov	r1, r4
 800df00:	4628      	mov	r0, r5
 800df02:	f000 f84c 	bl	800df9e <__smakebuf_r>
 800df06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df0a:	f013 0201 	ands.w	r2, r3, #1
 800df0e:	d00a      	beq.n	800df26 <__swsetup_r+0x9a>
 800df10:	2200      	movs	r2, #0
 800df12:	60a2      	str	r2, [r4, #8]
 800df14:	6962      	ldr	r2, [r4, #20]
 800df16:	4252      	negs	r2, r2
 800df18:	61a2      	str	r2, [r4, #24]
 800df1a:	6922      	ldr	r2, [r4, #16]
 800df1c:	b942      	cbnz	r2, 800df30 <__swsetup_r+0xa4>
 800df1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df22:	d1c5      	bne.n	800deb0 <__swsetup_r+0x24>
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	0799      	lsls	r1, r3, #30
 800df28:	bf58      	it	pl
 800df2a:	6962      	ldrpl	r2, [r4, #20]
 800df2c:	60a2      	str	r2, [r4, #8]
 800df2e:	e7f4      	b.n	800df1a <__swsetup_r+0x8e>
 800df30:	2000      	movs	r0, #0
 800df32:	e7f7      	b.n	800df24 <__swsetup_r+0x98>
 800df34:	2000027c 	.word	0x2000027c

0800df38 <__ascii_wctomb>:
 800df38:	4603      	mov	r3, r0
 800df3a:	4608      	mov	r0, r1
 800df3c:	b141      	cbz	r1, 800df50 <__ascii_wctomb+0x18>
 800df3e:	2aff      	cmp	r2, #255	@ 0xff
 800df40:	d904      	bls.n	800df4c <__ascii_wctomb+0x14>
 800df42:	228a      	movs	r2, #138	@ 0x8a
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df4a:	4770      	bx	lr
 800df4c:	700a      	strb	r2, [r1, #0]
 800df4e:	2001      	movs	r0, #1
 800df50:	4770      	bx	lr

0800df52 <__swhatbuf_r>:
 800df52:	b570      	push	{r4, r5, r6, lr}
 800df54:	460c      	mov	r4, r1
 800df56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5a:	2900      	cmp	r1, #0
 800df5c:	b096      	sub	sp, #88	@ 0x58
 800df5e:	4615      	mov	r5, r2
 800df60:	461e      	mov	r6, r3
 800df62:	da0d      	bge.n	800df80 <__swhatbuf_r+0x2e>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df6a:	f04f 0100 	mov.w	r1, #0
 800df6e:	bf14      	ite	ne
 800df70:	2340      	movne	r3, #64	@ 0x40
 800df72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df76:	2000      	movs	r0, #0
 800df78:	6031      	str	r1, [r6, #0]
 800df7a:	602b      	str	r3, [r5, #0]
 800df7c:	b016      	add	sp, #88	@ 0x58
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
 800df80:	466a      	mov	r2, sp
 800df82:	f000 f873 	bl	800e06c <_fstat_r>
 800df86:	2800      	cmp	r0, #0
 800df88:	dbec      	blt.n	800df64 <__swhatbuf_r+0x12>
 800df8a:	9901      	ldr	r1, [sp, #4]
 800df8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df94:	4259      	negs	r1, r3
 800df96:	4159      	adcs	r1, r3
 800df98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df9c:	e7eb      	b.n	800df76 <__swhatbuf_r+0x24>

0800df9e <__smakebuf_r>:
 800df9e:	898b      	ldrh	r3, [r1, #12]
 800dfa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfa2:	079d      	lsls	r5, r3, #30
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	d507      	bpl.n	800dfba <__smakebuf_r+0x1c>
 800dfaa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfae:	6023      	str	r3, [r4, #0]
 800dfb0:	6123      	str	r3, [r4, #16]
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	6163      	str	r3, [r4, #20]
 800dfb6:	b003      	add	sp, #12
 800dfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfba:	ab01      	add	r3, sp, #4
 800dfbc:	466a      	mov	r2, sp
 800dfbe:	f7ff ffc8 	bl	800df52 <__swhatbuf_r>
 800dfc2:	9f00      	ldr	r7, [sp, #0]
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f7ff f8b3 	bl	800d134 <_malloc_r>
 800dfce:	b948      	cbnz	r0, 800dfe4 <__smakebuf_r+0x46>
 800dfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd4:	059a      	lsls	r2, r3, #22
 800dfd6:	d4ee      	bmi.n	800dfb6 <__smakebuf_r+0x18>
 800dfd8:	f023 0303 	bic.w	r3, r3, #3
 800dfdc:	f043 0302 	orr.w	r3, r3, #2
 800dfe0:	81a3      	strh	r3, [r4, #12]
 800dfe2:	e7e2      	b.n	800dfaa <__smakebuf_r+0xc>
 800dfe4:	89a3      	ldrh	r3, [r4, #12]
 800dfe6:	6020      	str	r0, [r4, #0]
 800dfe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfec:	81a3      	strh	r3, [r4, #12]
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dff4:	b15b      	cbz	r3, 800e00e <__smakebuf_r+0x70>
 800dff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 f848 	bl	800e090 <_isatty_r>
 800e000:	b128      	cbz	r0, 800e00e <__smakebuf_r+0x70>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	f023 0303 	bic.w	r3, r3, #3
 800e008:	f043 0301 	orr.w	r3, r3, #1
 800e00c:	81a3      	strh	r3, [r4, #12]
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	431d      	orrs	r5, r3
 800e012:	81a5      	strh	r5, [r4, #12]
 800e014:	e7cf      	b.n	800dfb6 <__smakebuf_r+0x18>

0800e016 <memmove>:
 800e016:	4288      	cmp	r0, r1
 800e018:	b510      	push	{r4, lr}
 800e01a:	eb01 0402 	add.w	r4, r1, r2
 800e01e:	d902      	bls.n	800e026 <memmove+0x10>
 800e020:	4284      	cmp	r4, r0
 800e022:	4623      	mov	r3, r4
 800e024:	d807      	bhi.n	800e036 <memmove+0x20>
 800e026:	1e43      	subs	r3, r0, #1
 800e028:	42a1      	cmp	r1, r4
 800e02a:	d008      	beq.n	800e03e <memmove+0x28>
 800e02c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e030:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e034:	e7f8      	b.n	800e028 <memmove+0x12>
 800e036:	4402      	add	r2, r0
 800e038:	4601      	mov	r1, r0
 800e03a:	428a      	cmp	r2, r1
 800e03c:	d100      	bne.n	800e040 <memmove+0x2a>
 800e03e:	bd10      	pop	{r4, pc}
 800e040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e044:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e048:	e7f7      	b.n	800e03a <memmove+0x24>
	...

0800e04c <_close_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4d06      	ldr	r5, [pc, #24]	@ (800e068 <_close_r+0x1c>)
 800e050:	2300      	movs	r3, #0
 800e052:	4604      	mov	r4, r0
 800e054:	4608      	mov	r0, r1
 800e056:	602b      	str	r3, [r5, #0]
 800e058:	f7f4 fcac 	bl	80029b4 <_close>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	d102      	bne.n	800e066 <_close_r+0x1a>
 800e060:	682b      	ldr	r3, [r5, #0]
 800e062:	b103      	cbz	r3, 800e066 <_close_r+0x1a>
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	bd38      	pop	{r3, r4, r5, pc}
 800e068:	20002108 	.word	0x20002108

0800e06c <_fstat_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	4d07      	ldr	r5, [pc, #28]	@ (800e08c <_fstat_r+0x20>)
 800e070:	2300      	movs	r3, #0
 800e072:	4604      	mov	r4, r0
 800e074:	4608      	mov	r0, r1
 800e076:	4611      	mov	r1, r2
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	f7f4 fca7 	bl	80029cc <_fstat>
 800e07e:	1c43      	adds	r3, r0, #1
 800e080:	d102      	bne.n	800e088 <_fstat_r+0x1c>
 800e082:	682b      	ldr	r3, [r5, #0]
 800e084:	b103      	cbz	r3, 800e088 <_fstat_r+0x1c>
 800e086:	6023      	str	r3, [r4, #0]
 800e088:	bd38      	pop	{r3, r4, r5, pc}
 800e08a:	bf00      	nop
 800e08c:	20002108 	.word	0x20002108

0800e090 <_isatty_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d06      	ldr	r5, [pc, #24]	@ (800e0ac <_isatty_r+0x1c>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7f4 fca6 	bl	80029ec <_isatty>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_isatty_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_isatty_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	20002108 	.word	0x20002108

0800e0b0 <_lseek_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d07      	ldr	r5, [pc, #28]	@ (800e0d0 <_lseek_r+0x20>)
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	4608      	mov	r0, r1
 800e0b8:	4611      	mov	r1, r2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	602a      	str	r2, [r5, #0]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f7f4 fc9f 	bl	8002a02 <_lseek>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_lseek_r+0x1e>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_lseek_r+0x1e>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	20002108 	.word	0x20002108

0800e0d4 <_read_r>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	4d07      	ldr	r5, [pc, #28]	@ (800e0f4 <_read_r+0x20>)
 800e0d8:	4604      	mov	r4, r0
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4611      	mov	r1, r2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	602a      	str	r2, [r5, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f7f4 fc2d 	bl	8002942 <_read>
 800e0e8:	1c43      	adds	r3, r0, #1
 800e0ea:	d102      	bne.n	800e0f2 <_read_r+0x1e>
 800e0ec:	682b      	ldr	r3, [r5, #0]
 800e0ee:	b103      	cbz	r3, 800e0f2 <_read_r+0x1e>
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
 800e0f4:	20002108 	.word	0x20002108

0800e0f8 <_sbrk_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	4d06      	ldr	r5, [pc, #24]	@ (800e114 <_sbrk_r+0x1c>)
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4604      	mov	r4, r0
 800e100:	4608      	mov	r0, r1
 800e102:	602b      	str	r3, [r5, #0]
 800e104:	f7f4 fc8a 	bl	8002a1c <_sbrk>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_sbrk_r+0x1a>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_sbrk_r+0x1a>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	20002108 	.word	0x20002108

0800e118 <_write_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	@ (800e138 <_write_r+0x20>)
 800e11c:	4604      	mov	r4, r0
 800e11e:	4608      	mov	r0, r1
 800e120:	4611      	mov	r1, r2
 800e122:	2200      	movs	r2, #0
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	f7f4 fc28 	bl	800297c <_write>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_write_r+0x1e>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_write_r+0x1e>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	20002108 	.word	0x20002108

0800e13c <__assert_func>:
 800e13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e13e:	4614      	mov	r4, r2
 800e140:	461a      	mov	r2, r3
 800e142:	4b09      	ldr	r3, [pc, #36]	@ (800e168 <__assert_func+0x2c>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4605      	mov	r5, r0
 800e148:	68d8      	ldr	r0, [r3, #12]
 800e14a:	b954      	cbnz	r4, 800e162 <__assert_func+0x26>
 800e14c:	4b07      	ldr	r3, [pc, #28]	@ (800e16c <__assert_func+0x30>)
 800e14e:	461c      	mov	r4, r3
 800e150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e154:	9100      	str	r1, [sp, #0]
 800e156:	462b      	mov	r3, r5
 800e158:	4905      	ldr	r1, [pc, #20]	@ (800e170 <__assert_func+0x34>)
 800e15a:	f000 f873 	bl	800e244 <fiprintf>
 800e15e:	f000 f883 	bl	800e268 <abort>
 800e162:	4b04      	ldr	r3, [pc, #16]	@ (800e174 <__assert_func+0x38>)
 800e164:	e7f4      	b.n	800e150 <__assert_func+0x14>
 800e166:	bf00      	nop
 800e168:	2000027c 	.word	0x2000027c
 800e16c:	0800f44b 	.word	0x0800f44b
 800e170:	0800f41d 	.word	0x0800f41d
 800e174:	0800f410 	.word	0x0800f410

0800e178 <_calloc_r>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	fba1 5402 	umull	r5, r4, r1, r2
 800e17e:	b93c      	cbnz	r4, 800e190 <_calloc_r+0x18>
 800e180:	4629      	mov	r1, r5
 800e182:	f7fe ffd7 	bl	800d134 <_malloc_r>
 800e186:	4606      	mov	r6, r0
 800e188:	b928      	cbnz	r0, 800e196 <_calloc_r+0x1e>
 800e18a:	2600      	movs	r6, #0
 800e18c:	4630      	mov	r0, r6
 800e18e:	bd70      	pop	{r4, r5, r6, pc}
 800e190:	220c      	movs	r2, #12
 800e192:	6002      	str	r2, [r0, #0]
 800e194:	e7f9      	b.n	800e18a <_calloc_r+0x12>
 800e196:	462a      	mov	r2, r5
 800e198:	4621      	mov	r1, r4
 800e19a:	f7fd fc6d 	bl	800ba78 <memset>
 800e19e:	e7f5      	b.n	800e18c <_calloc_r+0x14>

0800e1a0 <_free_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	2900      	cmp	r1, #0
 800e1a6:	d041      	beq.n	800e22c <_free_r+0x8c>
 800e1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ac:	1f0c      	subs	r4, r1, #4
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bfb8      	it	lt
 800e1b2:	18e4      	addlt	r4, r4, r3
 800e1b4:	f7ff f8fc 	bl	800d3b0 <__malloc_lock>
 800e1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800e230 <_free_r+0x90>)
 800e1ba:	6813      	ldr	r3, [r2, #0]
 800e1bc:	b933      	cbnz	r3, 800e1cc <_free_r+0x2c>
 800e1be:	6063      	str	r3, [r4, #4]
 800e1c0:	6014      	str	r4, [r2, #0]
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1c8:	f7ff b8f8 	b.w	800d3bc <__malloc_unlock>
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	d908      	bls.n	800e1e2 <_free_r+0x42>
 800e1d0:	6820      	ldr	r0, [r4, #0]
 800e1d2:	1821      	adds	r1, r4, r0
 800e1d4:	428b      	cmp	r3, r1
 800e1d6:	bf01      	itttt	eq
 800e1d8:	6819      	ldreq	r1, [r3, #0]
 800e1da:	685b      	ldreq	r3, [r3, #4]
 800e1dc:	1809      	addeq	r1, r1, r0
 800e1de:	6021      	streq	r1, [r4, #0]
 800e1e0:	e7ed      	b.n	800e1be <_free_r+0x1e>
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	b10b      	cbz	r3, 800e1ec <_free_r+0x4c>
 800e1e8:	42a3      	cmp	r3, r4
 800e1ea:	d9fa      	bls.n	800e1e2 <_free_r+0x42>
 800e1ec:	6811      	ldr	r1, [r2, #0]
 800e1ee:	1850      	adds	r0, r2, r1
 800e1f0:	42a0      	cmp	r0, r4
 800e1f2:	d10b      	bne.n	800e20c <_free_r+0x6c>
 800e1f4:	6820      	ldr	r0, [r4, #0]
 800e1f6:	4401      	add	r1, r0
 800e1f8:	1850      	adds	r0, r2, r1
 800e1fa:	4283      	cmp	r3, r0
 800e1fc:	6011      	str	r1, [r2, #0]
 800e1fe:	d1e0      	bne.n	800e1c2 <_free_r+0x22>
 800e200:	6818      	ldr	r0, [r3, #0]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	6053      	str	r3, [r2, #4]
 800e206:	4408      	add	r0, r1
 800e208:	6010      	str	r0, [r2, #0]
 800e20a:	e7da      	b.n	800e1c2 <_free_r+0x22>
 800e20c:	d902      	bls.n	800e214 <_free_r+0x74>
 800e20e:	230c      	movs	r3, #12
 800e210:	602b      	str	r3, [r5, #0]
 800e212:	e7d6      	b.n	800e1c2 <_free_r+0x22>
 800e214:	6820      	ldr	r0, [r4, #0]
 800e216:	1821      	adds	r1, r4, r0
 800e218:	428b      	cmp	r3, r1
 800e21a:	bf04      	itt	eq
 800e21c:	6819      	ldreq	r1, [r3, #0]
 800e21e:	685b      	ldreq	r3, [r3, #4]
 800e220:	6063      	str	r3, [r4, #4]
 800e222:	bf04      	itt	eq
 800e224:	1809      	addeq	r1, r1, r0
 800e226:	6021      	streq	r1, [r4, #0]
 800e228:	6054      	str	r4, [r2, #4]
 800e22a:	e7ca      	b.n	800e1c2 <_free_r+0x22>
 800e22c:	bd38      	pop	{r3, r4, r5, pc}
 800e22e:	bf00      	nop
 800e230:	20002104 	.word	0x20002104

0800e234 <_malloc_usable_size_r>:
 800e234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e238:	1f18      	subs	r0, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	bfbc      	itt	lt
 800e23e:	580b      	ldrlt	r3, [r1, r0]
 800e240:	18c0      	addlt	r0, r0, r3
 800e242:	4770      	bx	lr

0800e244 <fiprintf>:
 800e244:	b40e      	push	{r1, r2, r3}
 800e246:	b503      	push	{r0, r1, lr}
 800e248:	4601      	mov	r1, r0
 800e24a:	ab03      	add	r3, sp, #12
 800e24c:	4805      	ldr	r0, [pc, #20]	@ (800e264 <fiprintf+0x20>)
 800e24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e252:	6800      	ldr	r0, [r0, #0]
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	f000 f837 	bl	800e2c8 <_vfiprintf_r>
 800e25a:	b002      	add	sp, #8
 800e25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e260:	b003      	add	sp, #12
 800e262:	4770      	bx	lr
 800e264:	2000027c 	.word	0x2000027c

0800e268 <abort>:
 800e268:	b508      	push	{r3, lr}
 800e26a:	2006      	movs	r0, #6
 800e26c:	f000 f96c 	bl	800e548 <raise>
 800e270:	2001      	movs	r0, #1
 800e272:	f7f4 fb5b 	bl	800292c <_exit>

0800e276 <__sfputc_r>:
 800e276:	6893      	ldr	r3, [r2, #8]
 800e278:	3b01      	subs	r3, #1
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	b410      	push	{r4}
 800e27e:	6093      	str	r3, [r2, #8]
 800e280:	da08      	bge.n	800e294 <__sfputc_r+0x1e>
 800e282:	6994      	ldr	r4, [r2, #24]
 800e284:	42a3      	cmp	r3, r4
 800e286:	db01      	blt.n	800e28c <__sfputc_r+0x16>
 800e288:	290a      	cmp	r1, #10
 800e28a:	d103      	bne.n	800e294 <__sfputc_r+0x1e>
 800e28c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e290:	f7ff bdbd 	b.w	800de0e <__swbuf_r>
 800e294:	6813      	ldr	r3, [r2, #0]
 800e296:	1c58      	adds	r0, r3, #1
 800e298:	6010      	str	r0, [r2, #0]
 800e29a:	7019      	strb	r1, [r3, #0]
 800e29c:	4608      	mov	r0, r1
 800e29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <__sfputs_r>:
 800e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460f      	mov	r7, r1
 800e2aa:	4614      	mov	r4, r2
 800e2ac:	18d5      	adds	r5, r2, r3
 800e2ae:	42ac      	cmp	r4, r5
 800e2b0:	d101      	bne.n	800e2b6 <__sfputs_r+0x12>
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	e007      	b.n	800e2c6 <__sfputs_r+0x22>
 800e2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ba:	463a      	mov	r2, r7
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7ff ffda 	bl	800e276 <__sfputc_r>
 800e2c2:	1c43      	adds	r3, r0, #1
 800e2c4:	d1f3      	bne.n	800e2ae <__sfputs_r+0xa>
 800e2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2c8 <_vfiprintf_r>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	b09d      	sub	sp, #116	@ 0x74
 800e2d0:	4614      	mov	r4, r2
 800e2d2:	4698      	mov	r8, r3
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	b118      	cbz	r0, 800e2e0 <_vfiprintf_r+0x18>
 800e2d8:	6a03      	ldr	r3, [r0, #32]
 800e2da:	b90b      	cbnz	r3, 800e2e0 <_vfiprintf_r+0x18>
 800e2dc:	f7fc fca0 	bl	800ac20 <__sinit>
 800e2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2e2:	07d9      	lsls	r1, r3, #31
 800e2e4:	d405      	bmi.n	800e2f2 <_vfiprintf_r+0x2a>
 800e2e6:	89ab      	ldrh	r3, [r5, #12]
 800e2e8:	059a      	lsls	r2, r3, #22
 800e2ea:	d402      	bmi.n	800e2f2 <_vfiprintf_r+0x2a>
 800e2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ee:	f7fd fbfa 	bl	800bae6 <__retarget_lock_acquire_recursive>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	071b      	lsls	r3, r3, #28
 800e2f6:	d501      	bpl.n	800e2fc <_vfiprintf_r+0x34>
 800e2f8:	692b      	ldr	r3, [r5, #16]
 800e2fa:	b99b      	cbnz	r3, 800e324 <_vfiprintf_r+0x5c>
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff fdc4 	bl	800de8c <__swsetup_r>
 800e304:	b170      	cbz	r0, 800e324 <_vfiprintf_r+0x5c>
 800e306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e308:	07dc      	lsls	r4, r3, #31
 800e30a:	d504      	bpl.n	800e316 <_vfiprintf_r+0x4e>
 800e30c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e310:	b01d      	add	sp, #116	@ 0x74
 800e312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e316:	89ab      	ldrh	r3, [r5, #12]
 800e318:	0598      	lsls	r0, r3, #22
 800e31a:	d4f7      	bmi.n	800e30c <_vfiprintf_r+0x44>
 800e31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e31e:	f7fd fbe3 	bl	800bae8 <__retarget_lock_release_recursive>
 800e322:	e7f3      	b.n	800e30c <_vfiprintf_r+0x44>
 800e324:	2300      	movs	r3, #0
 800e326:	9309      	str	r3, [sp, #36]	@ 0x24
 800e328:	2320      	movs	r3, #32
 800e32a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e332:	2330      	movs	r3, #48	@ 0x30
 800e334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e4e4 <_vfiprintf_r+0x21c>
 800e338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e33c:	f04f 0901 	mov.w	r9, #1
 800e340:	4623      	mov	r3, r4
 800e342:	469a      	mov	sl, r3
 800e344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e348:	b10a      	cbz	r2, 800e34e <_vfiprintf_r+0x86>
 800e34a:	2a25      	cmp	r2, #37	@ 0x25
 800e34c:	d1f9      	bne.n	800e342 <_vfiprintf_r+0x7a>
 800e34e:	ebba 0b04 	subs.w	fp, sl, r4
 800e352:	d00b      	beq.n	800e36c <_vfiprintf_r+0xa4>
 800e354:	465b      	mov	r3, fp
 800e356:	4622      	mov	r2, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7ff ffa2 	bl	800e2a4 <__sfputs_r>
 800e360:	3001      	adds	r0, #1
 800e362:	f000 80a7 	beq.w	800e4b4 <_vfiprintf_r+0x1ec>
 800e366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e368:	445a      	add	r2, fp
 800e36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e36c:	f89a 3000 	ldrb.w	r3, [sl]
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 809f 	beq.w	800e4b4 <_vfiprintf_r+0x1ec>
 800e376:	2300      	movs	r3, #0
 800e378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e380:	f10a 0a01 	add.w	sl, sl, #1
 800e384:	9304      	str	r3, [sp, #16]
 800e386:	9307      	str	r3, [sp, #28]
 800e388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e38c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e38e:	4654      	mov	r4, sl
 800e390:	2205      	movs	r2, #5
 800e392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e396:	4853      	ldr	r0, [pc, #332]	@ (800e4e4 <_vfiprintf_r+0x21c>)
 800e398:	f7f1 ff32 	bl	8000200 <memchr>
 800e39c:	9a04      	ldr	r2, [sp, #16]
 800e39e:	b9d8      	cbnz	r0, 800e3d8 <_vfiprintf_r+0x110>
 800e3a0:	06d1      	lsls	r1, r2, #27
 800e3a2:	bf44      	itt	mi
 800e3a4:	2320      	movmi	r3, #32
 800e3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3aa:	0713      	lsls	r3, r2, #28
 800e3ac:	bf44      	itt	mi
 800e3ae:	232b      	movmi	r3, #43	@ 0x2b
 800e3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ba:	d015      	beq.n	800e3e8 <_vfiprintf_r+0x120>
 800e3bc:	9a07      	ldr	r2, [sp, #28]
 800e3be:	4654      	mov	r4, sl
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	f04f 0c0a 	mov.w	ip, #10
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3cc:	3b30      	subs	r3, #48	@ 0x30
 800e3ce:	2b09      	cmp	r3, #9
 800e3d0:	d94b      	bls.n	800e46a <_vfiprintf_r+0x1a2>
 800e3d2:	b1b0      	cbz	r0, 800e402 <_vfiprintf_r+0x13a>
 800e3d4:	9207      	str	r2, [sp, #28]
 800e3d6:	e014      	b.n	800e402 <_vfiprintf_r+0x13a>
 800e3d8:	eba0 0308 	sub.w	r3, r0, r8
 800e3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	9304      	str	r3, [sp, #16]
 800e3e4:	46a2      	mov	sl, r4
 800e3e6:	e7d2      	b.n	800e38e <_vfiprintf_r+0xc6>
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	1d19      	adds	r1, r3, #4
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	9103      	str	r1, [sp, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bfbb      	ittet	lt
 800e3f4:	425b      	neglt	r3, r3
 800e3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e3fa:	9307      	strge	r3, [sp, #28]
 800e3fc:	9307      	strlt	r3, [sp, #28]
 800e3fe:	bfb8      	it	lt
 800e400:	9204      	strlt	r2, [sp, #16]
 800e402:	7823      	ldrb	r3, [r4, #0]
 800e404:	2b2e      	cmp	r3, #46	@ 0x2e
 800e406:	d10a      	bne.n	800e41e <_vfiprintf_r+0x156>
 800e408:	7863      	ldrb	r3, [r4, #1]
 800e40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e40c:	d132      	bne.n	800e474 <_vfiprintf_r+0x1ac>
 800e40e:	9b03      	ldr	r3, [sp, #12]
 800e410:	1d1a      	adds	r2, r3, #4
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	9203      	str	r2, [sp, #12]
 800e416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e41a:	3402      	adds	r4, #2
 800e41c:	9305      	str	r3, [sp, #20]
 800e41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4f4 <_vfiprintf_r+0x22c>
 800e422:	7821      	ldrb	r1, [r4, #0]
 800e424:	2203      	movs	r2, #3
 800e426:	4650      	mov	r0, sl
 800e428:	f7f1 feea 	bl	8000200 <memchr>
 800e42c:	b138      	cbz	r0, 800e43e <_vfiprintf_r+0x176>
 800e42e:	9b04      	ldr	r3, [sp, #16]
 800e430:	eba0 000a 	sub.w	r0, r0, sl
 800e434:	2240      	movs	r2, #64	@ 0x40
 800e436:	4082      	lsls	r2, r0
 800e438:	4313      	orrs	r3, r2
 800e43a:	3401      	adds	r4, #1
 800e43c:	9304      	str	r3, [sp, #16]
 800e43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e442:	4829      	ldr	r0, [pc, #164]	@ (800e4e8 <_vfiprintf_r+0x220>)
 800e444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e448:	2206      	movs	r2, #6
 800e44a:	f7f1 fed9 	bl	8000200 <memchr>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d03f      	beq.n	800e4d2 <_vfiprintf_r+0x20a>
 800e452:	4b26      	ldr	r3, [pc, #152]	@ (800e4ec <_vfiprintf_r+0x224>)
 800e454:	bb1b      	cbnz	r3, 800e49e <_vfiprintf_r+0x1d6>
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	3307      	adds	r3, #7
 800e45a:	f023 0307 	bic.w	r3, r3, #7
 800e45e:	3308      	adds	r3, #8
 800e460:	9303      	str	r3, [sp, #12]
 800e462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e464:	443b      	add	r3, r7
 800e466:	9309      	str	r3, [sp, #36]	@ 0x24
 800e468:	e76a      	b.n	800e340 <_vfiprintf_r+0x78>
 800e46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e46e:	460c      	mov	r4, r1
 800e470:	2001      	movs	r0, #1
 800e472:	e7a8      	b.n	800e3c6 <_vfiprintf_r+0xfe>
 800e474:	2300      	movs	r3, #0
 800e476:	3401      	adds	r4, #1
 800e478:	9305      	str	r3, [sp, #20]
 800e47a:	4619      	mov	r1, r3
 800e47c:	f04f 0c0a 	mov.w	ip, #10
 800e480:	4620      	mov	r0, r4
 800e482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e486:	3a30      	subs	r2, #48	@ 0x30
 800e488:	2a09      	cmp	r2, #9
 800e48a:	d903      	bls.n	800e494 <_vfiprintf_r+0x1cc>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d0c6      	beq.n	800e41e <_vfiprintf_r+0x156>
 800e490:	9105      	str	r1, [sp, #20]
 800e492:	e7c4      	b.n	800e41e <_vfiprintf_r+0x156>
 800e494:	fb0c 2101 	mla	r1, ip, r1, r2
 800e498:	4604      	mov	r4, r0
 800e49a:	2301      	movs	r3, #1
 800e49c:	e7f0      	b.n	800e480 <_vfiprintf_r+0x1b8>
 800e49e:	ab03      	add	r3, sp, #12
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	462a      	mov	r2, r5
 800e4a4:	4b12      	ldr	r3, [pc, #72]	@ (800e4f0 <_vfiprintf_r+0x228>)
 800e4a6:	a904      	add	r1, sp, #16
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f7fb fd41 	bl	8009f30 <_printf_float>
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	1c78      	adds	r0, r7, #1
 800e4b2:	d1d6      	bne.n	800e462 <_vfiprintf_r+0x19a>
 800e4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4b6:	07d9      	lsls	r1, r3, #31
 800e4b8:	d405      	bmi.n	800e4c6 <_vfiprintf_r+0x1fe>
 800e4ba:	89ab      	ldrh	r3, [r5, #12]
 800e4bc:	059a      	lsls	r2, r3, #22
 800e4be:	d402      	bmi.n	800e4c6 <_vfiprintf_r+0x1fe>
 800e4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4c2:	f7fd fb11 	bl	800bae8 <__retarget_lock_release_recursive>
 800e4c6:	89ab      	ldrh	r3, [r5, #12]
 800e4c8:	065b      	lsls	r3, r3, #25
 800e4ca:	f53f af1f 	bmi.w	800e30c <_vfiprintf_r+0x44>
 800e4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4d0:	e71e      	b.n	800e310 <_vfiprintf_r+0x48>
 800e4d2:	ab03      	add	r3, sp, #12
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	462a      	mov	r2, r5
 800e4d8:	4b05      	ldr	r3, [pc, #20]	@ (800e4f0 <_vfiprintf_r+0x228>)
 800e4da:	a904      	add	r1, sp, #16
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f7fb ffbf 	bl	800a460 <_printf_i>
 800e4e2:	e7e4      	b.n	800e4ae <_vfiprintf_r+0x1e6>
 800e4e4:	0800f2a6 	.word	0x0800f2a6
 800e4e8:	0800f2b0 	.word	0x0800f2b0
 800e4ec:	08009f31 	.word	0x08009f31
 800e4f0:	0800e2a5 	.word	0x0800e2a5
 800e4f4:	0800f2ac 	.word	0x0800f2ac

0800e4f8 <_raise_r>:
 800e4f8:	291f      	cmp	r1, #31
 800e4fa:	b538      	push	{r3, r4, r5, lr}
 800e4fc:	4605      	mov	r5, r0
 800e4fe:	460c      	mov	r4, r1
 800e500:	d904      	bls.n	800e50c <_raise_r+0x14>
 800e502:	2316      	movs	r3, #22
 800e504:	6003      	str	r3, [r0, #0]
 800e506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e50e:	b112      	cbz	r2, 800e516 <_raise_r+0x1e>
 800e510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e514:	b94b      	cbnz	r3, 800e52a <_raise_r+0x32>
 800e516:	4628      	mov	r0, r5
 800e518:	f000 f830 	bl	800e57c <_getpid_r>
 800e51c:	4622      	mov	r2, r4
 800e51e:	4601      	mov	r1, r0
 800e520:	4628      	mov	r0, r5
 800e522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e526:	f000 b817 	b.w	800e558 <_kill_r>
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d00a      	beq.n	800e544 <_raise_r+0x4c>
 800e52e:	1c59      	adds	r1, r3, #1
 800e530:	d103      	bne.n	800e53a <_raise_r+0x42>
 800e532:	2316      	movs	r3, #22
 800e534:	6003      	str	r3, [r0, #0]
 800e536:	2001      	movs	r0, #1
 800e538:	e7e7      	b.n	800e50a <_raise_r+0x12>
 800e53a:	2100      	movs	r1, #0
 800e53c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e540:	4620      	mov	r0, r4
 800e542:	4798      	blx	r3
 800e544:	2000      	movs	r0, #0
 800e546:	e7e0      	b.n	800e50a <_raise_r+0x12>

0800e548 <raise>:
 800e548:	4b02      	ldr	r3, [pc, #8]	@ (800e554 <raise+0xc>)
 800e54a:	4601      	mov	r1, r0
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	f7ff bfd3 	b.w	800e4f8 <_raise_r>
 800e552:	bf00      	nop
 800e554:	2000027c 	.word	0x2000027c

0800e558 <_kill_r>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	4d07      	ldr	r5, [pc, #28]	@ (800e578 <_kill_r+0x20>)
 800e55c:	2300      	movs	r3, #0
 800e55e:	4604      	mov	r4, r0
 800e560:	4608      	mov	r0, r1
 800e562:	4611      	mov	r1, r2
 800e564:	602b      	str	r3, [r5, #0]
 800e566:	f7f4 f9d1 	bl	800290c <_kill>
 800e56a:	1c43      	adds	r3, r0, #1
 800e56c:	d102      	bne.n	800e574 <_kill_r+0x1c>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	b103      	cbz	r3, 800e574 <_kill_r+0x1c>
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	bd38      	pop	{r3, r4, r5, pc}
 800e576:	bf00      	nop
 800e578:	20002108 	.word	0x20002108

0800e57c <_getpid_r>:
 800e57c:	f7f4 b9be 	b.w	80028fc <_getpid>

0800e580 <_init>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr

0800e58c <_fini>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	bf00      	nop
 800e590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e592:	bc08      	pop	{r3}
 800e594:	469e      	mov	lr, r3
 800e596:	4770      	bx	lr
